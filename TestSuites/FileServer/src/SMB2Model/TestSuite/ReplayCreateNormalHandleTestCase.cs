// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReplayCreateNormalHandleTestCase : PtfTestClassBase {
        
        public ReplayCreateNormalHandleTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void CreateResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c);
        
        public delegate void PreConstraintDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter), "CreateResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter IReplayAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> c1;
        
        private IVariable<int> durableHandleResponse;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<int> v2;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> v3;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IReplayAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter))));
            this.Manager.Subscribe(CreateResponseInfo, this.IReplayAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("c1");
            this.durableHandleResponse = this.Manager.CreateVariable<int>("durableHandleResponse");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("v3");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS0() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp0);
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp0, "c of ReadConfig, state S1");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S2\'");
            int temp3 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker1)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker2)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker3)));
            if ((temp3 == 0)) {
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S19\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS20();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker)));
                }
                goto label2;
            }
            if ((temp3 == 1)) {
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceBoundaryValid,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S25\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S26\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker1)));
                }
                goto label2;
            }
            if ((temp3 == 2)) {
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S7\'");
                int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker3)));
                if ((temp1 == 0)) {
                    ReplayCreateNormalHandleTestCaseS8();
                    goto label0;
                }
                if ((temp1 == 1)) {
                    ReplayCreateNormalHandleTestCaseS8();
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker3)));
            label0:
;
                goto label2;
            }
            if ((temp3 == 3)) {
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S11\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S13\'");
                int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker4)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker5)));
                if ((temp2 == 0)) {
                    ReplayCreateNormalHandleTestCaseS14();
                    goto label1;
                }
                if ((temp2 == 1)) {
                    ReplayCreateNormalHandleTestCaseS14();
                    goto label1;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker4)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS0CreateResponseChecker5)));
            label1:
;
                goto label2;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S2\'.");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS0CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S19");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S19");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S19");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateI" +
                        "ncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response f" +
                        "rom Open, as specified in the \"Response Construction\" phase, with the following " +
                        "additional steps, and send the response to client\", \"[TestInfo] Open.IsPersisten" +
                        "t is FALSE\", \"[TestInfo] If the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request comman" +
                        "d is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS20() {
            this.Manager.Comment("reaching state \'S20\'");
        }
        
        private void PreConstraintChecker1() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateNormalHandleTestCaseS0CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S25");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S25");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S25");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate th" +
                        "e Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches " +
                        "the ClientGuid of the connection that received this request\", \"[TestInfo] Open i" +
                        "s not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command " +
                        "is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker2() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS0CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S7");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S7");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S7");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS8() {
            this.Manager.Comment("reaching state \'S8\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS0CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S7");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S7");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S7");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker3() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS0CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S13");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS14() {
            this.Manager.Comment("reaching state \'S14\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS0CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S13");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S1001
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS1001() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS1001");
            this.Manager.Comment("reaching state \'S1001\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp4;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp4);
            this.Manager.Comment("reaching state \'S1002\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp4, "c of ReadConfig, state S1002");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1003\'");
            int temp9 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker4)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker5)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker6)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker7)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S1004\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S1005\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S1006\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S1007\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1008\'");
                int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker1)));
                if ((temp5 == 0)) {
                    ReplayCreateNormalHandleTestCaseS839();
                    goto label3;
                }
                if ((temp5 == 1)) {
                    ReplayCreateNormalHandleTestCaseS839();
                    goto label3;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker1)));
            label3:
;
                goto label7;
            }
            if ((temp9 == 1)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label7;
            }
            if ((temp9 == 2)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label7;
            }
            if ((temp9 == 3)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label7;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1003\'.");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker4() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1008");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S1008");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S1008");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS839() {
            this.Manager.Comment("reaching state \'S839\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1008");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S1008");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S1008");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker5() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS106() {
            this.Manager.Comment("reaching state \'S106\'");
            this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                    "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
            this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("checking step \'return PrepareCreate\'");
            this.Manager.Comment("reaching state \'S108\'");
            this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,InvalidChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
            this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S110\'");
            int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker3)));
            if ((temp6 == 0)) {
                ReplayCreateNormalHandleTestCaseS14();
                goto label4;
            }
            if ((temp6 == 1)) {
                ReplayCreateNormalHandleTestCaseS14();
                goto label4;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker3)));
        label4:
;
        }
        
        private void ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S110");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S110");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S110");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S110");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker6() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateNormalHandleTestCaseS47() {
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                    "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
            this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("checking step \'return PrepareCreate\'");
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,InvalidChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
            this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S51\'");
            int temp7 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker4)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker5)));
            if ((temp7 == 0)) {
                ReplayCreateNormalHandleTestCaseS52();
                goto label5;
            }
            if ((temp7 == 1)) {
                ReplayCreateNormalHandleTestCaseS52();
                goto label5;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker4)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker5)));
        label5:
;
        }
        
        private void ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S51");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S51");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S51");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS52() {
            this.Manager.Comment("reaching state \'S52\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S51");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S51");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S51");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker7() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS500() {
            this.Manager.Comment("reaching state \'S500\'");
            this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                    "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
            this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
            this.Manager.Comment("reaching state \'S501\'");
            this.Manager.Comment("checking step \'return PrepareCreate\'");
            this.Manager.Comment("reaching state \'S502\'");
            this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,InvalidChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
            this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
            this.Manager.Comment("reaching state \'S503\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S504\'");
            int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker6)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker7)));
            if ((temp8 == 0)) {
                ReplayCreateNormalHandleTestCaseS484();
                goto label6;
            }
            if ((temp8 == 1)) {
                ReplayCreateNormalHandleTestCaseS484();
                goto label6;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker6)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker7)));
        label6:
;
        }
        
        private void ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S504");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S504");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS484() {
            this.Manager.Comment("reaching state \'S484\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS1001CreateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S504");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S504");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S504");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S1009
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS1009() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS1009");
            this.Manager.Comment("reaching state \'S1009\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp10;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp10);
            this.Manager.Comment("reaching state \'S1010\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp10, "c of ReadConfig, state S1010");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1011\'");
            int temp12 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker8)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker9)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker10)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker11)));
            if ((temp12 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label9;
            }
            if ((temp12 == 1)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label9;
            }
            if ((temp12 == 2)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label9;
            }
            if ((temp12 == 3)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label9;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1011\'.");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker8() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker9() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS41() {
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                    "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
            this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("checking step \'return PrepareCreate\'");
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,InvalidChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
            this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S45\'");
            int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1009CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1009CreateResponseChecker1)));
            if ((temp11 == 0)) {
                ReplayCreateNormalHandleTestCaseS46();
                goto label8;
            }
            if ((temp11 == 1)) {
                ReplayCreateNormalHandleTestCaseS46();
                goto label8;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1009CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS1009CreateResponseChecker1)));
        label8:
;
        }
        
        private void ReplayCreateNormalHandleTestCaseS1009CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S45");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S45");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS46() {
            this.Manager.Comment("reaching state \'S46\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS1009CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S45");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S45");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker10() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker11() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S111
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS111() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS111");
            this.Manager.Comment("reaching state \'S111\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp13;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp13);
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp13, "c of ReadConfig, state S112");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S113\'");
            int temp16 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker12)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker13)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker14)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker15)));
            if ((temp16 == 0)) {
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S118\'");
                int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS111CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS111CreateResponseChecker1)));
                if ((temp14 == 0)) {
                    ReplayCreateNormalHandleTestCaseS119();
                    goto label10;
                }
                if ((temp14 == 1)) {
                    ReplayCreateNormalHandleTestCaseS119();
                    goto label10;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS111CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS111CreateResponseChecker1)));
            label10:
;
                goto label12;
            }
            if ((temp16 == 1)) {
                this.Manager.Comment("reaching state \'S120\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S124\'");
                int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS111CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS111CreateResponseChecker3)));
                if ((temp15 == 0)) {
                    ReplayCreateNormalHandleTestCaseS14();
                    goto label11;
                }
                if ((temp15 == 1)) {
                    ReplayCreateNormalHandleTestCaseS14();
                    goto label11;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS111CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS111CreateResponseChecker3)));
            label11:
;
                goto label12;
            }
            if ((temp16 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label12;
            }
            if ((temp16 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label12;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S113\'.");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker12() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS111CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S118");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S118");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S118");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUS" +
                        "T locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGui" +
                        "d in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGu" +
                        "id matches the ClientGuid of the connection that received this request\", \"[TestI" +
                        "nfo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If " +
                        "an Open is not found, the server MUST continue the create process specified in t" +
                        "he \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SM" +
                        "B2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializat" +
                        "ion\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set" +
                        " Open.DurableOwner to a security descriptor accessible only by the user represen" +
                        "ted by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE" +
                        "\", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is L" +
                        "easeStateNotIncludeH\", \"[TestInfo] If the command request does not include FileI" +
                        "d, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, requ" +
                        "est command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS119() {
            this.Manager.Comment("reaching state \'S119\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS111CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S118");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S118");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S118");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUS" +
                        "T locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGui" +
                        "d in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGu" +
                        "id matches the ClientGuid of the connection that received this request\", \"[TestI" +
                        "nfo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If " +
                        "an Open is not found, the server MUST continue the create process specified in t" +
                        "he \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SM" +
                        "B2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializat" +
                        "ion\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set" +
                        " Open.DurableOwner to a security descriptor accessible only by the user represen" +
                        "ted by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE" +
                        "\", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is L" +
                        "easeStateNotIncludeH\", \"[TestInfo] If the command request does not include FileI" +
                        "d, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, requ" +
                        "est command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker13() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS111CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S124");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S124");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS111CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S124");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S124");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker14() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker15() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S125
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS125() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS125");
            this.Manager.Comment("reaching state \'S125\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp17;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp17);
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp17, "c of ReadConfig, state S126");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S127\'");
            int temp20 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker16)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker17)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker18)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker19)));
            if ((temp20 == 0)) {
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S131\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S132\'");
                int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS125CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS125CreateResponseChecker1)));
                if ((temp18 == 0)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label13;
                }
                if ((temp18 == 1)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label13;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS125CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS125CreateResponseChecker1)));
            label13:
;
                goto label15;
            }
            if ((temp20 == 1)) {
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S135\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S136\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S138\'");
                int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS125CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS125CreateResponseChecker3)));
                if ((temp19 == 0)) {
                    ReplayCreateNormalHandleTestCaseS96();
                    goto label14;
                }
                if ((temp19 == 1)) {
                    ReplayCreateNormalHandleTestCaseS96();
                    goto label14;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS125CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS125CreateResponseChecker3)));
            label14:
;
                goto label15;
            }
            if ((temp20 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label15;
            }
            if ((temp20 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label15;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S127\'.");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker16() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS125CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S132");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S132");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS133() {
            this.Manager.Comment("reaching state \'S133\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS125CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S132");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S132");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker17() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS125CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S138");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loca" +
                        "te the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in t" +
                        "he SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid mat" +
                        "ches the ClientGuid of the connection that received this request\", \"[TestInfo] O" +
                        "pen is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Ope" +
                        "n is not found, the server MUST continue the create process specified in the \"Op" +
                        "en Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3." +
                        "3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_D" +
                        "URABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" p" +
                        "hase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open." +
                        "DurableOwner to a security descriptor accessible only by the user represented by" +
                        " Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[T" +
                        "estInfo] If the command request does not include FileId, this section MUST be sk" +
                        "ipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS96() {
            this.Manager.Comment("reaching state \'S96\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS125CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S138");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loca" +
                        "te the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in t" +
                        "he SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid mat" +
                        "ches the ClientGuid of the connection that received this request\", \"[TestInfo] O" +
                        "pen is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Ope" +
                        "n is not found, the server MUST continue the create process specified in the \"Op" +
                        "en Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3." +
                        "3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_D" +
                        "URABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" p" +
                        "hase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open." +
                        "DurableOwner to a security descriptor accessible only by the user represented by" +
                        " Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[T" +
                        "estInfo] If the command request does not include FileId, this section MUST be sk" +
                        "ipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker18() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker19() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S139
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS139() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS139");
            this.Manager.Comment("reaching state \'S139\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp21;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp21);
            this.Manager.Comment("reaching state \'S140\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp21, "c of ReadConfig, state S140");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S141\'");
            int temp24 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker20)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker21)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker22)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker23)));
            if ((temp24 == 0)) {
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S143\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S145\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S146\'");
                int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS139CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS139CreateResponseChecker1)));
                if ((temp22 == 0)) {
                    ReplayCreateNormalHandleTestCaseS147();
                    goto label16;
                }
                if ((temp22 == 1)) {
                    ReplayCreateNormalHandleTestCaseS148();
                    goto label16;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS139CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS139CreateResponseChecker1)));
            label16:
;
                goto label18;
            }
            if ((temp24 == 1)) {
                this.Manager.Comment("reaching state \'S149\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S151\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S153\'");
                int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS139CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS139CreateResponseChecker3)));
                if ((temp23 == 0)) {
                    ReplayCreateNormalHandleTestCaseS14();
                    goto label17;
                }
                if ((temp23 == 1)) {
                    ReplayCreateNormalHandleTestCaseS14();
                    goto label17;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS139CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS139CreateResponseChecker3)));
            label17:
;
                goto label18;
            }
            if ((temp24 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label18;
            }
            if ((temp24 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label18;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S141\'.");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker20() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS139CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S146");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S146");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS147() {
            this.Manager.Comment("reaching state \'S147\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS139CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S146");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S146");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS148() {
            this.Manager.Comment("reaching state \'S148\'");
        }
        
        private void PreConstraintChecker21() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS139CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S153");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S153");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS139CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S153");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S153");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S153");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker22() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker23() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS154() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS154");
            this.Manager.Comment("reaching state \'S154\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp25;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp25);
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp25, "c of ReadConfig, state S155");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S156\'");
            int temp27 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker24)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker25)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker26)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker27)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S161\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS154CreateResponseChecker))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS162();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS154CreateResponseChecker)));
                }
                goto label20;
            }
            if ((temp27 == 1)) {
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S167\'");
                int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS154CreateResponseChecker1)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS154CreateResponseChecker2)));
                if ((temp26 == 0)) {
                    ReplayCreateNormalHandleTestCaseS168();
                    goto label19;
                }
                if ((temp26 == 1)) {
                    ReplayCreateNormalHandleTestCaseS169();
                    goto label19;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS154CreateResponseChecker1)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS154CreateResponseChecker2)));
            label19:
;
                goto label20;
            }
            if ((temp27 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label20;
            }
            if ((temp27 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label20;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S156\'.");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker24() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS154CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S161");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S161");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLeve" +
                        "l is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open" +
                        " in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the Cl" +
                        "ientGuid of the connection that received this request\", \"[TestInfo] Open is not " +
                        "NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not fo" +
                        "und, the server MUST continue the create process specified in the \"Open Executio" +
                        "n\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: T" +
                        "he server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HAND" +
                        "LE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, the s" +
                        "erver MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwne" +
                        "r to a security descriptor accessible only by the user represented by Open.Sessi" +
                        "on.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] Re" +
                        "quested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateIncludeH" +
                        "\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Ope" +
                        "n, as specified in the \"Response Construction\" phase, with the following additio" +
                        "nal steps, and send the response to client\", \"[TestInfo] Open.IsPersistent is FA" +
                        "LSE\", \"[TestInfo] If the command request does not include FileId, this section M" +
                        "UST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Cr" +
                        "eate\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS162() {
            this.Manager.Comment("reaching state \'S162\'");
        }
        
        private void PreConstraintChecker25() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS154CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S167");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S167");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS168() {
            this.Manager.Comment("reaching state \'S168\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS154CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S167");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S167");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS169() {
            this.Manager.Comment("reaching state \'S169\'");
        }
        
        private void PreConstraintChecker26() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker27() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S170
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS170() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS170");
            this.Manager.Comment("reaching state \'S170\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp28;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp28);
            this.Manager.Comment("reaching state \'S171\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp28, "c of ReadConfig, state S171");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S172\'");
            int temp31 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker28)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker29)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker30)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker31)));
            if ((temp31 == 0)) {
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S176\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S177\'");
                int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS170CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS170CreateResponseChecker1)));
                if ((temp29 == 0)) {
                    ReplayCreateNormalHandleTestCaseS178();
                    goto label21;
                }
                if ((temp29 == 1)) {
                    ReplayCreateNormalHandleTestCaseS178();
                    goto label21;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS170CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS170CreateResponseChecker1)));
            label21:
;
                goto label23;
            }
            if ((temp31 == 1)) {
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S183\'");
                int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS170CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS170CreateResponseChecker3)));
                if ((temp30 == 0)) {
                    ReplayCreateNormalHandleTestCaseS14();
                    goto label22;
                }
                if ((temp30 == 1)) {
                    ReplayCreateNormalHandleTestCaseS14();
                    goto label22;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS170CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS170CreateResponseChecker3)));
            label22:
;
                goto label23;
            }
            if ((temp31 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label23;
            }
            if ((temp31 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label23;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S172\'.");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker28() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS170CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S177");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S177");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS178() {
            this.Manager.Comment("reaching state \'S178\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS170CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S177");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S177");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker29() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS170CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S183");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S183");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S183");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS170CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S183");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S183");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S183");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker30() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker31() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S184
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS184() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS184");
            this.Manager.Comment("reaching state \'S184\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp32;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp32);
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp32, "c of ReadConfig, state S185");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S186\'");
            int temp35 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker32)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker33)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker34)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker35)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S188\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S191\'");
                int temp33 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS184CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS184CreateResponseChecker1)));
                if ((temp33 == 0)) {
                    ReplayCreateNormalHandleTestCaseS192();
                    goto label24;
                }
                if ((temp33 == 1)) {
                    ReplayCreateNormalHandleTestCaseS192();
                    goto label24;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS184CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS184CreateResponseChecker1)));
            label24:
;
                goto label26;
            }
            if ((temp35 == 1)) {
                this.Manager.Comment("reaching state \'S193\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S195\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S197\'");
                int temp34 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS184CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS184CreateResponseChecker3)));
                if ((temp34 == 0)) {
                    ReplayCreateNormalHandleTestCaseS198();
                    goto label25;
                }
                if ((temp34 == 1)) {
                    ReplayCreateNormalHandleTestCaseS198();
                    goto label25;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS184CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS184CreateResponseChecker3)));
            label25:
;
                goto label26;
            }
            if ((temp35 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label26;
            }
            if ((temp35 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label26;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S186\'.");
        label26:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker32() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS184CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S191");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S191");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLe" +
                        "velII\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue" +
                        " the create process specified in the \"Open Execution\" Phase, and perform the fol" +
                        "lowing additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.Creat" +
                        "eGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] I" +
                        "n the \"Successful Open Initialization\" phase, the server MUST set Open.IsDurable" +
                        " to TRUE. The server MUST also set Open.DurableOwner to a security descriptor ac" +
                        "cessible only by the user represented by Open.Session.SecurityContext.\", \"[TestI" +
                        "nfo] Open.IsDurable is set to TRUE\", \"[TestInfo] If the command request does not" +
                        " include FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect i" +
                        "s Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS192() {
            this.Manager.Comment("reaching state \'S192\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS184CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S191");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S191");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S191");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLe" +
                        "velII\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue" +
                        " the create process specified in the \"Open Execution\" Phase, and perform the fol" +
                        "lowing additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.Creat" +
                        "eGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] I" +
                        "n the \"Successful Open Initialization\" phase, the server MUST set Open.IsDurable" +
                        " to TRUE. The server MUST also set Open.DurableOwner to a security descriptor ac" +
                        "cessible only by the user represented by Open.Session.SecurityContext.\", \"[TestI" +
                        "nfo] Open.IsDurable is set to TRUE\", \"[TestInfo] If the command request does not" +
                        " include FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect i" +
                        "s Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker33() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS184CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S197");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S197");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel" +
                        " is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT" +
                        " bit is not set in the Flags field of this create context, if RequestedOplockLev" +
                        "el in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the creat" +
                        "e request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LE" +
                        "ASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CA" +
                        "CHING, the server MUST ignore this create context and skip this section\", \"[Test" +
                        "Tag] Compatibility\", \"[TestInfo] If the command request does not include FileId," +
                        " this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request" +
                        " command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS198() {
            this.Manager.Comment("reaching state \'S198\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS184CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S197");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S197");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel" +
                        " is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT" +
                        " bit is not set in the Flags field of this create context, if RequestedOplockLev" +
                        "el in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the creat" +
                        "e request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LE" +
                        "ASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CA" +
                        "CHING, the server MUST ignore this create context and skip this section\", \"[Test" +
                        "Tag] Compatibility\", \"[TestInfo] If the command request does not include FileId," +
                        " this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request" +
                        " command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker34() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker35() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S199
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS199() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS199");
            this.Manager.Comment("reaching state \'S199\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp36;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp36);
            this.Manager.Comment("reaching state \'S200\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp36, "c of ReadConfig, state S200");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S201\'");
            int temp38 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker36)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker37)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker38)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker39)));
            if ((temp38 == 0)) {
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S203\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S204\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S205\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S206\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS199CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S207\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS199CreateResponseChecker)));
                }
                goto label28;
            }
            if ((temp38 == 1)) {
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S210\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S212\'");
                int temp37 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS199CreateResponseChecker1)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS199CreateResponseChecker2)));
                if ((temp37 == 0)) {
                    ReplayCreateNormalHandleTestCaseS213();
                    goto label27;
                }
                if ((temp37 == 1)) {
                    ReplayCreateNormalHandleTestCaseS213();
                    goto label27;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS199CreateResponseChecker1)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS199CreateResponseChecker2)));
            label27:
;
                goto label28;
            }
            if ((temp38 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label28;
            }
            if ((temp38 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label28;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S201\'.");
        label28:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker36() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS199CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S206");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S206");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateI" +
                        "ncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response f" +
                        "rom Open, as specified in the \"Response Construction\" phase, with the following " +
                        "additional steps, and send the response to client\", \"[TestInfo] Open.IsPersisten" +
                        "t is FALSE\", \"[TestInfo] If the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request comman" +
                        "d is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker37() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS199CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S212");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S212");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS213() {
            this.Manager.Comment("reaching state \'S213\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS199CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S212");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S212");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker38() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker39() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S214
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS214() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS214");
            this.Manager.Comment("reaching state \'S214\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp39;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp39);
            this.Manager.Comment("reaching state \'S215\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp39, "c of ReadConfig, state S215");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S216\'");
            int temp41 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker40)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker41)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker42)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker43)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S218\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S220\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S221\'");
                int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS214CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS214CreateResponseChecker1)));
                if ((temp40 == 0)) {
                    ReplayCreateNormalHandleTestCaseS90();
                    goto label29;
                }
                if ((temp40 == 1)) {
                    ReplayCreateNormalHandleTestCaseS90();
                    goto label29;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS214CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS214CreateResponseChecker1)));
            label29:
;
                goto label30;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S224\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S225\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S226\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS214CreateResponseChecker2))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS40();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS214CreateResponseChecker2)));
                }
                goto label30;
            }
            if ((temp41 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label30;
            }
            if ((temp41 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label30;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S216\'.");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker40() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS214CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS90() {
            this.Manager.Comment("reaching state \'S90\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS214CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker41() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS214CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S226");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S226");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S226");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLev" +
                        "elLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST cont" +
                        "inue the create process specified in the \"Open Execution\" Phase, and perform the" +
                        " following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.C" +
                        "reateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB" +
                        "2] In the \"Successful Open Initialization\" phase, the server MUST set Open.IsDur" +
                        "able to TRUE. The server MUST also set Open.DurableOwner to a security descripto" +
                        "r accessible only by the user represented by Open.Session.SecurityContext.\", \"[T" +
                        "estInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] Requested OplockLevel is Op" +
                        "lockLevelLeaseV1, Open.leaseState is LeaseStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10:" +
                        " The server MUST construct the create response from Open, as specified in the \"R" +
                        "esponse Construction\" phase, with the following additional steps, and send the r" +
                        "esponse to client\", \"[TestInfo] Open.IsPersistent is FALSE\", \"[TestInfo] If the " +
                        "command request does not include FileId, this section MUST be skipped\", \"[TestIn" +
                        "fo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS40() {
            this.Manager.Comment("reaching state \'S40\'");
        }
        
        private void PreConstraintChecker42() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker43() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S227
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS227() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS227");
            this.Manager.Comment("reaching state \'S227\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp42;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp42);
            this.Manager.Comment("reaching state \'S228\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp42, "c of ReadConfig, state S228");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S229\'");
            int temp45 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker44)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker45)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker46)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker47)));
            if ((temp45 == 0)) {
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S231\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S232\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S233\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S234\'");
                int temp43 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS227CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS227CreateResponseChecker1)));
                if ((temp43 == 0)) {
                    ReplayCreateNormalHandleTestCaseS235();
                    goto label31;
                }
                if ((temp43 == 1)) {
                    ReplayCreateNormalHandleTestCaseS235();
                    goto label31;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS227CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS227CreateResponseChecker1)));
            label31:
;
                goto label33;
            }
            if ((temp45 == 1)) {
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S240\'");
                int temp44 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS227CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS227CreateResponseChecker3)));
                if ((temp44 == 0)) {
                    ReplayCreateNormalHandleTestCaseS241();
                    goto label32;
                }
                if ((temp44 == 1)) {
                    ReplayCreateNormalHandleTestCaseS241();
                    goto label32;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS227CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS227CreateResponseChecker3)));
            label32:
;
                goto label33;
            }
            if ((temp45 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label33;
            }
            if ((temp45 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label33;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S229\'.");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker44() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS227CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S234");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S234");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S234");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS235() {
            this.Manager.Comment("reaching state \'S235\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS227CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S234");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S234");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S234");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker45() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS227CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedO" +
                        "plockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate" +
                        " the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid match" +
                        "es the ClientGuid of the connection that received this request\", \"[TestInfo] Ope" +
                        "n is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open " +
                        "is not found, the server MUST continue the create process specified in the \"Open" +
                        " Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3." +
                        "5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DUR" +
                        "ABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" pha" +
                        "se, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Du" +
                        "rableOwner to a security descriptor accessible only by the user represented by O" +
                        "pen.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Tes" +
                        "tInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStat" +
                        "eNotIncludeH\", \"[TestInfo] If the command request does not include FileId, this " +
                        "section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request comma" +
                        "nd is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS241() {
            this.Manager.Comment("reaching state \'S241\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS227CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedO" +
                        "plockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate" +
                        " the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid match" +
                        "es the ClientGuid of the connection that received this request\", \"[TestInfo] Ope" +
                        "n is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open " +
                        "is not found, the server MUST continue the create process specified in the \"Open" +
                        " Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3." +
                        "5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DUR" +
                        "ABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" pha" +
                        "se, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Du" +
                        "rableOwner to a security descriptor accessible only by the user represented by O" +
                        "pen.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Tes" +
                        "tInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStat" +
                        "eNotIncludeH\", \"[TestInfo] If the command request does not include FileId, this " +
                        "section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request comma" +
                        "nd is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker46() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker47() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S242
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS242() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS242");
            this.Manager.Comment("reaching state \'S242\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp46;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp46);
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp46, "c of ReadConfig, state S243");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S244\'");
            int temp48 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker48)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker49)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker50)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker51)));
            if ((temp48 == 0)) {
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S246\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S247\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S249\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS242CreateResponseChecker))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS162();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS242CreateResponseChecker)));
                }
                goto label35;
            }
            if ((temp48 == 1)) {
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceBoundaryValid,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S254\'");
                int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS242CreateResponseChecker1)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS242CreateResponseChecker2)));
                if ((temp47 == 0)) {
                    ReplayCreateNormalHandleTestCaseS255();
                    goto label34;
                }
                if ((temp47 == 1)) {
                    this.Manager.Comment("reaching state \'S256\'");
                    goto label34;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS242CreateResponseChecker1)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS242CreateResponseChecker2)));
            label34:
;
                goto label35;
            }
            if ((temp48 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label35;
            }
            if ((temp48 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label35;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S244\'.");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker48() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS242CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S249");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S249");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S249");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requested" +
                        "OplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locat" +
                        "e the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in th" +
                        "e SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matc" +
                        "hes the ClientGuid of the connection that received this request\", \"[TestInfo] Op" +
                        "en is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open" +
                        " is not found, the server MUST continue the create process specified in the \"Ope" +
                        "n Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3" +
                        ".5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DU" +
                        "RABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" ph" +
                        "ase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.D" +
                        "urableOwner to a security descriptor accessible only by the user represented by " +
                        "Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Te" +
                        "stInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseSta" +
                        "teIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create respons" +
                        "e from Open, as specified in the \"Response Construction\" phase, with the followi" +
                        "ng additional steps, and send the response to client\", \"[TestInfo] Open.IsPersis" +
                        "tent is FALSE\", \"[TestInfo] If the command request does not include FileId, this" +
                        " section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request com" +
                        "mand is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker49() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS242CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S254");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S254");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S254");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS255() {
            this.Manager.Comment("reaching state \'S255\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS242CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S254");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S254");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S254");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker50() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker51() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S257
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS257() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS257");
            this.Manager.Comment("reaching state \'S257\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp49;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp49);
            this.Manager.Comment("reaching state \'S258\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp49, "c of ReadConfig, state S258");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S259\'");
            int temp52 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker52)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker53)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker54)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker55)));
            if ((temp52 == 0)) {
                this.Manager.Comment("reaching state \'S260\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S262\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S263\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S264\'");
                int temp50 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS257CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS257CreateResponseChecker1)));
                if ((temp50 == 0)) {
                    ReplayCreateNormalHandleTestCaseS265();
                    goto label36;
                }
                if ((temp50 == 1)) {
                    ReplayCreateNormalHandleTestCaseS265();
                    goto label36;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS257CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS257CreateResponseChecker1)));
            label36:
;
                goto label38;
            }
            if ((temp52 == 1)) {
                this.Manager.Comment("reaching state \'S266\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S267\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S270\'");
                int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS257CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS257CreateResponseChecker3)));
                if ((temp51 == 0)) {
                    ReplayCreateNormalHandleTestCaseS96();
                    goto label37;
                }
                if ((temp51 == 1)) {
                    ReplayCreateNormalHandleTestCaseS96();
                    goto label37;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS257CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS257CreateResponseChecker3)));
            label37:
;
                goto label38;
            }
            if ((temp52 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label38;
            }
            if ((temp52 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label38;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S259\'.");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker52() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS257CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S264");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S264");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST l" +
                        "ocate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid i" +
                        "n the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid " +
                        "matches the ClientGuid of the connection that received this request\", \"[TestInfo" +
                        "] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an " +
                        "Open is not found, the server MUST continue the create process specified in the " +
                        "\"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2]" +
                        " 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREAT" +
                        "E_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization" +
                        "\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Op" +
                        "en.DurableOwner to a security descriptor accessible only by the user represented" +
                        " by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", " +
                        "\"[TestInfo] If the command request does not include FileId, this section MUST be" +
                        " skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS265() {
            this.Manager.Comment("reaching state \'S265\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS257CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S264");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S264");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S264");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST l" +
                        "ocate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid i" +
                        "n the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid " +
                        "matches the ClientGuid of the connection that received this request\", \"[TestInfo" +
                        "] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an " +
                        "Open is not found, the server MUST continue the create process specified in the " +
                        "\"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2]" +
                        " 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREAT" +
                        "E_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization" +
                        "\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Op" +
                        "en.DurableOwner to a security descriptor accessible only by the user represented" +
                        " by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", " +
                        "\"[TestInfo] If the command request does not include FileId, this section MUST be" +
                        " skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker53() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS257CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S270");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S270");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate the " +
                        "Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2" +
                        "_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches th" +
                        "e ClientGuid of the connection that received this request\", \"[TestInfo] Open is " +
                        "not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is no" +
                        "t found, the server MUST continue the create process specified in the \"Open Exec" +
                        "ution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.1" +
                        "0: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_" +
                        "HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, t" +
                        "he server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durable" +
                        "Owner to a security descriptor accessible only by the user represented by Open.S" +
                        "ession.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[MS-SMB2]" +
                        " 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HA" +
                        "NDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not s" +
                        "et in the Flags field of the request and if neither of the following conditions " +
                        "are met:\", \"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[M" +
                        "S-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\", \"[TestInfo" +
                        "] If the command request does not include FileId, this section MUST be skipped\"," +
                        " \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS257CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S270");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S270");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate the " +
                        "Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2" +
                        "_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches th" +
                        "e ClientGuid of the connection that received this request\", \"[TestInfo] Open is " +
                        "not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is no" +
                        "t found, the server MUST continue the create process specified in the \"Open Exec" +
                        "ution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.1" +
                        "0: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_" +
                        "HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, t" +
                        "he server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durable" +
                        "Owner to a security descriptor accessible only by the user represented by Open.S" +
                        "ession.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[MS-SMB2]" +
                        " 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HA" +
                        "NDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not s" +
                        "et in the Flags field of the request and if neither of the following conditions " +
                        "are met:\", \"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[M" +
                        "S-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\", \"[TestInfo" +
                        "] If the command request does not include FileId, this section MUST be skipped\"," +
                        " \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker54() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker55() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S27
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS27() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS27");
            this.Manager.Comment("reaching state \'S27\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp53;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp53);
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp53, "c of ReadConfig, state S28");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S29\'");
            int temp54 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker56)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker57)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker58)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker59)));
            if ((temp54 == 0)) {
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceBoundaryValid,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S34\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS27CreateResponseChecker))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS20();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS27CreateResponseChecker)));
                }
                goto label39;
            }
            if ((temp54 == 1)) {
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S39\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS27CreateResponseChecker1))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS40();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS27CreateResponseChecker1)));
                }
                goto label39;
            }
            if ((temp54 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label39;
            }
            if ((temp54 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label39;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S29\'.");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker56() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS27CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S34");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S34");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S34");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateI" +
                        "ncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response f" +
                        "rom Open, as specified in the \"Response Construction\" phase, with the following " +
                        "additional steps, and send the response to client\", \"[TestInfo] Open.IsPersisten" +
                        "t is FALSE\", \"[TestInfo] If the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request comman" +
                        "d is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker57() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS27CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S39");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S39");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S39");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Le" +
                        "aseStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create r" +
                        "esponse from Open, as specified in the \"Response Construction\" phase, with the f" +
                        "ollowing additional steps, and send the response to client\", \"[TestInfo] Open.Is" +
                        "Persistent is FALSE\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker58() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker59() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S271
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS271() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS271");
            this.Manager.Comment("reaching state \'S271\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp55;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp55);
            this.Manager.Comment("reaching state \'S272\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp55, "c of ReadConfig, state S272");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S273\'");
            int temp58 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker60)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker61)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker62)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker63)));
            if ((temp58 == 0)) {
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S276\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S277\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S278\'");
                int temp56 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS271CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS271CreateResponseChecker1)));
                if ((temp56 == 0)) {
                    ReplayCreateNormalHandleTestCaseS279();
                    goto label40;
                }
                if ((temp56 == 1)) {
                    ReplayCreateNormalHandleTestCaseS279();
                    goto label40;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS271CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS271CreateResponseChecker1)));
            label40:
;
                goto label42;
            }
            if ((temp58 == 1)) {
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S284\'");
                int temp57 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS271CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS271CreateResponseChecker3)));
                if ((temp57 == 0)) {
                    ReplayCreateNormalHandleTestCaseS285();
                    goto label41;
                }
                if ((temp57 == 1)) {
                    ReplayCreateNormalHandleTestCaseS285();
                    goto label41;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS271CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS271CreateResponseChecker3)));
            label41:
;
                goto label42;
            }
            if ((temp58 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label42;
            }
            if ((temp58 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label42;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S273\'.");
        label42:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker60() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS271CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S278");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S278");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S278");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"," +
                        " \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the cr" +
                        "eate process specified in the \"Open Execution\" Phase, and perform the following " +
                        "additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid t" +
                        "o the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"" +
                        "Successful Open Initialization\" phase, the server MUST set Open.IsDurable to TRU" +
                        "E. The server MUST also set Open.DurableOwner to a security descriptor accessibl" +
                        "e only by the user represented by Open.Session.SecurityContext.\", \"[TestInfo] Op" +
                        "en.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5.9.10: The server MUST skip the co" +
                        "nstruction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the S" +
                        "MB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and" +
                        " if neither of the following conditions are met:\", \"[MS-SMB2] Open.OplockLevel i" +
                        "s equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] Open.Lease.LeaseState has SMB2_L" +
                        "EASE_HANDLE_CACHING bit set\", \"[TestInfo] If the command request does not includ" +
                        "e FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30" +
                        "2, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS279() {
            this.Manager.Comment("reaching state \'S279\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS271CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S278");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S278");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S278");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"," +
                        " \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the cr" +
                        "eate process specified in the \"Open Execution\" Phase, and perform the following " +
                        "additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid t" +
                        "o the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"" +
                        "Successful Open Initialization\" phase, the server MUST set Open.IsDurable to TRU" +
                        "E. The server MUST also set Open.DurableOwner to a security descriptor accessibl" +
                        "e only by the user represented by Open.Session.SecurityContext.\", \"[TestInfo] Op" +
                        "en.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5.9.10: The server MUST skip the co" +
                        "nstruction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the S" +
                        "MB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and" +
                        " if neither of the following conditions are met:\", \"[MS-SMB2] Open.OplockLevel i" +
                        "s equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] Open.Lease.LeaseState has SMB2_L" +
                        "EASE_HANDLE_CACHING bit set\", \"[TestInfo] If the command request does not includ" +
                        "e FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30" +
                        "2, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker61() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS271CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S284");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS285() {
            this.Manager.Comment("reaching state \'S285\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS271CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S284");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker62() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker63() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S286
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS286() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS286");
            this.Manager.Comment("reaching state \'S286\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp59;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp59);
            this.Manager.Comment("reaching state \'S287\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp59, "c of ReadConfig, state S287");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S288\'");
            int temp62 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker64)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker65)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker66)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker67)));
            if ((temp62 == 0)) {
                this.Manager.Comment("reaching state \'S289\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S290\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S292\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S293\'");
                int temp60 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS286CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS286CreateResponseChecker1)));
                if ((temp60 == 0)) {
                    ReplayCreateNormalHandleTestCaseS294();
                    goto label43;
                }
                if ((temp60 == 1)) {
                    ReplayCreateNormalHandleTestCaseS294();
                    goto label43;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS286CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS286CreateResponseChecker1)));
            label43:
;
                goto label45;
            }
            if ((temp62 == 1)) {
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S298\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S299\'");
                int temp61 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS286CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS286CreateResponseChecker3)));
                if ((temp61 == 0)) {
                    ReplayCreateNormalHandleTestCaseS300();
                    goto label44;
                }
                if ((temp61 == 1)) {
                    ReplayCreateNormalHandleTestCaseS300();
                    goto label44;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS286CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS286CreateResponseChecker3)));
            label44:
;
                goto label45;
            }
            if ((temp62 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label45;
            }
            if ((temp62 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label45;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S288\'.");
        label45:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker64() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS286CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S293");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S293");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS294() {
            this.Manager.Comment("reaching state \'S294\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS286CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S293");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S293");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S293");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker65() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS286CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S299");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S299");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S299");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS300() {
            this.Manager.Comment("reaching state \'S300\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS286CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S299");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S299");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S299");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker66() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker67() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S301
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS301() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS301");
            this.Manager.Comment("reaching state \'S301\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp63;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp63);
            this.Manager.Comment("reaching state \'S302\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp63, "c of ReadConfig, state S302");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S303\'");
            int temp66 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker68)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker69)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker70)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker71)));
            if ((temp66 == 0)) {
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S306\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S307\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S308\'");
                int temp64 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS301CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS301CreateResponseChecker1)));
                if ((temp64 == 0)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label46;
                }
                if ((temp64 == 1)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label46;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS301CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS301CreateResponseChecker1)));
            label46:
;
                goto label48;
            }
            if ((temp66 == 1)) {
                this.Manager.Comment("reaching state \'S309\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S310\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S311\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S312\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S313\'");
                int temp65 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS301CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS301CreateResponseChecker3)));
                if ((temp65 == 0)) {
                    ReplayCreateNormalHandleTestCaseS255();
                    goto label47;
                }
                if ((temp65 == 1)) {
                    this.Manager.Comment("reaching state \'S314\'");
                    goto label47;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS301CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS301CreateResponseChecker3)));
            label47:
;
                goto label48;
            }
            if ((temp66 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label48;
            }
            if ((temp66 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label48;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S303\'.");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker68() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS301CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S308");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S308");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S308");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS301CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S308");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S308");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S308");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker69() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS301CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S313");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S313");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS301CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S313");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S313");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker70() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker71() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S315
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS315() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS315");
            this.Manager.Comment("reaching state \'S315\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp67;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp67);
            this.Manager.Comment("reaching state \'S316\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp67, "c of ReadConfig, state S316");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S317\'");
            int temp70 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker72)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker73)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker74)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker75)));
            if ((temp70 == 0)) {
                this.Manager.Comment("reaching state \'S318\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S322\'");
                int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS315CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS315CreateResponseChecker1)));
                if ((temp68 == 0)) {
                    ReplayCreateNormalHandleTestCaseS178();
                    goto label49;
                }
                if ((temp68 == 1)) {
                    ReplayCreateNormalHandleTestCaseS178();
                    goto label49;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS315CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS315CreateResponseChecker1)));
            label49:
;
                goto label51;
            }
            if ((temp70 == 1)) {
                this.Manager.Comment("reaching state \'S323\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S324\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S325\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S326\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S327\'");
                int temp69 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS315CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS315CreateResponseChecker3)));
                if ((temp69 == 0)) {
                    ReplayCreateNormalHandleTestCaseS168();
                    goto label50;
                }
                if ((temp69 == 1)) {
                    ReplayCreateNormalHandleTestCaseS169();
                    goto label50;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS315CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS315CreateResponseChecker3)));
            label50:
;
                goto label51;
            }
            if ((temp70 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label51;
            }
            if ((temp70 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label51;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S317\'.");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker72() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS315CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S322");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S322");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S322");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS315CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S322");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S322");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S322");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker73() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS315CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S327");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S327");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S327");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"" +
                        ", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in t" +
                        "he Flags field of this create context, if RequestedOplockLevel in the create req" +
                        "uest is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not i" +
                        "nclude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create contex" +
                        "t with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MU" +
                        "ST ignore this create context and skip this section\", \"[TestTag] Compatibility\"," +
                        " \"[TestInfo] If the command request does not include FileId, this section MUST b" +
                        "e skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS315CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S327");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S327");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S327");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"" +
                        ", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in t" +
                        "he Flags field of this create context, if RequestedOplockLevel in the create req" +
                        "uest is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not i" +
                        "nclude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create contex" +
                        "t with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MU" +
                        "ST ignore this create context and skip this section\", \"[TestTag] Compatibility\"," +
                        " \"[TestInfo] If the command request does not include FileId, this section MUST b" +
                        "e skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker74() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker75() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S328
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS328() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS328");
            this.Manager.Comment("reaching state \'S328\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp71;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp71);
            this.Manager.Comment("reaching state \'S329\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp71, "c of ReadConfig, state S329");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S330\'");
            int temp73 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker76)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker77)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker78)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker79)));
            if ((temp73 == 0)) {
                this.Manager.Comment("reaching state \'S331\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S332\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S333\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S334\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S335\'");
                int temp72 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS328CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS328CreateResponseChecker1)));
                if ((temp72 == 0)) {
                    ReplayCreateNormalHandleTestCaseS105();
                    goto label52;
                }
                if ((temp72 == 1)) {
                    ReplayCreateNormalHandleTestCaseS105();
                    goto label52;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS328CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS328CreateResponseChecker1)));
            label52:
;
                goto label53;
            }
            if ((temp73 == 1)) {
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S337\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S338\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S339\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S340\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS328CreateResponseChecker2))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS96();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS328CreateResponseChecker2)));
                }
                goto label53;
            }
            if ((temp73 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label53;
            }
            if ((temp73 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label53;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S330\'.");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker76() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS328CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S335");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S335");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S335");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS105() {
            this.Manager.Comment("reaching state \'S105\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS328CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S335");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S335");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S335");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker77() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS328CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: The server MUST l" +
                        "ocate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid i" +
                        "n the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid " +
                        "matches the ClientGuid of the connection that received this request\", \"[TestInfo" +
                        "] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an " +
                        "Open is not found, the server MUST continue the create process specified in the " +
                        "\"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2]" +
                        " 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREAT" +
                        "E_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization" +
                        "\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Op" +
                        "en.DurableOwner to a security descriptor accessible only by the user represented" +
                        " by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", " +
                        "\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, " +
                        "as specified in the \"Response Construction\" phase, with the following additional" +
                        " steps, and send the response to client\", \"[TestInfo] Open.IsPersistent is FALSE" +
                        "\", \"[TestInfo] If the command request does not include FileId, this section MUST" +
                        " be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create" +
                        "\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker78() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker79() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S341
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS341() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS341");
            this.Manager.Comment("reaching state \'S341\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp74;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp74);
            this.Manager.Comment("reaching state \'S342\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp74, "c of ReadConfig, state S342");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S343\'");
            int temp77 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker80)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker81)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker82)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker83)));
            if ((temp77 == 0)) {
                this.Manager.Comment("reaching state \'S344\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S345\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S346\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S347\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S348\'");
                int temp75 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS341CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS341CreateResponseChecker1)));
                if ((temp75 == 0)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label54;
                }
                if ((temp75 == 1)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label54;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS341CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS341CreateResponseChecker1)));
            label54:
;
                goto label56;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S349\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S351\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S352\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S353\'");
                int temp76 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS341CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS341CreateResponseChecker3)));
                if ((temp76 == 0)) {
                    ReplayCreateNormalHandleTestCaseS285();
                    goto label55;
                }
                if ((temp76 == 1)) {
                    ReplayCreateNormalHandleTestCaseS285();
                    goto label55;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS341CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS341CreateResponseChecker3)));
            label55:
;
                goto label56;
            }
            if ((temp77 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label56;
            }
            if ((temp77 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label56;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S343\'.");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker80() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS341CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S348");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S348");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S348");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS341CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S348");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S348");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S348");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker81() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS341CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S353");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S353");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S353");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS341CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S353");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S353");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S353");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker82() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker83() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S354
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS354() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS354");
            this.Manager.Comment("reaching state \'S354\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp78;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp78);
            this.Manager.Comment("reaching state \'S355\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp78, "c of ReadConfig, state S355");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S356\'");
            int temp81 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker84)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker85)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker86)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker87)));
            if ((temp81 == 0)) {
                this.Manager.Comment("reaching state \'S357\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S358\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S359\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S360\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S361\'");
                int temp79 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS354CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS354CreateResponseChecker1)));
                if ((temp79 == 0)) {
                    ReplayCreateNormalHandleTestCaseS147();
                    goto label57;
                }
                if ((temp79 == 1)) {
                    ReplayCreateNormalHandleTestCaseS148();
                    goto label57;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS354CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS354CreateResponseChecker1)));
            label57:
;
                goto label59;
            }
            if ((temp81 == 1)) {
                this.Manager.Comment("reaching state \'S362\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S363\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S364\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S365\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S366\'");
                int temp80 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS354CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS354CreateResponseChecker3)));
                if ((temp80 == 0)) {
                    ReplayCreateNormalHandleTestCaseS285();
                    goto label58;
                }
                if ((temp80 == 1)) {
                    ReplayCreateNormalHandleTestCaseS285();
                    goto label58;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS354CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS354CreateResponseChecker3)));
            label58:
;
                goto label59;
            }
            if ((temp81 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label59;
            }
            if ((temp81 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label59;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S356\'.");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker84() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS354CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S361");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S361");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS354CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S361");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S361");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker85() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS354CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S366");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS354CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S366");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker86() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker87() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S367
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS367() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS367");
            this.Manager.Comment("reaching state \'S367\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp82;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp82);
            this.Manager.Comment("reaching state \'S368\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp82, "c of ReadConfig, state S368");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S369\'");
            int temp85 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker88)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker89)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker90)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker91)));
            if ((temp85 == 0)) {
                this.Manager.Comment("reaching state \'S370\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S371\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S372\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S373\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S374\'");
                int temp83 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS367CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS367CreateResponseChecker1)));
                if ((temp83 == 0)) {
                    ReplayCreateNormalHandleTestCaseS294();
                    goto label60;
                }
                if ((temp83 == 1)) {
                    ReplayCreateNormalHandleTestCaseS294();
                    goto label60;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS367CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS367CreateResponseChecker1)));
            label60:
;
                goto label62;
            }
            if ((temp85 == 1)) {
                this.Manager.Comment("reaching state \'S375\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S376\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S377\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S378\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S379\'");
                int temp84 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS367CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS367CreateResponseChecker3)));
                if ((temp84 == 0)) {
                    ReplayCreateNormalHandleTestCaseS285();
                    goto label61;
                }
                if ((temp84 == 1)) {
                    ReplayCreateNormalHandleTestCaseS285();
                    goto label61;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS367CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS367CreateResponseChecker3)));
            label61:
;
                goto label62;
            }
            if ((temp85 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label62;
            }
            if ((temp85 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label62;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S369\'.");
        label62:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker88() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS367CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S374");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S374");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S374");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS367CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S374");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S374");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S374");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker89() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS367CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S379");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S379");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS367CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S379");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S379");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker90() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker91() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S380
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS380() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS380");
            this.Manager.Comment("reaching state \'S380\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp86;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp86);
            this.Manager.Comment("reaching state \'S381\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp86, "c of ReadConfig, state S381");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S382\'");
            int temp88 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker92)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker93)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker94)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker95)));
            if ((temp88 == 0)) {
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S385\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S386\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S387\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS380CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S388\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS380CreateResponseChecker)));
                }
                goto label64;
            }
            if ((temp88 == 1)) {
                this.Manager.Comment("reaching state \'S389\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S390\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S391\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S392\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S393\'");
                int temp87 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS380CreateResponseChecker1)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS380CreateResponseChecker2)));
                if ((temp87 == 0)) {
                    ReplayCreateNormalHandleTestCaseS14();
                    goto label63;
                }
                if ((temp87 == 1)) {
                    ReplayCreateNormalHandleTestCaseS14();
                    goto label63;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS380CreateResponseChecker1)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS380CreateResponseChecker2)));
            label63:
;
                goto label64;
            }
            if ((temp88 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label64;
            }
            if ((temp88 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label64;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S382\'.");
        label64:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker92() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS380CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S387");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S387");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S387");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requested" +
                        "OplockLevel is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate " +
                        "the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matche" +
                        "s the ClientGuid of the connection that received this request\", \"[TestInfo] Open" +
                        " is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open i" +
                        "s not found, the server MUST continue the create process specified in the \"Open " +
                        "Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5" +
                        ".9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURA" +
                        "BLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phas" +
                        "e, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dur" +
                        "ableOwner to a security descriptor accessible only by the user represented by Op" +
                        "en.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[MS-S" +
                        "MB2] 3.3.5.9.10: The server MUST construct the create response from Open, as spe" +
                        "cified in the \"Response Construction\" phase, with the following additional steps" +
                        ", and send the response to client\", \"[TestInfo] Open.IsPersistent is FALSE\", \"[T" +
                        "estInfo] If the command request does not include FileId, this section MUST be sk" +
                        "ipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker93() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS380CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S393");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S393");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS380CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S393");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S393");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker94() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker95() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S394
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS394() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS394");
            this.Manager.Comment("reaching state \'S394\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp89;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp89);
            this.Manager.Comment("reaching state \'S395\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp89, "c of ReadConfig, state S395");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S396\'");
            int temp92 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker96)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker97)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker98)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker99)));
            if ((temp92 == 0)) {
                this.Manager.Comment("reaching state \'S397\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S398\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S399\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S400\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S401\'");
                int temp90 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS394CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS394CreateResponseChecker1)));
                if ((temp90 == 0)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label65;
                }
                if ((temp90 == 1)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label65;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS394CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS394CreateResponseChecker1)));
            label65:
;
                goto label67;
            }
            if ((temp92 == 1)) {
                this.Manager.Comment("reaching state \'S402\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S403\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S405\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S406\'");
                int temp91 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS394CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS394CreateResponseChecker3)));
                if ((temp91 == 0)) {
                    ReplayCreateNormalHandleTestCaseS407();
                    goto label66;
                }
                if ((temp91 == 1)) {
                    ReplayCreateNormalHandleTestCaseS407();
                    goto label66;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS394CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS394CreateResponseChecker3)));
            label66:
;
                goto label67;
            }
            if ((temp92 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label67;
            }
            if ((temp92 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label67;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S396\'.");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker96() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS394CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S401");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S401");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S401");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS394CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S401");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S401");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S401");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker97() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS394CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S406");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S406");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S406");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS407() {
            this.Manager.Comment("reaching state \'S407\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS394CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S406");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S406");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S406");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker98() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker99() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S408
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS408() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS408");
            this.Manager.Comment("reaching state \'S408\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp93;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp93);
            this.Manager.Comment("reaching state \'S409\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp93, "c of ReadConfig, state S409");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S410\'");
            int temp96 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker100)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker101)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker102)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker103)));
            if ((temp96 == 0)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label70;
            }
            if ((temp96 == 1)) {
                this.Manager.Comment("reaching state \'S411\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S412\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S413\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S414\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S415\'");
                int temp94 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS408CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS408CreateResponseChecker1)));
                if ((temp94 == 0)) {
                    ReplayCreateNormalHandleTestCaseS294();
                    goto label68;
                }
                if ((temp94 == 1)) {
                    ReplayCreateNormalHandleTestCaseS294();
                    goto label68;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS408CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS408CreateResponseChecker1)));
            label68:
;
                goto label70;
            }
            if ((temp96 == 2)) {
                this.Manager.Comment("reaching state \'S416\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S417\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S418\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S419\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S420\'");
                int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS408CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS408CreateResponseChecker3)));
                if ((temp95 == 0)) {
                    ReplayCreateNormalHandleTestCaseS421();
                    goto label69;
                }
                if ((temp95 == 1)) {
                    ReplayCreateNormalHandleTestCaseS421();
                    goto label69;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS408CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS408CreateResponseChecker3)));
            label69:
;
                goto label70;
            }
            if ((temp96 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label70;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S410\'.");
        label70:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker100() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker101() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS408CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S415");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S415");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S415");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS408CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S415");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S415");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S415");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker102() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS408CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S420");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S420");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS421() {
            this.Manager.Comment("reaching state \'S421\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS408CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S420");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S420");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker103() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S422
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS422() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS422");
            this.Manager.Comment("reaching state \'S422\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp97;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp97);
            this.Manager.Comment("reaching state \'S423\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp97, "c of ReadConfig, state S423");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S424\'");
            int temp100 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker104)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker105)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker106)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker107)));
            if ((temp100 == 0)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label73;
            }
            if ((temp100 == 1)) {
                this.Manager.Comment("reaching state \'S425\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S426\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S427\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelII,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S428\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S429\'");
                int temp98 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS422CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS422CreateResponseChecker1)));
                if ((temp98 == 0)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label71;
                }
                if ((temp98 == 1)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label71;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS422CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS422CreateResponseChecker1)));
            label71:
;
                goto label73;
            }
            if ((temp100 == 2)) {
                this.Manager.Comment("reaching state \'S430\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S431\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S432\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S433\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S434\'");
                int temp99 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS422CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS422CreateResponseChecker3)));
                if ((temp99 == 0)) {
                    ReplayCreateNormalHandleTestCaseS435();
                    goto label72;
                }
                if ((temp99 == 1)) {
                    ReplayCreateNormalHandleTestCaseS435();
                    goto label72;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS422CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS422CreateResponseChecker3)));
            label72:
;
                goto label73;
            }
            if ((temp100 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label73;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S424\'.");
        label73:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker104() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker105() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS422CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S429");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S429");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S429");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS422CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S429");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S429");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S429");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker106() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS422CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S434");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S434");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S434");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS435() {
            this.Manager.Comment("reaching state \'S435\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS422CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S434");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S434");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S434");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker107() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S436
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS436() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS436");
            this.Manager.Comment("reaching state \'S436\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp101;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp101);
            this.Manager.Comment("reaching state \'S437\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp101, "c of ReadConfig, state S437");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S438\'");
            int temp104 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker108)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker109)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker110)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker111)));
            if ((temp104 == 0)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label76;
            }
            if ((temp104 == 1)) {
                this.Manager.Comment("reaching state \'S439\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S440\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S441\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S442\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S443\'");
                int temp102 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS436CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS436CreateResponseChecker1)));
                if ((temp102 == 0)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label74;
                }
                if ((temp102 == 1)) {
                    ReplayCreateNormalHandleTestCaseS133();
                    goto label74;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS436CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS436CreateResponseChecker1)));
            label74:
;
                goto label76;
            }
            if ((temp104 == 2)) {
                this.Manager.Comment("reaching state \'S444\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S445\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S446\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S447\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S448\'");
                int temp103 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS436CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS436CreateResponseChecker3)));
                if ((temp103 == 0)) {
                    ReplayCreateNormalHandleTestCaseS168();
                    goto label75;
                }
                if ((temp103 == 1)) {
                    ReplayCreateNormalHandleTestCaseS169();
                    goto label75;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS436CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS436CreateResponseChecker3)));
            label75:
;
                goto label76;
            }
            if ((temp104 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label76;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S438\'.");
        label76:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker108() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker109() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS436CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S443");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S443");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S443");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS436CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S443");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S443");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S443");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker110() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS436CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S448");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S448");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S448");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS436CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S448");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S448");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S448");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker111() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S449
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS449() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS449");
            this.Manager.Comment("reaching state \'S449\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp105;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp105);
            this.Manager.Comment("reaching state \'S450\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp105, "c of ReadConfig, state S450");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S451\'");
            int temp108 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker112)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker113)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker114)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker115)));
            if ((temp108 == 0)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label79;
            }
            if ((temp108 == 1)) {
                this.Manager.Comment("reaching state \'S452\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S453\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S454\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S455\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S456\'");
                int temp106 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS449CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS449CreateResponseChecker1)));
                if ((temp106 == 0)) {
                    ReplayCreateNormalHandleTestCaseS178();
                    goto label77;
                }
                if ((temp106 == 1)) {
                    ReplayCreateNormalHandleTestCaseS178();
                    goto label77;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS449CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS449CreateResponseChecker1)));
            label77:
;
                goto label79;
            }
            if ((temp108 == 2)) {
                this.Manager.Comment("reaching state \'S457\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S458\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S459\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S460\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S461\'");
                int temp107 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS449CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS449CreateResponseChecker3)));
                if ((temp107 == 0)) {
                    ReplayCreateNormalHandleTestCaseS198();
                    goto label78;
                }
                if ((temp107 == 1)) {
                    ReplayCreateNormalHandleTestCaseS198();
                    goto label78;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS449CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS449CreateResponseChecker3)));
            label78:
;
                goto label79;
            }
            if ((temp108 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label79;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S451\'.");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker112() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker113() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS449CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S456");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S456");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLeve" +
                        "l is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSIS" +
                        "TENT bit is not set in the Flags field of this create context, if RequestedOploc" +
                        "kLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the c" +
                        "reate request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUES" +
                        "T_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDL" +
                        "E_CACHING, the server MUST ignore this create context and skip this section\", \"[" +
                        "TestTag] Compatibility\", \"[TestInfo] If the command request does not include Fil" +
                        "eId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, re" +
                        "quest command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS449CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S456");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S456");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLeve" +
                        "l is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSIS" +
                        "TENT bit is not set in the Flags field of this create context, if RequestedOploc" +
                        "kLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the c" +
                        "reate request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUES" +
                        "T_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDL" +
                        "E_CACHING, the server MUST ignore this create context and skip this section\", \"[" +
                        "TestTag] Compatibility\", \"[TestInfo] If the command request does not include Fil" +
                        "eId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, re" +
                        "quest command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker114() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS449CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S461");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S461");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel" +
                        " is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT b" +
                        "it is not set in the Flags field of this create context, if RequestedOplockLevel" +
                        " in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create " +
                        "request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEAS" +
                        "E_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACH" +
                        "ING, the server MUST ignore this create context and skip this section\", \"[TestTa" +
                        "g] Compatibility\", \"[TestInfo] If the command request does not include FileId, t" +
                        "his section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request c" +
                        "ommand is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS449CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S461");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S461");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel" +
                        " is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT b" +
                        "it is not set in the Flags field of this create context, if RequestedOplockLevel" +
                        " in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create " +
                        "request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEAS" +
                        "E_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACH" +
                        "ING, the server MUST ignore this create context and skip this section\", \"[TestTa" +
                        "g] Compatibility\", \"[TestInfo] If the command request does not include FileId, t" +
                        "his section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request c" +
                        "ommand is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker115() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S462
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS462() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS462");
            this.Manager.Comment("reaching state \'S462\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp109;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp109);
            this.Manager.Comment("reaching state \'S463\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp109, "c of ReadConfig, state S463");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S464\'");
            int temp111 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker116)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker117)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker118)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker119)));
            if ((temp111 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label81;
            }
            if ((temp111 == 1)) {
                this.Manager.Comment("reaching state \'S465\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S466\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S467\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S468\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S469\'");
                int temp110 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS462CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS462CreateResponseChecker1)));
                if ((temp110 == 0)) {
                    ReplayCreateNormalHandleTestCaseS90();
                    goto label80;
                }
                if ((temp110 == 1)) {
                    ReplayCreateNormalHandleTestCaseS90();
                    goto label80;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS462CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS462CreateResponseChecker1)));
            label80:
;
                goto label81;
            }
            if ((temp111 == 2)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label81;
            }
            if ((temp111 == 3)) {
                this.Manager.Comment("reaching state \'S470\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S471\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S472\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S473\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S474\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS462CreateResponseChecker2))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS475();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS462CreateResponseChecker2)));
                }
                goto label81;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S464\'.");
        label81:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker116() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker117() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS462CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S469");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S469");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S469");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS462CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S469");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S469");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S469");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker118() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker119() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS462CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S474");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S474");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S474");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Le" +
                        "aseStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create r" +
                        "esponse from Open, as specified in the \"Response Construction\" phase, with the f" +
                        "ollowing additional steps, and send the response to client\", \"[TestInfo] Open.Is" +
                        "Persistent is FALSE\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS475() {
            this.Manager.Comment("reaching state \'S475\'");
        }
        #endregion
        
        #region Test Starting in S476
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS476() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS476");
            this.Manager.Comment("reaching state \'S476\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp112;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp112);
            this.Manager.Comment("reaching state \'S477\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp112, "c of ReadConfig, state S477");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S478\'");
            int temp115 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker120)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker121)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker122)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker123)));
            if ((temp115 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label84;
            }
            if ((temp115 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label84;
            }
            if ((temp115 == 2)) {
                this.Manager.Comment("reaching state \'S479\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S480\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S481\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S482\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S483\'");
                int temp113 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS476CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS476CreateResponseChecker1)));
                if ((temp113 == 0)) {
                    ReplayCreateNormalHandleTestCaseS484();
                    goto label82;
                }
                if ((temp113 == 1)) {
                    ReplayCreateNormalHandleTestCaseS484();
                    goto label82;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS476CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS476CreateResponseChecker1)));
            label82:
;
                goto label84;
            }
            if ((temp115 == 3)) {
                this.Manager.Comment("reaching state \'S485\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S486\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S487\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S488\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S489\'");
                int temp114 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS476CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS476CreateResponseChecker3)));
                if ((temp114 == 0)) {
                    ReplayCreateNormalHandleTestCaseS490();
                    goto label83;
                }
                if ((temp114 == 1)) {
                    ReplayCreateNormalHandleTestCaseS490();
                    goto label83;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS476CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS476CreateResponseChecker3)));
            label83:
;
                goto label84;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S478\'.");
        label84:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker120() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker121() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker122() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS476CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S483");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S483");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S483");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS476CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S483");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S483");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S483");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker123() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS476CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S489");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S489");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S489");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS490() {
            this.Manager.Comment("reaching state \'S490\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS476CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S489");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S489");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S489");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S491
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS491() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS491");
            this.Manager.Comment("reaching state \'S491\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp116;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp116);
            this.Manager.Comment("reaching state \'S492\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp116, "c of ReadConfig, state S492");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S493\'");
            int temp117 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker124)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker125)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker126)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker127)));
            if ((temp117 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label85;
            }
            if ((temp117 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label85;
            }
            if ((temp117 == 2)) {
                this.Manager.Comment("reaching state \'S494\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S495\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S496\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S497\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S498\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS491CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S499\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS491CreateResponseChecker)));
                }
                goto label85;
            }
            if ((temp117 == 3)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label85;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S493\'.");
        label85:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker124() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker125() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker126() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS491CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S498");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S498");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S498");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedO" +
                        "plockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate" +
                        " the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid match" +
                        "es the ClientGuid of the connection that received this request\", \"[TestInfo] Ope" +
                        "n is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open " +
                        "is not found, the server MUST continue the create process specified in the \"Open" +
                        " Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3." +
                        "5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DUR" +
                        "ABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" pha" +
                        "se, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Du" +
                        "rableOwner to a security descriptor accessible only by the user represented by O" +
                        "pen.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Tes" +
                        "tInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStat" +
                        "eIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response" +
                        " from Open, as specified in the \"Response Construction\" phase, with the followin" +
                        "g additional steps, and send the response to client\", \"[TestInfo] Open.IsPersist" +
                        "ent is FALSE\", \"[TestInfo] If the command request does not include FileId, this " +
                        "section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request comma" +
                        "nd is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker127() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        #endregion
        
        #region Test Starting in S505
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS505() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS505");
            this.Manager.Comment("reaching state \'S505\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp118;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp118);
            this.Manager.Comment("reaching state \'S506\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp118, "c of ReadConfig, state S506");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S507\'");
            int temp120 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker128)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker129)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker130)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker131)));
            if ((temp120 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label87;
            }
            if ((temp120 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label87;
            }
            if ((temp120 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label87;
            }
            if ((temp120 == 3)) {
                this.Manager.Comment("reaching state \'S508\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S509\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S510\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S511\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S512\'");
                int temp119 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS505CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS505CreateResponseChecker1)));
                if ((temp119 == 0)) {
                    ReplayCreateNormalHandleTestCaseS513();
                    goto label86;
                }
                if ((temp119 == 1)) {
                    ReplayCreateNormalHandleTestCaseS514();
                    goto label86;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS505CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS505CreateResponseChecker1)));
            label86:
;
                goto label87;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S507\'.");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker128() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker129() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker130() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker131() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS505CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S512");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS513() {
            this.Manager.Comment("reaching state \'S513\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS505CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S512");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS514() {
            this.Manager.Comment("reaching state \'S514\'");
        }
        #endregion
        
        #region Test Starting in S515
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS515() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS515");
            this.Manager.Comment("reaching state \'S515\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp121;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp121);
            this.Manager.Comment("reaching state \'S516\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp121, "c of ReadConfig, state S516");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S517\'");
            int temp123 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker132)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker133)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker134)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker135)));
            if ((temp123 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label89;
            }
            if ((temp123 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label89;
            }
            if ((temp123 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label89;
            }
            if ((temp123 == 3)) {
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S519\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S520\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S521\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S522\'");
                int temp122 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS515CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS515CreateResponseChecker1)));
                if ((temp122 == 0)) {
                    ReplayCreateNormalHandleTestCaseS523();
                    goto label88;
                }
                if ((temp122 == 1)) {
                    ReplayCreateNormalHandleTestCaseS523();
                    goto label88;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS515CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS515CreateResponseChecker1)));
            label88:
;
                goto label89;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S517\'.");
        label89:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker132() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker133() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker134() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker135() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS515CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S522");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S522");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S522");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS523() {
            this.Manager.Comment("reaching state \'S523\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS515CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S522");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S522");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S522");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S524
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS524() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS524");
            this.Manager.Comment("reaching state \'S524\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp124;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp124);
            this.Manager.Comment("reaching state \'S525\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp124, "c of ReadConfig, state S525");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S526\'");
            int temp125 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker136)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker137)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker138)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker139)));
            if ((temp125 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label90;
            }
            if ((temp125 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label90;
            }
            if ((temp125 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label90;
            }
            if ((temp125 == 3)) {
                this.Manager.Comment("reaching state \'S527\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S528\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S529\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S530\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S531\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS524CreateResponseChecker))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS475();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS524CreateResponseChecker)));
                }
                goto label90;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S526\'.");
        label90:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker136() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker137() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker138() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker139() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS524CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S531");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S531");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S531");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Le" +
                        "aseStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create r" +
                        "esponse from Open, as specified in the \"Response Construction\" phase, with the f" +
                        "ollowing additional steps, and send the response to client\", \"[TestInfo] Open.Is" +
                        "Persistent is FALSE\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, reques" +
                        "t command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S53
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS53() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS53");
            this.Manager.Comment("reaching state \'S53\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp126;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp126);
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp126, "c of ReadConfig, state S54");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S55\'");
            int temp127 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker140)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker141)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker142)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker143)));
            if ((temp127 == 0)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label91;
            }
            if ((temp127 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label91;
            }
            if ((temp127 == 2)) {
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S60\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS53CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S61\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS53CreateResponseChecker)));
                }
                goto label91;
            }
            if ((temp127 == 3)) {
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S66\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS53CreateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S67\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS53CreateResponseChecker1)));
                }
                goto label91;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S55\'.");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker140() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker141() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker142() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS53CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S60");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S60");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUS" +
                        "T locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGui" +
                        "d in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGu" +
                        "id matches the ClientGuid of the connection that received this request\", \"[TestI" +
                        "nfo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If " +
                        "an Open is not found, the server MUST continue the create process specified in t" +
                        "he \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SM" +
                        "B2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializat" +
                        "ion\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set" +
                        " Open.DurableOwner to a security descriptor accessible only by the user represen" +
                        "ted by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE" +
                        "\", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is L" +
                        "easeStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create " +
                        "response from Open, as specified in the \"Response Construction\" phase, with the " +
                        "following additional steps, and send the response to client\", \"[TestInfo] Open.I" +
                        "sPersistent is FALSE\", \"[TestInfo] If the command request does not include FileI" +
                        "d, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, requ" +
                        "est command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker143() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS53CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S66");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S66");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedO" +
                        "plockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate" +
                        " the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid match" +
                        "es the ClientGuid of the connection that received this request\", \"[TestInfo] Ope" +
                        "n is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open " +
                        "is not found, the server MUST continue the create process specified in the \"Open" +
                        " Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3." +
                        "5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DUR" +
                        "ABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" pha" +
                        "se, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Du" +
                        "rableOwner to a security descriptor accessible only by the user represented by O" +
                        "pen.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Tes" +
                        "tInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStat" +
                        "eIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response" +
                        " from Open, as specified in the \"Response Construction\" phase, with the followin" +
                        "g additional steps, and send the response to client\", \"[TestInfo] Open.IsPersist" +
                        "ent is FALSE\", \"[TestInfo] If the command request does not include FileId, this " +
                        "section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request comma" +
                        "nd is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S532
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS532() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS532");
            this.Manager.Comment("reaching state \'S532\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp128;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp128);
            this.Manager.Comment("reaching state \'S533\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp128, "c of ReadConfig, state S533");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S534\'");
            int temp130 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker144)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker145)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker146)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker147)));
            if ((temp130 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label93;
            }
            if ((temp130 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label93;
            }
            if ((temp130 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label93;
            }
            if ((temp130 == 3)) {
                this.Manager.Comment("reaching state \'S535\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S536\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S537\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S538\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S539\'");
                int temp129 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS532CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS532CreateResponseChecker1)));
                if ((temp129 == 0)) {
                    ReplayCreateNormalHandleTestCaseS540();
                    goto label92;
                }
                if ((temp129 == 1)) {
                    ReplayCreateNormalHandleTestCaseS541();
                    goto label92;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS532CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS532CreateResponseChecker1)));
            label92:
;
                goto label93;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S534\'.");
        label93:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker144() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker145() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker146() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker147() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS532CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S539");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S539");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S539");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS540() {
            this.Manager.Comment("reaching state \'S540\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS532CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S539");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S539");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S539");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS541() {
            this.Manager.Comment("reaching state \'S541\'");
        }
        #endregion
        
        #region Test Starting in S542
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS542() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS542");
            this.Manager.Comment("reaching state \'S542\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp131;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp131);
            this.Manager.Comment("reaching state \'S543\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp131, "c of ReadConfig, state S543");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S544\'");
            int temp133 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker148)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker149)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker150)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker151)));
            if ((temp133 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label95;
            }
            if ((temp133 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label95;
            }
            if ((temp133 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label95;
            }
            if ((temp133 == 3)) {
                this.Manager.Comment("reaching state \'S545\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S546\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S547\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV1,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S548\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S549\'");
                int temp132 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS542CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS542CreateResponseChecker1)));
                if ((temp132 == 0)) {
                    ReplayCreateNormalHandleTestCaseS550();
                    goto label94;
                }
                if ((temp132 == 1)) {
                    ReplayCreateNormalHandleTestCaseS550();
                    goto label94;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS542CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS542CreateResponseChecker1)));
            label94:
;
                goto label95;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S544\'.");
        label95:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker148() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker149() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker150() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker151() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS542CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S549");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S549");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S549");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS550() {
            this.Manager.Comment("reaching state \'S550\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS542CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S549");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S549");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S549");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S551
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS551() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS551");
            this.Manager.Comment("reaching state \'S551\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp134;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp134);
            this.Manager.Comment("reaching state \'S552\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp134, "c of ReadConfig, state S552");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S553\'");
            int temp136 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker152)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker153)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker154)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker155)));
            if ((temp136 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label97;
            }
            if ((temp136 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label97;
            }
            if ((temp136 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label97;
            }
            if ((temp136 == 3)) {
                this.Manager.Comment("reaching state \'S554\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S555\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S556\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S557\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S558\'");
                int temp135 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS551CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS551CreateResponseChecker1)));
                if ((temp135 == 0)) {
                    ReplayCreateNormalHandleTestCaseS513();
                    goto label96;
                }
                if ((temp135 == 1)) {
                    ReplayCreateNormalHandleTestCaseS514();
                    goto label96;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS551CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS551CreateResponseChecker1)));
            label96:
;
                goto label97;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S553\'.");
        label97:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker152() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker153() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker154() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker155() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS551CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S558");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S558");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S558");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\", \"" +
                        "[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the " +
                        "Flags field of this create context, if RequestedOplockLevel in the create reques" +
                        "t is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not incl" +
                        "ude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context w" +
                        "ith a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST " +
                        "ignore this create context and skip this section\", \"[TestTag] Compatibility\", \"[" +
                        "TestInfo] If the command request does not include FileId, this section MUST be s" +
                        "kipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS551CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S558");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S558");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S558");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\", \"" +
                        "[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the " +
                        "Flags field of this create context, if RequestedOplockLevel in the create reques" +
                        "t is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not incl" +
                        "ude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context w" +
                        "ith a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST " +
                        "ignore this create context and skip this section\", \"[TestTag] Compatibility\", \"[" +
                        "TestInfo] If the command request does not include FileId, this section MUST be s" +
                        "kipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S559
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS559() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS559");
            this.Manager.Comment("reaching state \'S559\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp137;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp137);
            this.Manager.Comment("reaching state \'S560\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp137, "c of ReadConfig, state S560");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S561\'");
            int temp139 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker156)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker157)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker158)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker159)));
            if ((temp139 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label99;
            }
            if ((temp139 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label99;
            }
            if ((temp139 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label99;
            }
            if ((temp139 == 3)) {
                this.Manager.Comment("reaching state \'S562\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S563\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S564\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S565\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S566\'");
                int temp138 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS559CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS559CreateResponseChecker1)));
                if ((temp138 == 0)) {
                    ReplayCreateNormalHandleTestCaseS513();
                    goto label98;
                }
                if ((temp138 == 1)) {
                    ReplayCreateNormalHandleTestCaseS514();
                    goto label98;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS559CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS559CreateResponseChecker1)));
            label98:
;
                goto label99;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S561\'.");
        label99:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker156() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker157() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker158() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker159() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS559CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S566");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S566");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x d" +
                        "ialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Request" +
                        "edOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLev" +
                        "el to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Dialect is Smb30, TreeConnec" +
                        "t.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OP" +
                        "LOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDL" +
                        "E_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Du" +
                        "rableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"" +
                        ", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in t" +
                        "he Flags field of this create context, if RequestedOplockLevel in the create req" +
                        "uest is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not i" +
                        "nclude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create contex" +
                        "t with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MU" +
                        "ST ignore this create context and skip this section\", \"[TestTag] Compatibility\"," +
                        " \"[TestInfo] If the command request does not include FileId, this section MUST b" +
                        "e skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS559CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S566");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S566");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S566");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x d" +
                        "ialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Request" +
                        "edOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLev" +
                        "el to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Dialect is Smb30, TreeConnec" +
                        "t.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OP" +
                        "LOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDL" +
                        "E_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Du" +
                        "rableHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"" +
                        ", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in t" +
                        "he Flags field of this create context, if RequestedOplockLevel in the create req" +
                        "uest is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not i" +
                        "nclude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create contex" +
                        "t with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MU" +
                        "ST ignore this create context and skip this section\", \"[TestTag] Compatibility\"," +
                        " \"[TestInfo] If the command request does not include FileId, this section MUST b" +
                        "e skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S567
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS567() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS567");
            this.Manager.Comment("reaching state \'S567\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp140;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp140);
            this.Manager.Comment("reaching state \'S568\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp140, "c of ReadConfig, state S568");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S569\'");
            int temp142 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker160)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker161)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker162)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker163)));
            if ((temp142 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label101;
            }
            if ((temp142 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label101;
            }
            if ((temp142 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label101;
            }
            if ((temp142 == 3)) {
                this.Manager.Comment("reaching state \'S570\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S571\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S572\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S573\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S574\'");
                int temp141 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS567CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS567CreateResponseChecker1)));
                if ((temp141 == 0)) {
                    ReplayCreateNormalHandleTestCaseS46();
                    goto label100;
                }
                if ((temp141 == 1)) {
                    ReplayCreateNormalHandleTestCaseS46();
                    goto label100;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS567CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS567CreateResponseChecker1)));
            label100:
;
                goto label101;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S569\'.");
        label101:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker160() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker161() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker162() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker163() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS567CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S574");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S574");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S574");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS567CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S574");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S574");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S574");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S575
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS575() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS575");
            this.Manager.Comment("reaching state \'S575\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp143;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp143);
            this.Manager.Comment("reaching state \'S576\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp143, "c of ReadConfig, state S576");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S577\'");
            int temp145 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker164)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker165)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker166)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker167)));
            if ((temp145 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label103;
            }
            if ((temp145 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label103;
            }
            if ((temp145 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label103;
            }
            if ((temp145 == 3)) {
                this.Manager.Comment("reaching state \'S578\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S579\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S580\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S581\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S582\'");
                int temp144 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS575CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS575CreateResponseChecker1)));
                if ((temp144 == 0)) {
                    ReplayCreateNormalHandleTestCaseS46();
                    goto label102;
                }
                if ((temp144 == 1)) {
                    ReplayCreateNormalHandleTestCaseS46();
                    goto label102;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS575CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS575CreateResponseChecker1)));
            label102:
;
                goto label103;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S577\'.");
        label103:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker164() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker165() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker166() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker167() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS575CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S582");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S582");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S582");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS575CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S582");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S582");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S582");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S583
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS583() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS583");
            this.Manager.Comment("reaching state \'S583\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp146;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp146);
            this.Manager.Comment("reaching state \'S584\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp146, "c of ReadConfig, state S584");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S585\'");
            int temp147 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker168)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker169)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker170)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker171)));
            if ((temp147 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label104;
            }
            if ((temp147 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label104;
            }
            if ((temp147 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label104;
            }
            if ((temp147 == 3)) {
                this.Manager.Comment("reaching state \'S586\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S587\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S588\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S589\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S590\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS583CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S591\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS583CreateResponseChecker)));
                }
                goto label104;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S585\'.");
        label104:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker168() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker169() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker170() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker171() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS583CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S590");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S590");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S590");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate th" +
                        "e Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches " +
                        "the ClientGuid of the connection that received this request\", \"[TestInfo] Open i" +
                        "s not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command " +
                        "is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S592
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS592() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS592");
            this.Manager.Comment("reaching state \'S592\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp148;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp148);
            this.Manager.Comment("reaching state \'S593\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp148, "c of ReadConfig, state S593");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S594\'");
            int temp150 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker172)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker173)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker174)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker175)));
            if ((temp150 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label106;
            }
            if ((temp150 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label106;
            }
            if ((temp150 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label106;
            }
            if ((temp150 == 3)) {
                this.Manager.Comment("reaching state \'S595\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S596\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S597\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S598\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S599\'");
                int temp149 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS592CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS592CreateResponseChecker1)));
                if ((temp149 == 0)) {
                    ReplayCreateNormalHandleTestCaseS540();
                    goto label105;
                }
                if ((temp149 == 1)) {
                    ReplayCreateNormalHandleTestCaseS541();
                    goto label105;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS592CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS592CreateResponseChecker1)));
            label105:
;
                goto label106;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S594\'.");
        label106:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker172() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker173() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker174() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker175() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS592CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S599");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S599");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S599");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"" +
                        ", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in t" +
                        "he Flags field of this create context, if RequestedOplockLevel in the create req" +
                        "uest is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not i" +
                        "nclude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create contex" +
                        "t with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MU" +
                        "ST ignore this create context and skip this section\", \"[TestTag] Compatibility\"," +
                        " \"[TestInfo] If the command request does not include FileId, this section MUST b" +
                        "e skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS592CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S599");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S599");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S599");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"" +
                        ", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in t" +
                        "he Flags field of this create context, if RequestedOplockLevel in the create req" +
                        "uest is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not i" +
                        "nclude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create contex" +
                        "t with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MU" +
                        "ST ignore this create context and skip this section\", \"[TestTag] Compatibility\"," +
                        " \"[TestInfo] If the command request does not include FileId, this section MUST b" +
                        "e skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S600
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS600() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS600");
            this.Manager.Comment("reaching state \'S600\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp151;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp151);
            this.Manager.Comment("reaching state \'S601\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp151, "c of ReadConfig, state S601");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S602\'");
            int temp153 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker176)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker177)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker178)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker179)));
            if ((temp153 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label108;
            }
            if ((temp153 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label108;
            }
            if ((temp153 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label108;
            }
            if ((temp153 == 3)) {
                this.Manager.Comment("reaching state \'S603\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S604\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S605\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S606\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S607\'");
                int temp152 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS600CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS600CreateResponseChecker1)));
                if ((temp152 == 0)) {
                    ReplayCreateNormalHandleTestCaseS608();
                    goto label107;
                }
                if ((temp152 == 1)) {
                    ReplayCreateNormalHandleTestCaseS608();
                    goto label107;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS600CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS600CreateResponseChecker1)));
            label107:
;
                goto label108;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S602\'.");
        label108:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker176() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker177() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker178() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker179() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS600CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S607");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S607");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S607");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS608() {
            this.Manager.Comment("reaching state \'S608\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS600CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S607");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S607");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S607");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S609
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS609() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS609");
            this.Manager.Comment("reaching state \'S609\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp154;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp154);
            this.Manager.Comment("reaching state \'S610\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp154, "c of ReadConfig, state S610");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S611\'");
            int temp156 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker180)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker181)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker182)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker183)));
            if ((temp156 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label110;
            }
            if ((temp156 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label110;
            }
            if ((temp156 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label110;
            }
            if ((temp156 == 3)) {
                this.Manager.Comment("reaching state \'S612\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S613\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S614\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S615\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S616\'");
                int temp155 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS609CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS609CreateResponseChecker1)));
                if ((temp155 == 0)) {
                    ReplayCreateNormalHandleTestCaseS617();
                    goto label109;
                }
                if ((temp155 == 1)) {
                    ReplayCreateNormalHandleTestCaseS617();
                    goto label109;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS609CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS609CreateResponseChecker1)));
            label109:
;
                goto label110;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S611\'.");
        label110:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker180() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker181() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker182() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker183() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS609CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S616");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S616");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S616");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST lo" +
                        "cate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid m" +
                        "atches the ClientGuid of the connection that received this request\", \"[TestInfo]" +
                        " Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an O" +
                        "pen is not found, the server MUST continue the create process specified in the \"" +
                        "Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] " +
                        "3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\"" +
                        " phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Ope" +
                        "n.DurableOwner to a security descriptor accessible only by the user represented " +
                        "by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS617() {
            this.Manager.Comment("reaching state \'S617\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS609CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S616");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S616");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S616");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST lo" +
                        "cate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid m" +
                        "atches the ClientGuid of the connection that received this request\", \"[TestInfo]" +
                        " Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an O" +
                        "pen is not found, the server MUST continue the create process specified in the \"" +
                        "Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] " +
                        "3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\"" +
                        " phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Ope" +
                        "n.DurableOwner to a security descriptor accessible only by the user represented " +
                        "by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S618
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS618() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS618");
            this.Manager.Comment("reaching state \'S618\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp157;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp157);
            this.Manager.Comment("reaching state \'S619\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp157, "c of ReadConfig, state S619");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S620\'");
            int temp159 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker184)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker185)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker186)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker187)));
            if ((temp159 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label112;
            }
            if ((temp159 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label112;
            }
            if ((temp159 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label112;
            }
            if ((temp159 == 3)) {
                this.Manager.Comment("reaching state \'S621\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S622\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S623\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S624\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S625\'");
                int temp158 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS618CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS618CreateResponseChecker1)));
                if ((temp158 == 0)) {
                    ReplayCreateNormalHandleTestCaseS626();
                    goto label111;
                }
                if ((temp158 == 1)) {
                    ReplayCreateNormalHandleTestCaseS626();
                    goto label111;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS618CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS618CreateResponseChecker1)));
            label111:
;
                goto label112;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S620\'.");
        label112:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker184() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker185() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker186() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker187() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS618CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S625");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S625");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S625");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedO" +
                        "plockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate the " +
                        "Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2" +
                        "_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches th" +
                        "e ClientGuid of the connection that received this request\", \"[TestInfo] Open is " +
                        "not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is no" +
                        "t found, the server MUST continue the create process specified in the \"Open Exec" +
                        "ution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.1" +
                        "0: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_" +
                        "HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, t" +
                        "he server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durable" +
                        "Owner to a security descriptor accessible only by the user represented by Open.S" +
                        "ession.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo" +
                        "] If the command request does not include FileId, this section MUST be skipped\"," +
                        " \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS626() {
            this.Manager.Comment("reaching state \'S626\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS618CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S625");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S625");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S625");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedO" +
                        "plockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate the " +
                        "Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2" +
                        "_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches th" +
                        "e ClientGuid of the connection that received this request\", \"[TestInfo] Open is " +
                        "not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is no" +
                        "t found, the server MUST continue the create process specified in the \"Open Exec" +
                        "ution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.1" +
                        "0: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_" +
                        "HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, t" +
                        "he server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durable" +
                        "Owner to a security descriptor accessible only by the user represented by Open.S" +
                        "ession.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo" +
                        "] If the command request does not include FileId, this section MUST be skipped\"," +
                        " \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S627
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS627() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS627");
            this.Manager.Comment("reaching state \'S627\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp160;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp160);
            this.Manager.Comment("reaching state \'S628\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp160, "c of ReadConfig, state S628");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S629\'");
            int temp162 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker188)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker189)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker190)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker191)));
            if ((temp162 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label114;
            }
            if ((temp162 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label114;
            }
            if ((temp162 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label114;
            }
            if ((temp162 == 3)) {
                this.Manager.Comment("reaching state \'S630\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S631\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S632\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S633\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S634\'");
                int temp161 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS627CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS627CreateResponseChecker1)));
                if ((temp161 == 0)) {
                    ReplayCreateNormalHandleTestCaseS490();
                    goto label113;
                }
                if ((temp161 == 1)) {
                    ReplayCreateNormalHandleTestCaseS490();
                    goto label113;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS627CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS627CreateResponseChecker1)));
            label113:
;
                goto label114;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S629\'.");
        label114:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker188() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker189() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker190() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker191() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS627CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S634");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S634");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S634");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS627CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S634");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S634");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S634");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S635
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS635() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS635");
            this.Manager.Comment("reaching state \'S635\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp163;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp163);
            this.Manager.Comment("reaching state \'S636\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp163, "c of ReadConfig, state S636");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S637\'");
            int temp165 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker192)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker193)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker194)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker195)));
            if ((temp165 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label116;
            }
            if ((temp165 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label116;
            }
            if ((temp165 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label116;
            }
            if ((temp165 == 3)) {
                this.Manager.Comment("reaching state \'S638\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S639\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S640\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S641\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S642\'");
                int temp164 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS635CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS635CreateResponseChecker1)));
                if ((temp164 == 0)) {
                    ReplayCreateNormalHandleTestCaseS490();
                    goto label115;
                }
                if ((temp164 == 1)) {
                    ReplayCreateNormalHandleTestCaseS490();
                    goto label115;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS635CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS635CreateResponseChecker1)));
            label115:
;
                goto label116;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S637\'.");
        label116:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker192() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker193() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker194() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker195() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS635CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S642");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S642");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S642");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS635CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S642");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S642");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S642");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S643
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS643() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS643");
            this.Manager.Comment("reaching state \'S643\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp166;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp166);
            this.Manager.Comment("reaching state \'S644\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp166, "c of ReadConfig, state S644");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S645\'");
            int temp168 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker196)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker197)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker198)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker199)));
            if ((temp168 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label118;
            }
            if ((temp168 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label118;
            }
            if ((temp168 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label118;
            }
            if ((temp168 == 3)) {
                this.Manager.Comment("reaching state \'S646\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S647\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S648\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S649\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S650\'");
                int temp167 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS643CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS643CreateResponseChecker1)));
                if ((temp167 == 0)) {
                    ReplayCreateNormalHandleTestCaseS651();
                    goto label117;
                }
                if ((temp167 == 1)) {
                    ReplayCreateNormalHandleTestCaseS651();
                    goto label117;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS643CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS643CreateResponseChecker1)));
            label117:
;
                goto label118;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S645\'.");
        label118:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker196() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker197() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker198() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker199() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS643CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S650");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S650");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S650");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Di" +
                        "alect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYP" +
                        "E_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the serv" +
                        "er MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connectio" +
                        "n.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the R" +
                        "equestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRe" +
                        "quest.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createReques" +
                        "t.requestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] If the command request does not include FileId, this section MUST " +
                        "be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"" +
                        "");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS651() {
            this.Manager.Comment("reaching state \'S651\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS643CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S650");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S650");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S650");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Di" +
                        "alect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYP" +
                        "E_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the serv" +
                        "er MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connectio" +
                        "n.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the R" +
                        "equestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRe" +
                        "quest.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createReques" +
                        "t.requestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST" +
                        " locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid" +
                        " in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGui" +
                        "d matches the ClientGuid of the connection that received this request\", \"[TestIn" +
                        "fo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If a" +
                        "n Open is not found, the server MUST continue the create process specified in th" +
                        "e \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB" +
                        "2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CRE" +
                        "ATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializati" +
                        "on\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set " +
                        "Open.DurableOwner to a security descriptor accessible only by the user represent" +
                        "ed by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\"" +
                        ", \"[TestInfo] If the command request does not include FileId, this section MUST " +
                        "be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"" +
                        "");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S652
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS652() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS652");
            this.Manager.Comment("reaching state \'S652\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp169;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp169);
            this.Manager.Comment("reaching state \'S653\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp169, "c of ReadConfig, state S653");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S654\'");
            int temp171 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker200)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker201)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker202)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker203)));
            if ((temp171 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label120;
            }
            if ((temp171 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label120;
            }
            if ((temp171 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label120;
            }
            if ((temp171 == 3)) {
                this.Manager.Comment("reaching state \'S655\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S656\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S657\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S658\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S659\'");
                int temp170 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS652CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS652CreateResponseChecker1)));
                if ((temp170 == 0)) {
                    ReplayCreateNormalHandleTestCaseS660();
                    goto label119;
                }
                if ((temp170 == 1)) {
                    ReplayCreateNormalHandleTestCaseS660();
                    goto label119;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS652CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS652CreateResponseChecker1)));
            label119:
;
                goto label120;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S654\'.");
        label120:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker200() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker201() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker202() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker203() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS652CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S659");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S659");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S659");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedO" +
                        "plockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate" +
                        " the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid match" +
                        "es the ClientGuid of the connection that received this request\", \"[TestInfo] Ope" +
                        "n is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open " +
                        "is not found, the server MUST continue the create process specified in the \"Open" +
                        " Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3." +
                        "5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DUR" +
                        "ABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" pha" +
                        "se, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Du" +
                        "rableOwner to a security descriptor accessible only by the user represented by O" +
                        "pen.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Tes" +
                        "tInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStat" +
                        "eNotIncludeH\", \"[TestInfo] If the command request does not include FileId, this " +
                        "section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request comma" +
                        "nd is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS660() {
            this.Manager.Comment("reaching state \'S660\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS652CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S659");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S659");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S659");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelD" +
                        "urableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedO" +
                        "plockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate" +
                        " the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid match" +
                        "es the ClientGuid of the connection that received this request\", \"[TestInfo] Ope" +
                        "n is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open " +
                        "is not found, the server MUST continue the create process specified in the \"Open" +
                        " Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3." +
                        "5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DUR" +
                        "ABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" pha" +
                        "se, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Du" +
                        "rableOwner to a security descriptor accessible only by the user represented by O" +
                        "pen.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Tes" +
                        "tInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStat" +
                        "eNotIncludeH\", \"[TestInfo] If the command request does not include FileId, this " +
                        "section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request comma" +
                        "nd is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S661
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS661() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS661");
            this.Manager.Comment("reaching state \'S661\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp172;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp172);
            this.Manager.Comment("reaching state \'S662\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp172, "c of ReadConfig, state S662");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S663\'");
            int temp173 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker204)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker205)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker206)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker207)));
            if ((temp173 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label121;
            }
            if ((temp173 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label121;
            }
            if ((temp173 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label121;
            }
            if ((temp173 == 3)) {
                this.Manager.Comment("reaching state \'S664\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S665\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S666\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S667\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S668\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS661CreateResponseChecker))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS669();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS661CreateResponseChecker)));
                }
                goto label121;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S663\'.");
        label121:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker204() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker205() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker206() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker207() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS661CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S668");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S668");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S668");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate th" +
                        "e Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches " +
                        "the ClientGuid of the connection that received this request\", \"[TestInfo] Open i" +
                        "s not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command " +
                        "is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS669() {
            this.Manager.Comment("reaching state \'S669\'");
        }
        #endregion
        
        #region Test Starting in S670
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS670() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS670");
            this.Manager.Comment("reaching state \'S670\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp174;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp174);
            this.Manager.Comment("reaching state \'S671\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp174, "c of ReadConfig, state S671");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S672\'");
            int temp176 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker208)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker209)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker210)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker211)));
            if ((temp176 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label123;
            }
            if ((temp176 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label123;
            }
            if ((temp176 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label123;
            }
            if ((temp176 == 3)) {
                this.Manager.Comment("reaching state \'S673\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S674\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S675\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S676\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S677\'");
                int temp175 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS670CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS670CreateResponseChecker1)));
                if ((temp175 == 0)) {
                    ReplayCreateNormalHandleTestCaseS46();
                    goto label122;
                }
                if ((temp175 == 1)) {
                    ReplayCreateNormalHandleTestCaseS46();
                    goto label122;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS670CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS670CreateResponseChecker1)));
            label122:
;
                goto label123;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S672\'.");
        label123:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker208() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker209() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker210() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker211() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS670CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S677");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S677");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S677");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS670CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S677");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S677");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S677");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S678
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS678() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS678");
            this.Manager.Comment("reaching state \'S678\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp177;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp177);
            this.Manager.Comment("reaching state \'S679\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp177, "c of ReadConfig, state S679");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S680\'");
            int temp179 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker212)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker213)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker214)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker215)));
            if ((temp179 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label125;
            }
            if ((temp179 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label125;
            }
            if ((temp179 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label125;
            }
            if ((temp179 == 3)) {
                this.Manager.Comment("reaching state \'S681\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S682\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S683\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S684\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S685\'");
                int temp178 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS678CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS678CreateResponseChecker1)));
                if ((temp178 == 0)) {
                    ReplayCreateNormalHandleTestCaseS523();
                    goto label124;
                }
                if ((temp178 == 1)) {
                    ReplayCreateNormalHandleTestCaseS523();
                    goto label124;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS678CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS678CreateResponseChecker1)));
            label124:
;
                goto label125;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S680\'.");
        label125:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker212() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker213() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker214() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker215() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS678CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S685");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S685");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S685");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect b" +
                        "elongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUST" +
                        "ER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST" +
                        " set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Diale" +
                        "ct is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Requeste" +
                        "dOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.m" +
                        "odelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplock" +
                        "Level is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSIST" +
                        "ENT bit is not set in the Flags field of this create context, if RequestedOplock" +
                        "Level in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the cr" +
                        "eate request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST" +
                        "_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE" +
                        "_CACHING, the server MUST ignore this create context and skip this section\", \"[T" +
                        "estTag] Compatibility\", \"[TestInfo] If the command request does not include File" +
                        "Id, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, requ" +
                        "est command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS678CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S685");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S685");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S685");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMain" +
                        "Channel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect b" +
                        "elongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUST" +
                        "ER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST" +
                        " set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Diale" +
                        "ct is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Requeste" +
                        "dOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.m" +
                        "odelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplock" +
                        "Level is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSIST" +
                        "ENT bit is not set in the Flags field of this create context, if RequestedOplock" +
                        "Level in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the cr" +
                        "eate request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST" +
                        "_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE" +
                        "_CACHING, the server MUST ignore this create context and skip this section\", \"[T" +
                        "estTag] Compatibility\", \"[TestInfo] If the command request does not include File" +
                        "Id, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, requ" +
                        "est command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS68() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS68");
            this.Manager.Comment("reaching state \'S68\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp180;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp180);
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp180, "c of ReadConfig, state S69");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S70\'");
            int temp181 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker216)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker217)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker218)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker219)));
            if ((temp181 == 0)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label126;
            }
            if ((temp181 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label126;
            }
            if ((temp181 == 2)) {
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S72\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S73\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S75\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS68CreateResponseChecker))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS20();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS68CreateResponseChecker)));
                }
                goto label126;
            }
            if ((temp181 == 3)) {
                this.Manager.Comment("reaching state \'S76\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S77\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S78\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S79\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S80\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS68CreateResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S81\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS68CreateResponseChecker1)));
                }
                goto label126;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S70\'.");
        label126:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker216() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker217() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker218() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS68CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S75");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S75");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S75");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLe" +
                        "velLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST con" +
                        "tinue the create process specified in the \"Open Execution\" Phase, and perform th" +
                        "e following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open." +
                        "CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SM" +
                        "B2] In the \"Successful Open Initialization\" phase, the server MUST set Open.IsDu" +
                        "rable to TRUE. The server MUST also set Open.DurableOwner to a security descript" +
                        "or accessible only by the user represented by Open.Session.SecurityContext.\", \"[" +
                        "TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] Requested OplockLevel is O" +
                        "plockLevelLeaseV2, Open.leaseState is LeaseStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10" +
                        ": The server MUST construct the create response from Open, as specified in the \"" +
                        "Response Construction\" phase, with the following additional steps, and send the " +
                        "response to client\", \"[TestInfo] Open.IsPersistent is FALSE\", \"[TestInfo] If the" +
                        " command request does not include FileId, this section MUST be skipped\", \"[TestI" +
                        "nfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker219() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS68CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S80");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S80");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S80");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate th" +
                        "e Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches " +
                        "the ClientGuid of the connection that received this request\", \"[TestInfo] Open i" +
                        "s not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command " +
                        "is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S686
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS686() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS686");
            this.Manager.Comment("reaching state \'S686\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp182;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp182);
            this.Manager.Comment("reaching state \'S687\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp182, "c of ReadConfig, state S687");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S688\'");
            int temp183 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker220)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker221)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker222)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker223)));
            if ((temp183 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label127;
            }
            if ((temp183 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label127;
            }
            if ((temp183 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label127;
            }
            if ((temp183 == 3)) {
                this.Manager.Comment("reaching state \'S689\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S690\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S691\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S692\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S693\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS686CreateResponseChecker))) != -1)) {
                    ReplayCreateNormalHandleTestCaseS669();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS686CreateResponseChecker)));
                }
                goto label127;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S688\'.");
        label127:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker220() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker221() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker222() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker223() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS686CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S693");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S693");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S693");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate th" +
                        "e Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SM" +
                        "B2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches " +
                        "the ClientGuid of the connection that received this request\", \"[TestInfo] Open i" +
                        "s not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command " +
                        "is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S694
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS694() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS694");
            this.Manager.Comment("reaching state \'S694\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp184;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp184);
            this.Manager.Comment("reaching state \'S695\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp184, "c of ReadConfig, state S695");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S696\'");
            int temp186 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker224)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker225)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker226)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker227)));
            if ((temp186 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label129;
            }
            if ((temp186 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label129;
            }
            if ((temp186 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label129;
            }
            if ((temp186 == 3)) {
                this.Manager.Comment("reaching state \'S697\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S698\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S699\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelII,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S700\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S701\'");
                int temp185 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS694CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS694CreateResponseChecker1)));
                if ((temp185 == 0)) {
                    ReplayCreateNormalHandleTestCaseS550();
                    goto label128;
                }
                if ((temp185 == 1)) {
                    ReplayCreateNormalHandleTestCaseS550();
                    goto label128;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS694CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS694CreateResponseChecker1)));
            label128:
;
                goto label129;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S696\'.");
        label129:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker224() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker225() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker226() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker227() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS694CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S701");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S701");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S701");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS694CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S701");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S701");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S701");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S702
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS702() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS702");
            this.Manager.Comment("reaching state \'S702\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp187;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp187);
            this.Manager.Comment("reaching state \'S703\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp187, "c of ReadConfig, state S703");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S704\'");
            int temp189 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker228)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker229)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker230)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker231)));
            if ((temp189 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label131;
            }
            if ((temp189 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label131;
            }
            if ((temp189 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label131;
            }
            if ((temp189 == 3)) {
                this.Manager.Comment("reaching state \'S705\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S706\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S707\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S708\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S709\'");
                int temp188 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS702CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS702CreateResponseChecker1)));
                if ((temp188 == 0)) {
                    ReplayCreateNormalHandleTestCaseS46();
                    goto label130;
                }
                if ((temp188 == 1)) {
                    ReplayCreateNormalHandleTestCaseS46();
                    goto label130;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS702CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS702CreateResponseChecker1)));
            label130:
;
                goto label131;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S704\'.");
        label131:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker228() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker229() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker230() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker231() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS702CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S709");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S709");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S709");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS702CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S709");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S709");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S709");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S710
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS710() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS710");
            this.Manager.Comment("reaching state \'S710\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp190;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp190);
            this.Manager.Comment("reaching state \'S711\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp190, "c of ReadConfig, state S711");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S712\'");
            int temp192 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker232)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker233)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker234)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker235)));
            if ((temp192 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label133;
            }
            if ((temp192 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label133;
            }
            if ((temp192 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label133;
            }
            if ((temp192 == 3)) {
                this.Manager.Comment("reaching state \'S713\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S714\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S715\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S716\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S717\'");
                int temp191 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS710CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS710CreateResponseChecker1)));
                if ((temp191 == 0)) {
                    ReplayCreateNormalHandleTestCaseS550();
                    goto label132;
                }
                if ((temp191 == 1)) {
                    ReplayCreateNormalHandleTestCaseS550();
                    goto label132;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS710CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS710CreateResponseChecker1)));
            label132:
;
                goto label133;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S712\'.");
        label133:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker232() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker233() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker234() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker235() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS710CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S717");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S717");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS710CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S717");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S717");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S718
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS718() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS718");
            this.Manager.Comment("reaching state \'S718\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp193;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp193);
            this.Manager.Comment("reaching state \'S719\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp193, "c of ReadConfig, state S719");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S720\'");
            int temp194 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker236)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker237)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker238)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker239)));
            if ((temp194 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label134;
            }
            if ((temp194 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label134;
            }
            if ((temp194 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label134;
            }
            if ((temp194 == 3)) {
                this.Manager.Comment("reaching state \'S721\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S722\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S723\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S724\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S725\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS718CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S726\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS718CreateResponseChecker)));
                }
                goto label134;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S720\'.");
        label134:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker236() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker237() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker238() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker239() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS718CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S725");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S725");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S725");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType =" +
                        "= AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectM" +
                        "ainChannel (i.e. experiencing connection drop), the server will send oplock/leas" +
                        "e break notification to the client, but currently test cases do not send acknowl" +
                        "edgement request, so the oplock break acknowledgment timer always expires.\", \"[T" +
                        "estInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] Co" +
                        "mpatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQ" +
                        "UEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durable" +
                        "HandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLev" +
                        "elLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST cont" +
                        "inue the create process specified in the \"Open Execution\" Phase, and perform the" +
                        " following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.C" +
                        "reateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB" +
                        "2] In the \"Successful Open Initialization\" phase, the server MUST set Open.IsDur" +
                        "able to TRUE. The server MUST also set Open.DurableOwner to a security descripto" +
                        "r accessible only by the user represented by Open.Session.SecurityContext.\", \"[T" +
                        "estInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] Requested OplockLevel is Op" +
                        "lockLevelLeaseV2, Open.leaseState is LeaseStateIncludeH\", \"[MS-SMB2] 3.3.5.9.10:" +
                        " The server MUST construct the create response from Open, as specified in the \"R" +
                        "esponse Construction\" phase, with the following additional steps, and send the r" +
                        "esponse to client\", \"[TestInfo] Open.IsPersistent is FALSE\", \"[TestInfo] If the " +
                        "command request does not include FileId, this section MUST be skipped\", \"[TestIn" +
                        "fo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S727
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS727() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS727");
            this.Manager.Comment("reaching state \'S727\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp195;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp195);
            this.Manager.Comment("reaching state \'S728\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp195, "c of ReadConfig, state S728");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S729\'");
            int temp197 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker240)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker241)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker242)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker243)));
            if ((temp197 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label136;
            }
            if ((temp197 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label136;
            }
            if ((temp197 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label136;
            }
            if ((temp197 == 3)) {
                this.Manager.Comment("reaching state \'S730\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S731\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S732\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S733\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S734\'");
                int temp196 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS727CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS727CreateResponseChecker1)));
                if ((temp196 == 0)) {
                    ReplayCreateNormalHandleTestCaseS513();
                    goto label135;
                }
                if ((temp196 == 1)) {
                    ReplayCreateNormalHandleTestCaseS514();
                    goto label135;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS727CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS727CreateResponseChecker1)));
            label135:
;
                goto label136;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S729\'.");
        label136:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker240() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker241() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker242() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker243() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS727CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S734");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S734");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S734");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS727CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S734");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S734");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S734");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S735
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS735() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS735");
            this.Manager.Comment("reaching state \'S735\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp198;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp198);
            this.Manager.Comment("reaching state \'S736\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp198, "c of ReadConfig, state S736");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S737\'");
            int temp200 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker244)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker245)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker246)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker247)));
            if ((temp200 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label138;
            }
            if ((temp200 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label138;
            }
            if ((temp200 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label138;
            }
            if ((temp200 == 3)) {
                this.Manager.Comment("reaching state \'S738\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S739\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S740\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S741\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S742\'");
                int temp199 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS735CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS735CreateResponseChecker1)));
                if ((temp199 == 0)) {
                    ReplayCreateNormalHandleTestCaseS490();
                    goto label137;
                }
                if ((temp199 == 1)) {
                    ReplayCreateNormalHandleTestCaseS490();
                    goto label137;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS735CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS735CreateResponseChecker1)));
            label137:
;
                goto label138;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S737\'.");
        label138:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker244() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker245() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker246() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker247() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS735CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S742");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S742");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S742");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS735CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S742");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S742");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S742");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S743
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS743() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS743");
            this.Manager.Comment("reaching state \'S743\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp201;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp201);
            this.Manager.Comment("reaching state \'S744\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp201, "c of ReadConfig, state S744");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S745\'");
            int temp203 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker248)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker249)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker250)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker251)));
            if ((temp203 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label140;
            }
            if ((temp203 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label140;
            }
            if ((temp203 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label140;
            }
            if ((temp203 == 3)) {
                this.Manager.Comment("reaching state \'S746\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S747\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S748\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S749\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S750\'");
                int temp202 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS743CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS743CreateResponseChecker1)));
                if ((temp202 == 0)) {
                    ReplayCreateNormalHandleTestCaseS8();
                    goto label139;
                }
                if ((temp202 == 1)) {
                    ReplayCreateNormalHandleTestCaseS8();
                    goto label139;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS743CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS743CreateResponseChecker1)));
            label139:
;
                goto label140;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S745\'.");
        label140:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker248() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker249() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker250() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker251() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS743CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S750");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S750");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S750");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS743CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S750");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S750");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S750");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S751
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS751() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS751");
            this.Manager.Comment("reaching state \'S751\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp204;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp204);
            this.Manager.Comment("reaching state \'S752\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp204, "c of ReadConfig, state S752");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S753\'");
            int temp206 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker252)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker253)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker254)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker255)));
            if ((temp206 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label142;
            }
            if ((temp206 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label142;
            }
            if ((temp206 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label142;
            }
            if ((temp206 == 3)) {
                this.Manager.Comment("reaching state \'S754\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S755\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S756\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV1,LeaseStateNotIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S757\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S758\'");
                int temp205 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS751CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS751CreateResponseChecker1)));
                if ((temp205 == 0)) {
                    ReplayCreateNormalHandleTestCaseS759();
                    goto label141;
                }
                if ((temp205 == 1)) {
                    ReplayCreateNormalHandleTestCaseS759();
                    goto label141;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS751CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS751CreateResponseChecker1)));
            label141:
;
                goto label142;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S753\'.");
        label142:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker252() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker253() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker254() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker255() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS751CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S758");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S758");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S758");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUS" +
                        "T locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGui" +
                        "d in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGu" +
                        "id matches the ClientGuid of the connection that received this request\", \"[TestI" +
                        "nfo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If " +
                        "an Open is not found, the server MUST continue the create process specified in t" +
                        "he \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SM" +
                        "B2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializat" +
                        "ion\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set" +
                        " Open.DurableOwner to a security descriptor accessible only by the user represen" +
                        "ted by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE" +
                        "\", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is L" +
                        "easeStateNotIncludeH\", \"[TestInfo] If the command request does not include FileI" +
                        "d, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, requ" +
                        "est command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS759() {
            this.Manager.Comment("reaching state \'S759\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS751CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S758");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S758");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S758");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUS" +
                        "T locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGui" +
                        "d in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGu" +
                        "id matches the ClientGuid of the connection that received this request\", \"[TestI" +
                        "nfo] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If " +
                        "an Open is not found, the server MUST continue the create process specified in t" +
                        "he \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SM" +
                        "B2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CR" +
                        "EATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializat" +
                        "ion\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set" +
                        " Open.DurableOwner to a security descriptor accessible only by the user represen" +
                        "ted by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE" +
                        "\", \"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is L" +
                        "easeStateNotIncludeH\", \"[TestInfo] If the command request does not include FileI" +
                        "d, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, requ" +
                        "est command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S760
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS760() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS760");
            this.Manager.Comment("reaching state \'S760\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp207;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp207);
            this.Manager.Comment("reaching state \'S761\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp207, "c of ReadConfig, state S761");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S762\'");
            int temp209 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker256)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker257)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker258)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker259)));
            if ((temp209 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label144;
            }
            if ((temp209 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label144;
            }
            if ((temp209 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label144;
            }
            if ((temp209 == 3)) {
                this.Manager.Comment("reaching state \'S763\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S764\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S765\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S766\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S767\'");
                int temp208 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS760CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS760CreateResponseChecker1)));
                if ((temp208 == 0)) {
                    ReplayCreateNormalHandleTestCaseS768();
                    goto label143;
                }
                if ((temp208 == 1)) {
                    ReplayCreateNormalHandleTestCaseS768();
                    goto label143;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS760CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS760CreateResponseChecker1)));
            label143:
;
                goto label144;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S762\'.");
        label144:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker256() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker257() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker258() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker259() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS760CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S767");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S767");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S767");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.D" +
                        "ialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STY" +
                        "PE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the ser" +
                        "ver MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the" +
                        " RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handli" +
                        "ng the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] create" +
                        "Request.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequ" +
                        "est.requestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MU" +
                        "ST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGu" +
                        "id in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientG" +
                        "uid matches the ClientGuid of the connection that received this request\", \"[Test" +
                        "Info] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If" +
                        " an Open is not found, the server MUST continue the create process specified in " +
                        "the \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-S" +
                        "MB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializa" +
                        "tion\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also se" +
                        "t Open.DurableOwner to a security descriptor accessible only by the user represe" +
                        "nted by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRU" +
                        "E\", \"[TestInfo] If the command request does not include FileId, this section MUS" +
                        "T be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Crea" +
                        "te\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS768() {
            this.Manager.Comment("reaching state \'S768\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS760CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S767");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S767");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S767");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.D" +
                        "ialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STY" +
                        "PE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the ser" +
                        "ver MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the" +
                        " RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handli" +
                        "ng the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] create" +
                        "Request.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequ" +
                        "est.requestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MU" +
                        "ST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGu" +
                        "id in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientG" +
                        "uid matches the ClientGuid of the connection that received this request\", \"[Test" +
                        "Info] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If" +
                        " an Open is not found, the server MUST continue the create process specified in " +
                        "the \"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-S" +
                        "MB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initializa" +
                        "tion\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also se" +
                        "t Open.DurableOwner to a security descriptor accessible only by the user represe" +
                        "nted by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRU" +
                        "E\", \"[TestInfo] If the command request does not include FileId, this section MUS" +
                        "T be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Crea" +
                        "te\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S769
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS769() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS769");
            this.Manager.Comment("reaching state \'S769\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp210;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp210);
            this.Manager.Comment("reaching state \'S770\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp210, "c of ReadConfig, state S770");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S771\'");
            int temp211 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker260)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker261)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker262)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker263)));
            if ((temp211 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label145;
            }
            if ((temp211 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label145;
            }
            if ((temp211 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label145;
            }
            if ((temp211 == 3)) {
                this.Manager.Comment("reaching state \'S772\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S773\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S774\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S775\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S776\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS769CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S777\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS769CreateResponseChecker)));
                }
                goto label145;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S771\'.");
        label145:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker260() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker261() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker262() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker263() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS769CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S776");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S776");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S776");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateI" +
                        "ncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response f" +
                        "rom Open, as specified in the \"Response Construction\" phase, with the following " +
                        "additional steps, and send the response to client\", \"[TestInfo] Open.IsPersisten" +
                        "t is FALSE\", \"[TestInfo] If the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request comman" +
                        "d is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S778
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS778() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS778");
            this.Manager.Comment("reaching state \'S778\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp212;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp212);
            this.Manager.Comment("reaching state \'S779\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp212, "c of ReadConfig, state S779");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S780\'");
            int temp214 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker264)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker265)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker266)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker267)));
            if ((temp214 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label147;
            }
            if ((temp214 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label147;
            }
            if ((temp214 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label147;
            }
            if ((temp214 == 3)) {
                this.Manager.Comment("reaching state \'S781\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S782\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S783\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithoutReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S784\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S785\'");
                int temp213 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS778CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS778CreateResponseChecker1)));
                if ((temp213 == 0)) {
                    ReplayCreateNormalHandleTestCaseS786();
                    goto label146;
                }
                if ((temp213 == 1)) {
                    ReplayCreateNormalHandleTestCaseS786();
                    goto label146;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS778CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS778CreateResponseChecker1)));
            label146:
;
                goto label147;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S780\'.");
        label147:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker264() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker265() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker266() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker267() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS778CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S785");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S785");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S785");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS786() {
            this.Manager.Comment("reaching state \'S786\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS778CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S785");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S785");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S785");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S787
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS787() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS787");
            this.Manager.Comment("reaching state \'S787\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp215;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp215);
            this.Manager.Comment("reaching state \'S788\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp215, "c of ReadConfig, state S788");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S789\'");
            int temp216 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker268)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker269)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker270)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker271)));
            if ((temp216 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label148;
            }
            if ((temp216 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label148;
            }
            if ((temp216 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label148;
            }
            if ((temp216 == 3)) {
                this.Manager.Comment("reaching state \'S790\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S791\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S792\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S793\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S794\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS787CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S795\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS787CreateResponseChecker)));
                }
                goto label148;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S789\'.");
        label148:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker268() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker269() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker270() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker271() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS787CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S794");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S794");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S794");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.requested" +
                        "OplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locat" +
                        "e the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in th" +
                        "e SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matc" +
                        "hes the ClientGuid of the connection that received this request\", \"[TestInfo] Op" +
                        "en is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open" +
                        " is not found, the server MUST continue the create process specified in the \"Ope" +
                        "n Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3" +
                        ".5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DU" +
                        "RABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" ph" +
                        "ase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.D" +
                        "urableOwner to a security descriptor accessible only by the user represented by " +
                        "Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[Te" +
                        "stInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseSta" +
                        "teIncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create respons" +
                        "e from Open, as specified in the \"Response Construction\" phase, with the followi" +
                        "ng additional steps, and send the response to client\", \"[TestInfo] Open.IsPersis" +
                        "tent is FALSE\", \"[TestInfo] If the command request does not include FileId, this" +
                        " section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request com" +
                        "mand is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S796
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS796() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS796");
            this.Manager.Comment("reaching state \'S796\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp217;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp217);
            this.Manager.Comment("reaching state \'S797\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp217, "c of ReadConfig, state S797");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S798\'");
            int temp219 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker272)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker273)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker274)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker275)));
            if ((temp219 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label150;
            }
            if ((temp219 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label150;
            }
            if ((temp219 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label150;
            }
            if ((temp219 == 3)) {
                this.Manager.Comment("reaching state \'S799\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S800\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S801\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S802\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S803\'");
                int temp218 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS796CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS796CreateResponseChecker1)));
                if ((temp218 == 0)) {
                    ReplayCreateNormalHandleTestCaseS804();
                    goto label149;
                }
                if ((temp218 == 1)) {
                    ReplayCreateNormalHandleTestCaseS804();
                    goto label149;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS796CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS796CreateResponseChecker1)));
            label149:
;
                goto label150;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S798\'.");
        label150:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker272() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker273() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker274() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker275() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS796CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S803");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S803");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S803");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS804() {
            this.Manager.Comment("reaching state \'S804\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS796CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S803");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S803");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S803");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S805
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS805() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS805");
            this.Manager.Comment("reaching state \'S805\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp220;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp220);
            this.Manager.Comment("reaching state \'S806\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp220, "c of ReadConfig, state S806");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S807\'");
            int temp222 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker276)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker277)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker278)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker279)));
            if ((temp222 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label152;
            }
            if ((temp222 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label152;
            }
            if ((temp222 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label152;
            }
            if ((temp222 == 3)) {
                this.Manager.Comment("reaching state \'S808\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S809\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S810\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,InvalidChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S811\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S812\'");
                int temp221 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS805CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS805CreateResponseChecker1)));
                if ((temp221 == 0)) {
                    ReplayCreateNormalHandleTestCaseS786();
                    goto label151;
                }
                if ((temp221 == 1)) {
                    ReplayCreateNormalHandleTestCaseS786();
                    goto label151;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS805CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS805CreateResponseChecker1)));
            label151:
;
                goto label152;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S807\'.");
        label152:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker276() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker277() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker278() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker279() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS805CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S812");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S812");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S812");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS805CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S812");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S812");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S812");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S813
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS813() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS813");
            this.Manager.Comment("reaching state \'S813\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp223;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp223);
            this.Manager.Comment("reaching state \'S814\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp223, "c of ReadConfig, state S814");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S815\'");
            int temp225 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker280)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker281)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker282)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker283)));
            if ((temp225 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label154;
            }
            if ((temp225 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label154;
            }
            if ((temp225 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label154;
            }
            if ((temp225 == 3)) {
                this.Manager.Comment("reaching state \'S816\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S817\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S818\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S819\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S820\'");
                int temp224 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS813CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS813CreateResponseChecker1)));
                if ((temp224 == 0)) {
                    ReplayCreateNormalHandleTestCaseS821();
                    goto label153;
                }
                if ((temp224 == 1)) {
                    ReplayCreateNormalHandleTestCaseS822();
                    goto label153;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS813CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS813CreateResponseChecker1)));
            label153:
;
                goto label154;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S815\'.");
        label154:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker280() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker281() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker282() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker283() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS813CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S820");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S820");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S820");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1" +
                        "\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in " +
                        "the Flags field of this create context, if RequestedOplockLevel in the create re" +
                        "quest is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not " +
                        "include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create conte" +
                        "xt with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server M" +
                        "UST ignore this create context and skip this section\", \"[TestTag] Compatibility\"" +
                        ", \"[TestInfo] If the command request does not include FileId, this section MUST " +
                        "be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create" +
                        "\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS821() {
            this.Manager.Comment("reaching state \'S821\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS813CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S820");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S820");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S820");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1" +
                        "\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in " +
                        "the Flags field of this create context, if RequestedOplockLevel in the create re" +
                        "quest is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not " +
                        "include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create conte" +
                        "xt with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server M" +
                        "UST ignore this create context and skip this section\", \"[TestTag] Compatibility\"" +
                        ", \"[TestInfo] If the command request does not include FileId, this section MUST " +
                        "be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create" +
                        "\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS822() {
            this.Manager.Comment("reaching state \'S822\'");
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS82() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS82");
            this.Manager.Comment("reaching state \'S82\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp226;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp226);
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp226, "c of ReadConfig, state S83");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S84\'");
            int temp229 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker284)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker285)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker286)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker287)));
            if ((temp229 == 0)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label157;
            }
            if ((temp229 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label157;
            }
            if ((temp229 == 2)) {
                this.Manager.Comment("reaching state \'S85\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,InvalidChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S89\'");
                int temp227 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS82CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS82CreateResponseChecker1)));
                if ((temp227 == 0)) {
                    ReplayCreateNormalHandleTestCaseS90();
                    goto label155;
                }
                if ((temp227 == 1)) {
                    ReplayCreateNormalHandleTestCaseS90();
                    goto label155;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS82CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS82CreateResponseChecker1)));
            label155:
;
                goto label157;
            }
            if ((temp229 == 3)) {
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb30,ClientNotSupportPersistent,NormalHandle," +
                        "NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelNone,LeaseStateIsNone,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S95\'");
                int temp228 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS82CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS82CreateResponseChecker3)));
                if ((temp228 == 0)) {
                    ReplayCreateNormalHandleTestCaseS96();
                    goto label156;
                }
                if ((temp228 == 1)) {
                    ReplayCreateNormalHandleTestCaseS96();
                    goto label156;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS82CreateResponseChecker2)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS82CreateResponseChecker3)));
            label156:
;
                goto label157;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S84\'.");
        label157:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker284() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker285() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker286() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS82CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S89");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S89");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS82CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S89");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S89");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker287() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS82CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST lo" +
                        "cate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid m" +
                        "atches the ClientGuid of the connection that received this request\", \"[TestInfo]" +
                        " Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an O" +
                        "pen is not found, the server MUST continue the create process specified in the \"" +
                        "Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] " +
                        "3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\"" +
                        " phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Ope" +
                        "n.DurableOwner to a security descriptor accessible only by the user represented " +
                        "by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS82CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST lo" +
                        "cate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid m" +
                        "atches the ClientGuid of the connection that received this request\", \"[TestInfo]" +
                        " Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an O" +
                        "pen is not found, the server MUST continue the create process specified in the \"" +
                        "Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] " +
                        "3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE" +
                        "_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\"" +
                        " phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Ope" +
                        "n.DurableOwner to a security descriptor accessible only by the user represented " +
                        "by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S823
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS823() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS823");
            this.Manager.Comment("reaching state \'S823\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp230;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp230);
            this.Manager.Comment("reaching state \'S824\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp230, "c of ReadConfig, state S824");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S825\'");
            int temp232 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker288)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker289)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker290)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker291)));
            if ((temp232 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label159;
            }
            if ((temp232 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label159;
            }
            if ((temp232 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label159;
            }
            if ((temp232 == 3)) {
                this.Manager.Comment("reaching state \'S826\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S827\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S828\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S829\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S830\'");
                int temp231 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS823CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS823CreateResponseChecker1)));
                if ((temp231 == 0)) {
                    ReplayCreateNormalHandleTestCaseS821();
                    goto label158;
                }
                if ((temp231 == 1)) {
                    ReplayCreateNormalHandleTestCaseS822();
                    goto label158;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS823CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS823CreateResponseChecker1)));
            label158:
;
                goto label159;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S825\'.");
        label159:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker288() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker289() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker290() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker291() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS823CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S830");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S830");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S830");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\", " +
                        "\"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the" +
                        " Flags field of this create context, if RequestedOplockLevel in the create reque" +
                        "st is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not inc" +
                        "lude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context " +
                        "with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST" +
                        " ignore this create context and skip this section\", \"[TestTag] Compatibility\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS823CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S830");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S830");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S830");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\", " +
                        "\"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the" +
                        " Flags field of this create context, if RequestedOplockLevel in the create reque" +
                        "st is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not inc" +
                        "lude a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context " +
                        "with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST" +
                        " ignore this create context and skip this section\", \"[TestTag] Compatibility\", \"" +
                        "[TestInfo] If the command request does not include FileId, this section MUST be " +
                        "skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S831
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS831() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS831");
            this.Manager.Comment("reaching state \'S831\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp233;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp233);
            this.Manager.Comment("reaching state \'S832\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp233, "c of ReadConfig, state S832");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S833\'");
            int temp235 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker292)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker293)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker294)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker295)));
            if ((temp235 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label161;
            }
            if ((temp235 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label161;
            }
            if ((temp235 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label161;
            }
            if ((temp235 == 3)) {
                this.Manager.Comment("reaching state \'S834\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S835\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S836\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S837\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S838\'");
                int temp234 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS831CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS831CreateResponseChecker1)));
                if ((temp234 == 0)) {
                    ReplayCreateNormalHandleTestCaseS839();
                    goto label160;
                }
                if ((temp234 == 1)) {
                    ReplayCreateNormalHandleTestCaseS839();
                    goto label160;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS831CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS831CreateResponseChecker1)));
            label160:
;
                goto label161;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S833\'.");
        label161:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker292() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker293() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker294() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker295() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS831CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S838");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S838");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S838");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS831CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S838");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S838");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S838");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S840
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS840() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS840");
            this.Manager.Comment("reaching state \'S840\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp236;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp236);
            this.Manager.Comment("reaching state \'S841\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp236, "c of ReadConfig, state S841");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S842\'");
            int temp238 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker296)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker297)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker298)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker299)));
            if ((temp238 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label163;
            }
            if ((temp238 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label163;
            }
            if ((temp238 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label163;
            }
            if ((temp238 == 3)) {
                this.Manager.Comment("reaching state \'S843\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S844\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S845\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S846\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S847\'");
                int temp237 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS840CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS840CreateResponseChecker1)));
                if ((temp237 == 0)) {
                    ReplayCreateNormalHandleTestCaseS8();
                    goto label162;
                }
                if ((temp237 == 1)) {
                    ReplayCreateNormalHandleTestCaseS8();
                    goto label162;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS840CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS840CreateResponseChecker1)));
            label162:
;
                goto label163;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S842\'.");
        label163:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker296() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker297() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker298() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker299() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS840CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S847");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S847");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S847");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.D" +
                        "ialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STY" +
                        "PE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the ser" +
                        "ver MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the" +
                        " RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handli" +
                        "ng the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] create" +
                        "Request.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.reques" +
                        "tedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLA" +
                        "G_PERSISTENT bit is not set in the Flags field of this create context, if Reques" +
                        "tedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and " +
                        "if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREAT" +
                        "E_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEA" +
                        "SE_HANDLE_CACHING, the server MUST ignore this create context and skip this sect" +
                        "ion\", \"[TestTag] Compatibility\", \"[TestInfo] If the command request does not inc" +
                        "lude FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Sm" +
                        "b302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS840CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S847");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S847");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S847");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.D" +
                        "ialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STY" +
                        "PE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the ser" +
                        "ver MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the" +
                        " RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handli" +
                        "ng the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] create" +
                        "Request.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.reques" +
                        "tedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLA" +
                        "G_PERSISTENT bit is not set in the Flags field of this create context, if Reques" +
                        "tedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and " +
                        "if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREAT" +
                        "E_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEA" +
                        "SE_HANDLE_CACHING, the server MUST ignore this create context and skip this sect" +
                        "ion\", \"[TestTag] Compatibility\", \"[TestInfo] If the command request does not inc" +
                        "lude FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Sm" +
                        "b302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S848
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS848() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS848");
            this.Manager.Comment("reaching state \'S848\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp239;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp239);
            this.Manager.Comment("reaching state \'S849\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp239, "c of ReadConfig, state S849");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S850\'");
            int temp241 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker300)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker301)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker302)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker303)));
            if ((temp241 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label165;
            }
            if ((temp241 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label165;
            }
            if ((temp241 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label165;
            }
            if ((temp241 == 3)) {
                this.Manager.Comment("reaching state \'S851\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S852\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S853\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S854\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S855\'");
                int temp240 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS848CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS848CreateResponseChecker1)));
                if ((temp240 == 0)) {
                    ReplayCreateNormalHandleTestCaseS856();
                    goto label164;
                }
                if ((temp240 == 1)) {
                    ReplayCreateNormalHandleTestCaseS856();
                    goto label164;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS848CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS848CreateResponseChecker1)));
            label164:
;
                goto label165;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S850\'.");
        label165:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker300() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker301() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker302() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker303() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS848CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S855");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S855");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S855");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS856() {
            this.Manager.Comment("reaching state \'S856\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS848CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S855");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S855");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S855");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S857
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS857() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS857");
            this.Manager.Comment("reaching state \'S857\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp242;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp242);
            this.Manager.Comment("reaching state \'S858\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp242, "c of ReadConfig, state S858");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S859\'");
            int temp244 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker304)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker305)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker306)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker307)));
            if ((temp244 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label167;
            }
            if ((temp244 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label167;
            }
            if ((temp244 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label167;
            }
            if ((temp244 == 3)) {
                this.Manager.Comment("reaching state \'S860\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S861\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S862\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S863\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S864\'");
                int temp243 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS857CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS857CreateResponseChecker1)));
                if ((temp243 == 0)) {
                    ReplayCreateNormalHandleTestCaseS865();
                    goto label166;
                }
                if ((temp243 == 1)) {
                    ReplayCreateNormalHandleTestCaseS865();
                    goto label166;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS857CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS857CreateResponseChecker1)));
            label166:
;
                goto label167;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S859\'.");
        label167:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker304() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker305() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker306() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker307() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS857CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S864");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S864");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S864");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS865() {
            this.Manager.Comment("reaching state \'S865\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS857CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S864");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S864");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S864");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S866
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS866() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS866");
            this.Manager.Comment("reaching state \'S866\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp245;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp245);
            this.Manager.Comment("reaching state \'S867\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp245, "c of ReadConfig, state S867");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S868\'");
            int temp246 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker308)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker309)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker310)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker311)));
            if ((temp246 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label168;
            }
            if ((temp246 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label168;
            }
            if ((temp246 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label168;
            }
            if ((temp246 == 3)) {
                this.Manager.Comment("reaching state \'S869\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S870\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S871\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S872\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S873\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS866CreateResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S874\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS866CreateResponseChecker)));
                }
                goto label168;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S868\'.");
        label168:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker308() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker309() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker310() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker311() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS866CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S873");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S873");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S873");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: The server MUST locate t" +
                        "he Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the S" +
                        "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches" +
                        " the ClientGuid of the connection that received this request\", \"[TestInfo] Open " +
                        "is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateI" +
                        "ncludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response f" +
                        "rom Open, as specified in the \"Response Construction\" phase, with the following " +
                        "additional steps, and send the response to client\", \"[TestInfo] Open.IsPersisten" +
                        "t is FALSE\", \"[TestInfo] If the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request comman" +
                        "d is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S875
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS875() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS875");
            this.Manager.Comment("reaching state \'S875\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp247;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp247);
            this.Manager.Comment("reaching state \'S876\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp247, "c of ReadConfig, state S876");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S877\'");
            int temp249 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker312)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker313)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker314)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker315)));
            if ((temp249 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label170;
            }
            if ((temp249 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label170;
            }
            if ((temp249 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label170;
            }
            if ((temp249 == 3)) {
                this.Manager.Comment("reaching state \'S878\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S879\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S880\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,AlternativeFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S881\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S882\'");
                int temp248 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS875CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS875CreateResponseChecker1)));
                if ((temp248 == 0)) {
                    ReplayCreateNormalHandleTestCaseS883();
                    goto label169;
                }
                if ((temp248 == 1)) {
                    ReplayCreateNormalHandleTestCaseS883();
                    goto label169;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS875CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS875CreateResponseChecker1)));
            label169:
;
                goto label170;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S877\'.");
        label170:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker312() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker313() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker314() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker315() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS875CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S882");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S882");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S882");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST l" +
                        "ocate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid i" +
                        "n the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid " +
                        "matches the ClientGuid of the connection that received this request\", \"[TestInfo" +
                        "] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an " +
                        "Open is not found, the server MUST continue the create process specified in the " +
                        "\"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2]" +
                        " 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREAT" +
                        "E_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization" +
                        "\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Op" +
                        "en.DurableOwner to a security descriptor accessible only by the user represented" +
                        " by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", " +
                        "\"[TestInfo] If the command request does not include FileId, this section MUST be" +
                        " skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS883() {
            this.Manager.Comment("reaching state \'S883\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS875CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S882");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S882");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S882");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: The server MUST l" +
                        "ocate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid i" +
                        "n the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid " +
                        "matches the ClientGuid of the connection that received this request\", \"[TestInfo" +
                        "] Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an " +
                        "Open is not found, the server MUST continue the create process specified in the " +
                        "\"Open Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2]" +
                        " 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREAT" +
                        "E_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization" +
                        "\" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Op" +
                        "en.DurableOwner to a security descriptor accessible only by the user represented" +
                        " by Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", " +
                        "\"[TestInfo] If the command request does not include FileId, this section MUST be" +
                        " skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S884
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS884() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS884");
            this.Manager.Comment("reaching state \'S884\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp250;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp250);
            this.Manager.Comment("reaching state \'S885\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp250, "c of ReadConfig, state S885");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S886\'");
            int temp252 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker316)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker317)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker318)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker319)));
            if ((temp252 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label172;
            }
            if ((temp252 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label172;
            }
            if ((temp252 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label172;
            }
            if ((temp252 == 3)) {
                this.Manager.Comment("reaching state \'S887\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S888\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S889\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S890\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S891\'");
                int temp251 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS884CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS884CreateResponseChecker1)));
                if ((temp251 == 0)) {
                    ReplayCreateNormalHandleTestCaseS839();
                    goto label171;
                }
                if ((temp251 == 1)) {
                    ReplayCreateNormalHandleTestCaseS839();
                    goto label171;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS884CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS884CreateResponseChecker1)));
            label171:
;
                goto label172;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S886\'.");
        label172:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker316() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker317() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker318() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker319() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS884CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S891");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS884CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S891");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S891");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S892
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS892() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS892");
            this.Manager.Comment("reaching state \'S892\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp253;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp253);
            this.Manager.Comment("reaching state \'S893\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp253, "c of ReadConfig, state S893");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S894\'");
            int temp255 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker320)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker321)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker322)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker323)));
            if ((temp255 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label174;
            }
            if ((temp255 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label174;
            }
            if ((temp255 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label174;
            }
            if ((temp255 == 3)) {
                this.Manager.Comment("reaching state \'S895\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S896\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S897\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S898\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S899\'");
                int temp254 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS892CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS892CreateResponseChecker1)));
                if ((temp254 == 0)) {
                    ReplayCreateNormalHandleTestCaseS900();
                    goto label173;
                }
                if ((temp254 == 1)) {
                    ReplayCreateNormalHandleTestCaseS900();
                    goto label173;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS892CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS892CreateResponseChecker1)));
            label173:
;
                goto label174;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S894\'.");
        label174:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker320() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker321() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker322() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker323() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS892CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S899");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S899");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S899");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x " +
                        "dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Reques" +
                        "tedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLe" +
                        "vel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Dialect is Smb302, TreeConn" +
                        "ect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_" +
                        "OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HAN" +
                        "DLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is " +
                        "DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is Op" +
                        "lockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST co" +
                        "ntinue the create process specified in the \"Open Execution\" Phase, and perform t" +
                        "he following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open" +
                        ".CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-S" +
                        "MB2] In the \"Successful Open Initialization\" phase, the server MUST set Open.IsD" +
                        "urable to TRUE. The server MUST also set Open.DurableOwner to a security descrip" +
                        "tor accessible only by the user represented by Open.Session.SecurityContext.\", \"" +
                        "[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] If the command request do" +
                        "es not include FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dia" +
                        "lect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS900() {
            this.Manager.Comment("reaching state \'S900\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS892CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S899");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S899");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S899");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x " +
                        "dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the Reques" +
                        "tedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLe" +
                        "vel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connection.Dialect is Smb302, TreeConn" +
                        "ect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_" +
                        "OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HAN" +
                        "DLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is " +
                        "DurableHandleV2Persistent\", \"[TestInfo] createRequest.requestedOplockLevel is Op" +
                        "lockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST co" +
                        "ntinue the create process specified in the \"Open Execution\" Phase, and perform t" +
                        "he following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The server MUST set Open" +
                        ".CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\", \"[MS-S" +
                        "MB2] In the \"Successful Open Initialization\" phase, the server MUST set Open.IsD" +
                        "urable to TRUE. The server MUST also set Open.DurableOwner to a security descrip" +
                        "tor accessible only by the user represented by Open.Session.SecurityContext.\", \"" +
                        "[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] If the command request do" +
                        "es not include FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dia" +
                        "lect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S901
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS901() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS901");
            this.Manager.Comment("reaching state \'S901\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp256;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp256);
            this.Manager.Comment("reaching state \'S902\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp256, "c of ReadConfig, state S902");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S903\'");
            int temp258 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker324)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker325)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker326)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker327)));
            if ((temp258 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label176;
            }
            if ((temp258 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label176;
            }
            if ((temp258 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label176;
            }
            if ((temp258 == 3)) {
                this.Manager.Comment("reaching state \'S904\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S905\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S906\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,ReconnectMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S907\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S908\'");
                int temp257 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS901CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS901CreateResponseChecker1)));
                if ((temp257 == 0)) {
                    this.Manager.Comment("reaching state \'S909\'");
                    goto label175;
                }
                if ((temp257 == 1)) {
                    this.Manager.Comment("reaching state \'S910\'");
                    goto label175;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS901CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS901CreateResponseChecker1)));
            label175:
;
                goto label176;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S903\'.");
        label176:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker324() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker325() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker326() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker327() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS901CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S908");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S908");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\", \"[" +
                        "MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the F" +
                        "lags field of this create context, if RequestedOplockLevel in the create request" +
                        " is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not inclu" +
                        "de a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context wi" +
                        "th a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST i" +
                        "gnore this create context and skip this section\", \"[TestTag] Compatibility\", \"[T" +
                        "estInfo] If the command request does not include FileId, this section MUST be sk" +
                        "ipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS901CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S908");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S908");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is ReconnectMainChannel\", \"[TestTag] C" +
                        "ompatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_RE" +
                        "QUEST_V2 Create Context\", \"[TestInfo] createRequest.modelDurableHandle is Durabl" +
                        "eHandleV2\", \"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\", \"[" +
                        "MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the F" +
                        "lags field of this create context, if RequestedOplockLevel in the create request" +
                        " is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not inclu" +
                        "de a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context wi" +
                        "th a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST i" +
                        "gnore this create context and skip this section\", \"[TestTag] Compatibility\", \"[T" +
                        "estInfo] If the command request does not include FileId, this section MUST be sk" +
                        "ipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S911
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS911() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS911");
            this.Manager.Comment("reaching state \'S911\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp259;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp259);
            this.Manager.Comment("reaching state \'S912\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp259, "c of ReadConfig, state S912");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S913\'");
            int temp261 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker328)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker329)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker330)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker331)));
            if ((temp261 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label178;
            }
            if ((temp261 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label178;
            }
            if ((temp261 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label178;
            }
            if ((temp261 == 3)) {
                this.Manager.Comment("reaching state \'S914\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S915\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S916\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S917\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S918\'");
                int temp260 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS911CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS911CreateResponseChecker1)));
                if ((temp260 == 0)) {
                    ReplayCreateNormalHandleTestCaseS839();
                    goto label177;
                }
                if ((temp260 == 1)) {
                    ReplayCreateNormalHandleTestCaseS839();
                    goto label177;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS911CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS911CreateResponseChecker1)));
            label177:
;
                goto label178;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S913\'.");
        label178:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker328() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker329() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker330() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker331() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS911CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S918");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S918");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S918");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS911CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S918");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S918");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S918");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S919
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS919() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS919");
            this.Manager.Comment("reaching state \'S919\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp262;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp262);
            this.Manager.Comment("reaching state \'S920\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp262, "c of ReadConfig, state S920");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S921\'");
            int temp264 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker332)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker333)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker334)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker335)));
            if ((temp264 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label180;
            }
            if ((temp264 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label180;
            }
            if ((temp264 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label180;
            }
            if ((temp264 == 3)) {
                this.Manager.Comment("reaching state \'S922\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S923\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S924\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Comment("reaching state \'S925\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S926\'");
                int temp263 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS919CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS919CreateResponseChecker1)));
                if ((temp263 == 0)) {
                    ReplayCreateNormalHandleTestCaseS839();
                    goto label179;
                }
                if ((temp263 == 1)) {
                    ReplayCreateNormalHandleTestCaseS839();
                    goto label179;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS919CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS919CreateResponseChecker1)));
            label179:
;
                goto label180;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S921\'.");
        label180:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker332() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker333() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker334() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker335() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS919CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S926");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S926");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S926");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS919CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S926");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S926");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S926");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S927
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS927() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS927");
            this.Manager.Comment("reaching state \'S927\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp265;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp265);
            this.Manager.Comment("reaching state \'S928\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp265, "c of ReadConfig, state S928");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S929\'");
            int temp267 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker336)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker337)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker338)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker339)));
            if ((temp267 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label182;
            }
            if ((temp267 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label182;
            }
            if ((temp267 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label182;
            }
            if ((temp267 == 3)) {
                this.Manager.Comment("reaching state \'S930\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S931\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S932\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S933\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S934\'");
                int temp266 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS927CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS927CreateResponseChecker1)));
                if ((temp266 == 0)) {
                    ReplayCreateNormalHandleTestCaseS786();
                    goto label181;
                }
                if ((temp266 == 1)) {
                    ReplayCreateNormalHandleTestCaseS786();
                    goto label181;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS927CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS927CreateResponseChecker1)));
            label181:
;
                goto label182;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S929\'.");
        label182:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker336() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker337() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker338() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker339() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS927CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S934");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S934");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S934");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS927CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S934");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S934");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S934");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S935
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS935() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS935");
            this.Manager.Comment("reaching state \'S935\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp268;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp268);
            this.Manager.Comment("reaching state \'S936\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp268, "c of ReadConfig, state S936");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S937\'");
            int temp270 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker340)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker341)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker342)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker343)));
            if ((temp270 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label184;
            }
            if ((temp270 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label184;
            }
            if ((temp270 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label184;
            }
            if ((temp270 == 3)) {
                this.Manager.Comment("reaching state \'S938\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S939\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S940\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S941\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S942\'");
                int temp269 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS935CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS935CreateResponseChecker1)));
                if ((temp269 == 0)) {
                    ReplayCreateNormalHandleTestCaseS943();
                    goto label183;
                }
                if ((temp269 == 1)) {
                    ReplayCreateNormalHandleTestCaseS943();
                    goto label183;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS935CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS935CreateResponseChecker1)));
            label183:
;
                goto label184;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S937\'.");
        label184:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker340() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker341() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker342() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker343() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS935CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S942");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S942");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLeve" +
                        "l is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTEN" +
                        "T bit is not set in the Flags field of this create context, if RequestedOplockLe" +
                        "vel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the crea" +
                        "te request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_L" +
                        "EASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_C" +
                        "ACHING, the server MUST ignore this create context and skip this section\", \"[Tes" +
                        "tTag] Compatibility\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, reque" +
                        "st command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS943() {
            this.Manager.Comment("reaching state \'S943\'");
        }
        
        private void ReplayCreateNormalHandleTestCaseS935CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S942");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S942");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S942");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[TestInfo] When switchChannelType " +
                        "== AlternativeChannelWithDisconnectMainChannel or switchChannelType == Reconnect" +
                        "MainChannel (i.e. experiencing connection drop), the server will send oplock/lea" +
                        "se break notification to the client, but currently test cases do not send acknow" +
                        "ledgement request, so the oplock break acknowledgment timer always expires.\", \"[" +
                        "TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMai" +
                        "nChannel\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_C" +
                        "REATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest.model" +
                        "DurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplockLeve" +
                        "l is OplockLevelNone\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTEN" +
                        "T bit is not set in the Flags field of this create context, if RequestedOplockLe" +
                        "vel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the crea" +
                        "te request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_L" +
                        "EASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_C" +
                        "ACHING, the server MUST ignore this create context and skip this section\", \"[Tes" +
                        "tTag] Compatibility\", \"[TestInfo] If the command request does not include FileId" +
                        ", this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, reque" +
                        "st command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S944
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS944() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS944");
            this.Manager.Comment("reaching state \'S944\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp271;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp271);
            this.Manager.Comment("reaching state \'S945\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp271, "c of ReadConfig, state S945");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S946\'");
            int temp273 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker344)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker345)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker346)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker347)));
            if ((temp273 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label186;
            }
            if ((temp273 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label186;
            }
            if ((temp273 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label186;
            }
            if ((temp273 == 3)) {
                this.Manager.Comment("reaching state \'S947\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S948\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S949\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelII,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S950\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S951\'");
                int temp272 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS944CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS944CreateResponseChecker1)));
                if ((temp272 == 0)) {
                    ReplayCreateNormalHandleTestCaseS900();
                    goto label185;
                }
                if ((temp272 == 1)) {
                    ReplayCreateNormalHandleTestCaseS900();
                    goto label185;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS944CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS944CreateResponseChecker1)));
            label185:
;
                goto label186;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S946\'.");
        label186:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker344() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker345() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker346() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker347() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS944CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S951");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S951");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S951");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loc" +
                        "ate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in " +
                        "the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid ma" +
                        "tches the ClientGuid of the connection that received this request\", \"[TestInfo] " +
                        "Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Op" +
                        "en is not found, the server MUST continue the create process specified in the \"O" +
                        "pen Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3" +
                        ".3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_" +
                        "DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" " +
                        "phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open" +
                        ".DurableOwner to a security descriptor accessible only by the user represented b" +
                        "y Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[" +
                        "TestInfo] If the command request does not include FileId, this section MUST be s" +
                        "kipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS944CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S951");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S951");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S951");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: The server MUST loc" +
                        "ate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in " +
                        "the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid ma" +
                        "tches the ClientGuid of the connection that received this request\", \"[TestInfo] " +
                        "Open is not NULL and Open could not be located\", \"[MS-SMB2] 3.3.5.9.10: If an Op" +
                        "en is not found, the server MUST continue the create process specified in the \"O" +
                        "pen Execution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3" +
                        ".3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_" +
                        "DURABLE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" " +
                        "phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open" +
                        ".DurableOwner to a security descriptor accessible only by the user represented b" +
                        "y Open.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[" +
                        "TestInfo] If the command request does not include FileId, this section MUST be s" +
                        "kipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST locate the Open in GlobalOpenTable where Open.CreateGuid matches the CreateGuid in the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 create context, and Open.ClientGuid matches the ClientGuid of the connection that received this request""");
            this.Manager.Checkpoint("\"[TestInfo] Open is not NULL and Open could not be located\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S952
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS952() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS952");
            this.Manager.Comment("reaching state \'S952\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp274;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp274);
            this.Manager.Comment("reaching state \'S953\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp274, "c of ReadConfig, state S953");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S954\'");
            int temp276 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker348)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker349)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker350)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker351)));
            if ((temp276 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label188;
            }
            if ((temp276 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label188;
            }
            if ((temp276 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label188;
            }
            if ((temp276 == 3)) {
                this.Manager.Comment("reaching state \'S955\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S956\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S957\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S958\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S959\'");
                int temp275 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS952CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS952CreateResponseChecker1)));
                if ((temp275 == 0)) {
                    ReplayCreateNormalHandleTestCaseS786();
                    goto label187;
                }
                if ((temp275 == 1)) {
                    ReplayCreateNormalHandleTestCaseS786();
                    goto label187;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS952CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS952CreateResponseChecker1)));
            label187:
;
                goto label188;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S954\'.");
        label188:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker348() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker349() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker350() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker351() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS952CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S959");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S959");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S959");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.D" +
                        "ialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STY" +
                        "PE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the ser" +
                        "ver MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the" +
                        " RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handli" +
                        "ng the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] create" +
                        "Request.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.reques" +
                        "tedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLA" +
                        "G_PERSISTENT bit is not set in the Flags field of this create context, if Reques" +
                        "tedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and " +
                        "if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREAT" +
                        "E_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEA" +
                        "SE_HANDLE_CACHING, the server MUST ignore this create context and skip this sect" +
                        "ion\", \"[TestTag] Compatibility\", \"[TestInfo] If the command request does not inc" +
                        "lude FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Sm" +
                        "b302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS952CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S959");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S959");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S959");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.D" +
                        "ialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STY" +
                        "PE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the ser" +
                        "ver MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the" +
                        " RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handli" +
                        "ng the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] create" +
                        "Request.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.reques" +
                        "tedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLA" +
                        "G_PERSISTENT bit is not set in the Flags field of this create context, if Reques" +
                        "tedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and " +
                        "if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREAT" +
                        "E_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEA" +
                        "SE_HANDLE_CACHING, the server MUST ignore this create context and skip this sect" +
                        "ion\", \"[TestTag] Compatibility\", \"[TestInfo] If the command request does not inc" +
                        "lude FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Sm" +
                        "b302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S960
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS960() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS960");
            this.Manager.Comment("reaching state \'S960\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp277;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp277);
            this.Manager.Comment("reaching state \'S961\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp277, "c of ReadConfig, state S961");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S962\'");
            int temp279 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker352)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker353)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker354)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker355)));
            if ((temp279 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label190;
            }
            if ((temp279 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label190;
            }
            if ((temp279 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label190;
            }
            if ((temp279 == 3)) {
                this.Manager.Comment("reaching state \'S963\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S964\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S965\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,AlternativeFileName,AlternativeCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S966\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S967\'");
                int temp278 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS960CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS960CreateResponseChecker1)));
                if ((temp278 == 0)) {
                    ReplayCreateNormalHandleTestCaseS804();
                    goto label189;
                }
                if ((temp278 == 1)) {
                    ReplayCreateNormalHandleTestCaseS804();
                    goto label189;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS960CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS960CreateResponseChecker1)));
            label189:
;
                goto label190;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S962\'.");
        label190:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker352() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker353() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker354() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker355() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS960CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S967");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S967");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S967");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS960CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S967");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S967");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S967");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S968
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS968() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS968");
            this.Manager.Comment("reaching state \'S968\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp280;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp280);
            this.Manager.Comment("reaching state \'S969\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp280, "c of ReadConfig, state S969");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S970\'");
            int temp282 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker356)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker357)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker358)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker359)));
            if ((temp282 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label192;
            }
            if ((temp282 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label192;
            }
            if ((temp282 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label192;
            }
            if ((temp282 == 3)) {
                this.Manager.Comment("reaching state \'S971\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S972\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S973\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannelWithAlternativeChannel,ChannelSequenceBoundaryValid,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S974\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S975\'");
                int temp281 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS968CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS968CreateResponseChecker1)));
                if ((temp281 == 0)) {
                    ReplayCreateNormalHandleTestCaseS786();
                    goto label191;
                }
                if ((temp281 == 1)) {
                    ReplayCreateNormalHandleTestCaseS786();
                    goto label191;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS968CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS968CreateResponseChecker1)));
            label191:
;
                goto label192;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S970\'.");
        label192:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker356() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker357() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker358() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker359() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS968CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S975");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S975");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S975");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS968CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S975");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S975");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S975");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S97
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS97() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS97");
            this.Manager.Comment("reaching state \'S97\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp283;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp283);
            this.Manager.Comment("reaching state \'S98\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp283, "c of ReadConfig, state S98");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S99\'");
            int temp285 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker360)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker361)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker362)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker363)));
            if ((temp285 == 0)) {
                this.Manager.Comment("reaching state \'S100\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithMainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S104\'");
                int temp284 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS97CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS97CreateResponseChecker1)));
                if ((temp284 == 0)) {
                    ReplayCreateNormalHandleTestCaseS105();
                    goto label193;
                }
                if ((temp284 == 1)) {
                    ReplayCreateNormalHandleTestCaseS105();
                    goto label193;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS97CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS97CreateResponseChecker1)));
            label193:
;
                goto label194;
            }
            if ((temp285 == 1)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label194;
            }
            if ((temp285 == 2)) {
                ReplayCreateNormalHandleTestCaseS41();
                goto label194;
            }
            if ((temp285 == 3)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label194;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S99\'.");
        label194:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker360() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void ReplayCreateNormalHandleTestCaseS97CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S104");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S104");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S104");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS97CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S104");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S104");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S104");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker361() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker362() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void PreConstraintChecker363() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S976
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS976() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS976");
            this.Manager.Comment("reaching state \'S976\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp286;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp286);
            this.Manager.Comment("reaching state \'S977\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp286, "c of ReadConfig, state S977");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S978\'");
            int temp288 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker364)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker365)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker366)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker367)));
            if ((temp288 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label196;
            }
            if ((temp288 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label196;
            }
            if ((temp288 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label196;
            }
            if ((temp288 == 3)) {
                this.Manager.Comment("reaching state \'S979\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S980\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S981\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateIncludeH,AlternativeFileName,AlternativeCreateGuid,AlternativeFileAttributes,AlternativeCreateDisposition,AlternativeLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(1)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S982\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S983\'");
                int temp287 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS976CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS976CreateResponseChecker1)));
                if ((temp287 == 0)) {
                    ReplayCreateNormalHandleTestCaseS821();
                    goto label195;
                }
                if ((temp287 == 1)) {
                    this.Manager.Comment("reaching state \'S984\'");
                    goto label195;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS976CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS976CreateResponseChecker1)));
            label195:
;
                goto label196;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S978\'.");
        label196:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker364() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker365() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker366() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker367() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS976CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S983");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S983");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S983");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS976CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S983");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S983");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S983");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S985
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS985() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS985");
            this.Manager.Comment("reaching state \'S985\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp289;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp289);
            this.Manager.Comment("reaching state \'S986\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp289, "c of ReadConfig, state S986");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S987\'");
            int temp291 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker368)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker369)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker370)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker371)));
            if ((temp291 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label198;
            }
            if ((temp291 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label198;
            }
            if ((temp291 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label198;
            }
            if ((temp291 == 3)) {
                this.Manager.Comment("reaching state \'S988\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S989\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S990\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,ReconnectMainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.ReconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is not to be preserved for reconnect, the server MUST clos" +
                        "e the Open as specified in section 3.3.4.17\"");
                this.Manager.Checkpoint("\"[TestInfo] Open is set to NULL\"");
                this.Manager.Comment("reaching state \'S991\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S992\'");
                int temp290 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS985CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS985CreateResponseChecker1)));
                if ((temp290 == 0)) {
                    ReplayCreateNormalHandleTestCaseS821();
                    goto label197;
                }
                if ((temp290 == 1)) {
                    ReplayCreateNormalHandleTestCaseS822();
                    goto label197;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS985CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS985CreateResponseChecker1)));
            label197:
;
                goto label198;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S987\'.");
        label198:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker368() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker369() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker370() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker371() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS985CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S992");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S992");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S992");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS985CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S992");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S992");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S992");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is ReconnectMainChannel"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is ReconnectMainChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S993
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateNormalHandleTestCaseS993() {
            this.Manager.BeginTest("ReplayCreateNormalHandleTestCaseS993");
            this.Manager.Comment("reaching state \'S993\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp292;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp292);
            this.Manager.Comment("reaching state \'S994\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp292, "c of ReadConfig, state S994");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S995\'");
            int temp294 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker372)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker373)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker374)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker375)));
            if ((temp294 == 0)) {
                ReplayCreateNormalHandleTestCaseS106();
                goto label200;
            }
            if ((temp294 == 1)) {
                ReplayCreateNormalHandleTestCaseS47();
                goto label200;
            }
            if ((temp294 == 2)) {
                ReplayCreateNormalHandleTestCaseS500();
                goto label200;
            }
            if ((temp294 == 3)) {
                this.Manager.Comment("reaching state \'S996\'");
                this.Manager.Comment("executing step \'call PrepareCreate(Smb302,ClientNotSupportPersistent,NormalHandle" +
                        ",NonCAShare,OplockLevelNone,LeaseStateIsNone)\'");
                this.IReplayAdapterInstance.PrepareCreate(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)));
                this.Manager.Comment("reaching state \'S997\'");
                this.Manager.Comment("checking step \'return PrepareCreate\'");
                this.Manager.Comment("reaching state \'S998\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,AlternativeChannelWithDisconnectMainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,AlternativeCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                        "ine whether each Open is to be preserved for reconnect. If any of the following " +
                        "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                        "nect\"");
                this.Manager.Checkpoint("\"[TestInfo] Open.OplockLevel is OplockLevelNone, Open.OplockState is not Held, Op" +
                        "en.IsDurable False\"");
                this.Manager.Checkpoint("\"[TestInfo] TD does not states the open is preserved when multi channels exist.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                        "tions:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] Set Open.Connection to NULL\"");
                this.Manager.Comment("reaching state \'S999\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1000\'");
                int temp293 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS993CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS993CreateResponseChecker1)));
                if ((temp293 == 0)) {
                    ReplayCreateNormalHandleTestCaseS943();
                    goto label199;
                }
                if ((temp293 == 1)) {
                    ReplayCreateNormalHandleTestCaseS943();
                    goto label199;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS993CreateResponseChecker)), new ExpectedEvent(ReplayCreateNormalHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateNormalHandleTestCaseS993CreateResponseChecker1)));
            label199:
;
                goto label200;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S995\'.");
        label200:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker372() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker373() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker374() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check preconstraint : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS" +
                    " == 0");
        }
        
        private void PreConstraintChecker375() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SO" +
                    "FS == 0)");
        }
        
        private void ReplayCreateNormalHandleTestCaseS993CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1000");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S1000");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateNormalHandleTestCaseS993CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1000");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S1000");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires."", ""[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMainChannel"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[TestInfo] When switchChannelType == AlternativeChannelWithDisconnectMainChannel or switchChannelType == ReconnectMainChannel (i.e. experiencing connection drop), the server will send oplock/lease break notification to the client, but currently test cases do not send acknowledgement request, so the oplock break acknowledgment timer always expires.""");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.switchChannelType is AlternativeChannelWithDisconnectMa" +
                    "inChannel\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
    }
}
