// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RequestDurableHandleV1BatchOplockTestCase : PtfTestClassBase {
        
        public RequestDurableHandleV1BatchOplockTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c);
        
        public delegate void PreConstraintDelegate1();
        
        public delegate void OpenResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig).MakeByRefType());
        
        static System.Reflection.EventInfo OpenResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter), "OpenResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter IHandleAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> c1;
        
        private IVariable<int> durableHandleResponseContext;
        
        private IVariable<int> leaseResponseContext;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<int> v2;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> v3;
        
        private IVariable<int> v4;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IHandleAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter))));
            this.Manager.Subscribe(OpenResponseInfo, this.IHandleAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("c1");
            this.durableHandleResponseContext = this.Manager.CreateVariable<int>("durableHandleResponseContext");
            this.leaseResponseContext = this.Manager.CreateVariable<int>("leaseResponseContext");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("v3");
            this.v4 = this.Manager.CreateVariable<int>("v4");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void RequestDurableHandleV1BatchOplockTestCaseS0() {
            this.Manager.BeginTest("RequestDurableHandleV1BatchOplockTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0ReadConfigChecker)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0ReadConfigChecker1)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0ReadConfigChecker2)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0ReadConfigChecker3)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S11\'");
                int temp2 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker)));
                if ((temp2 == 0)) {
                    this.Manager.Comment("reaching state \'S12\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb302,PersistentBitNotSet,NonCAShare,BatchOploc" +
                            "k,DurableV1RequestContextExist,DurableV2RequestContextNotExist,DurableV1Reconnec" +
                            "tContextExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S13\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S14\'");
                    int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker4)));
                    if ((temp1 == 0)) {
                        RequestDurableHandleV1BatchOplockTestCaseS15();
                        goto label0;
                    }
                    if ((temp1 == 1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS16();
                        goto label0;
                    }
                    if ((temp1 == 2)) {
                        RequestDurableHandleV1BatchOplockTestCaseS17();
                        goto label0;
                    }
                    if ((temp1 == 3)) {
                        RequestDurableHandleV1BatchOplockTestCaseS18();
                        goto label0;
                    }
                    if ((temp1 == 4)) {
                        RequestDurableHandleV1BatchOplockTestCaseS19();
                        goto label0;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker4)));
                label0:
;
                    goto label1;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S11\'.");
            label1:
;
                goto label6;
            }
            if ((temp7 == 1)) {
                this.Manager.Comment("reaching state \'S2\'");
                int temp4 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker1)));
                if ((temp4 == 0)) {
                    this.Manager.Comment("reaching state \'S3\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb30,PersistentBitNotSet,NonCAShare,NoOplockOrL" +
                            "ease,DurableV1RequestContextExist,DurableV2RequestContextNotExist,DurableV1Recon" +
                            "nectContextExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S4\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S5\'");
                    int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker5)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker6)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker7)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker8)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker9)));
                    if ((temp3 == 0)) {
                        this.Manager.Comment("reaching state \'S10\'");
                        goto label2;
                    }
                    if ((temp3 == 1)) {
                        this.Manager.Comment("reaching state \'S6\'");
                        goto label2;
                    }
                    if ((temp3 == 2)) {
                        this.Manager.Comment("reaching state \'S7\'");
                        goto label2;
                    }
                    if ((temp3 == 3)) {
                        this.Manager.Comment("reaching state \'S8\'");
                        goto label2;
                    }
                    if ((temp3 == 4)) {
                        this.Manager.Comment("reaching state \'S9\'");
                        goto label2;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker5)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker6)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker7)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker8)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker9)));
                label2:
;
                    goto label3;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S2\'.");
            label3:
;
                goto label6;
            }
            if ((temp7 == 2)) {
                this.Manager.Comment("reaching state \'S20\'");
                int temp6 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker2)));
                if ((temp6 == 0)) {
                    this.Manager.Comment("reaching state \'S21\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb21,PersistentBitNotSet,NonCAShare,NoOplockOrL" +
                            "ease,DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1Re" +
                            "connectContextExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S22\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S23\'");
                    int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker10)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker11)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker12)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker13)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker14)));
                    if ((temp5 == 0)) {
                        RequestDurableHandleV1BatchOplockTestCaseS24();
                        goto label4;
                    }
                    if ((temp5 == 1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS25();
                        goto label4;
                    }
                    if ((temp5 == 2)) {
                        RequestDurableHandleV1BatchOplockTestCaseS26();
                        goto label4;
                    }
                    if ((temp5 == 3)) {
                        RequestDurableHandleV1BatchOplockTestCaseS27();
                        goto label4;
                    }
                    if ((temp5 == 4)) {
                        RequestDurableHandleV1BatchOplockTestCaseS28();
                        goto label4;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker10)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker11)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker12)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker13)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker14)));
                label4:
;
                    goto label5;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S20\'.");
            label5:
;
                goto label6;
            }
            if ((temp7 == 3)) {
                RequestDurableHandleV1BatchOplockTestCaseS29();
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S14");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS15() {
            this.Manager.Comment("reaching state \'S15\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S14");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS16() {
            this.Manager.Comment("reaching state \'S16\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S14");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS17() {
            this.Manager.Comment("reaching state \'S17\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S14");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS18() {
            this.Manager.Comment("reaching state \'S18\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S14");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S14");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is NonWindows."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS19() {
            this.Manager.Comment("reaching state \'S19\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker1() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is NonWindows."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker2() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS24() {
            this.Manager.Comment("reaching state \'S24\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS26() {
            this.Manager.Comment("reaching state \'S26\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS27() {
            this.Manager.Comment("reaching state \'S27\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0OpenResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is NonWindows."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS28() {
            this.Manager.Comment("reaching state \'S28\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS29() {
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S29\'.");
        }
        #endregion
        
        #region Test Starting in S109
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void RequestDurableHandleV1BatchOplockTestCaseS109() {
            this.Manager.BeginTest("RequestDurableHandleV1BatchOplockTestCaseS109");
            this.Manager.Comment("reaching state \'S109\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp8;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp8);
            this.Manager.AddReturn(ReadConfigInfo, null, temp8);
            this.Manager.Comment("reaching state \'S110\'");
            int temp14 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109ReadConfigChecker)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109ReadConfigChecker1)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109ReadConfigChecker2)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109ReadConfigChecker3)));
            if ((temp14 == 0)) {
                this.Manager.Comment("reaching state \'S111\'");
                int temp10 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker3)));
                if ((temp10 == 0)) {
                    this.Manager.Comment("reaching state \'S112\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb21,PersistentBitNotSet,NonCAShare,BatchOplock" +
                            ",DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1Reconn" +
                            "ectContextExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S113\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S114\'");
                    int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker4)));
                    if ((temp9 == 0)) {
                        this.Manager.Comment("reaching state \'S115\'");
                        goto label7;
                    }
                    if ((temp9 == 1)) {
                        this.Manager.Comment("reaching state \'S116\'");
                        goto label7;
                    }
                    if ((temp9 == 2)) {
                        this.Manager.Comment("reaching state \'S117\'");
                        goto label7;
                    }
                    if ((temp9 == 3)) {
                        this.Manager.Comment("reaching state \'S118\'");
                        goto label7;
                    }
                    if ((temp9 == 4)) {
                        this.Manager.Comment("reaching state \'S119\'");
                        goto label7;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker4)));
                label7:
;
                    goto label8;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S111\'.");
            label8:
;
                goto label12;
            }
            if ((temp14 == 1)) {
                this.Manager.Comment("reaching state \'S120\'");
                int temp11 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker4)));
                if ((temp11 == 0)) {
                    this.Manager.Comment("reaching state \'S121\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb30,PersistentBitNotSet,NonCAShare,BatchOplock" +
                            ",DurableV1RequestContextExist,DurableV2RequestContextNotExist,DurableV1Reconnect" +
                            "ContextNotExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S122\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S123\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker5))) != -1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS108();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker5)));
                    }
                    goto label9;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S120\'.");
            label9:
;
                goto label12;
            }
            if ((temp14 == 2)) {
                RequestDurableHandleV1BatchOplockTestCaseS29();
                goto label12;
            }
            if ((temp14 == 3)) {
                RequestDurableHandleV1BatchOplockTestCaseS69();
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker3() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S114");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S114");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is NonWindows."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker4() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,SMB2_CREATE_DURABLE_HANDLE_RESPO" +
                    "NSE,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext)(1)), durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST look up an existing open in the GlobalOpenTable where Open.FileName matches the file name in the Buffer field of the request. "", ""[TestInfo] Connection.Dialect is Smb30 and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context."", ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] In the ""Response Construction"" phase, the server MUST construct an SMB2_CREATE_DURABLE_HANDLE_RESPONSE response create context"", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RESPONSE should be contained in create response""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST look up an existing open in the GlobalOpenTable where Open.FileName matches the file name in the Buffer field of the request. """);
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30 and the request does not contain SMB2_CRE" +
                    "ATE_DURABLE_HANDLE_RECONNECT or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create C" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Response Construction\" phase, the server MUST construct an SMB" +
                    "2_CREATE_DURABLE_HANDLE_RESPONSE response create context\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RESPONSE should be contained in create res" +
                    "ponse\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS108() {
            this.Manager.Comment("reaching state \'S108\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S110");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS69() {
            this.Manager.Comment("reaching state \'S69\'");
            int temp13 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker5)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S70\'");
                this.Manager.Comment("executing step \'call OpenRequest(Smb21,PersistentBitNotSet,NonCAShare,BatchOplock" +
                        ",DurableV1RequestContextExist,DurableV2RequestContextNotExist,DurableV1Reconnect" +
                        "ContextExist,DurableV2ReconnectContextNotExist)\'");
                this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("checking step \'return OpenRequest\'");
                this.Manager.Comment("reaching state \'S72\'");
                int temp12 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker6)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker7)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker8)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker9)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker10)));
                if ((temp12 == 0)) {
                    RequestDurableHandleV1BatchOplockTestCaseS24();
                    goto label10;
                }
                if ((temp12 == 1)) {
                    RequestDurableHandleV1BatchOplockTestCaseS25();
                    goto label10;
                }
                if ((temp12 == 2)) {
                    RequestDurableHandleV1BatchOplockTestCaseS26();
                    goto label10;
                }
                if ((temp12 == 3)) {
                    RequestDurableHandleV1BatchOplockTestCaseS27();
                    goto label10;
                }
                if ((temp12 == 4)) {
                    RequestDurableHandleV1BatchOplockTestCaseS28();
                    goto label10;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker6)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker7)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker8)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker9)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker10)));
            label10:
;
                goto label11;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S69\'.");
        label11:
;
        }
        
        private void PreConstraintChecker5() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S72");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S72");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S72");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S72");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS109OpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S72");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S72");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is NonWindows."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void RequestDurableHandleV1BatchOplockTestCaseS124() {
            this.Manager.BeginTest("RequestDurableHandleV1BatchOplockTestCaseS124");
            this.Manager.Comment("reaching state \'S124\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp15;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp15);
            this.Manager.AddReturn(ReadConfigInfo, null, temp15);
            this.Manager.Comment("reaching state \'S125\'");
            int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124ReadConfigChecker)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124ReadConfigChecker1)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124ReadConfigChecker2)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124ReadConfigChecker3)));
            if ((temp20 == 0)) {
                RequestDurableHandleV1BatchOplockTestCaseS29();
                goto label17;
            }
            if ((temp20 == 1)) {
                RequestDurableHandleV1BatchOplockTestCaseS42();
                goto label17;
            }
            if ((temp20 == 2)) {
                RequestDurableHandleV1BatchOplockTestCaseS69();
                goto label17;
            }
            if ((temp20 == 3)) {
                RequestDurableHandleV1BatchOplockTestCaseS89();
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S125");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S125");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS42() {
            this.Manager.Comment("reaching state \'S42\'");
            int temp17 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker6)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("executing step \'call OpenRequest(Smb21,PersistentBitNotSet,NonCAShare,BatchOplock" +
                        ",DurableV1RequestContextExist,DurableV2RequestContextNotExist,DurableV1Reconnect" +
                        "ContextExist,DurableV2ReconnectContextNotExist)\'");
                this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("checking step \'return OpenRequest\'");
                this.Manager.Comment("reaching state \'S45\'");
                int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker4)));
                if ((temp16 == 0)) {
                    RequestDurableHandleV1BatchOplockTestCaseS46();
                    goto label13;
                }
                if ((temp16 == 1)) {
                    RequestDurableHandleV1BatchOplockTestCaseS47();
                    goto label13;
                }
                if ((temp16 == 2)) {
                    RequestDurableHandleV1BatchOplockTestCaseS48();
                    goto label13;
                }
                if ((temp16 == 3)) {
                    RequestDurableHandleV1BatchOplockTestCaseS49();
                    goto label13;
                }
                if ((temp16 == 4)) {
                    RequestDurableHandleV1BatchOplockTestCaseS50();
                    goto label13;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker4)));
            label13:
;
                goto label14;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S42\'.");
        label14:
;
        }
        
        private void PreConstraintChecker6() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S45");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS46() {
            this.Manager.Comment("reaching state \'S46\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S45");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS47() {
            this.Manager.Comment("reaching state \'S47\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S45");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS48() {
            this.Manager.Comment("reaching state \'S48\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S45");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is NonWindows."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS49() {
            this.Manager.Comment("reaching state \'S49\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S45");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S45");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS50() {
            this.Manager.Comment("reaching state \'S50\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S125");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S125");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS89() {
            this.Manager.Comment("reaching state \'S89\'");
            int temp19 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker7)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("executing step \'call OpenRequest(Smb30,PersistentBitNotSet,NonCAShare,BatchOplock" +
                        ",DurableV1RequestContextExist,DurableV2RequestContextNotExist,DurableV1Reconnect" +
                        "ContextExist,DurableV2ReconnectContextNotExist)\'");
                this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("checking step \'return OpenRequest\'");
                this.Manager.Comment("reaching state \'S92\'");
                int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker5)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker6)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker7)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker8)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker9)));
                if ((temp18 == 0)) {
                    this.Manager.Comment("reaching state \'S93\'");
                    goto label15;
                }
                if ((temp18 == 1)) {
                    this.Manager.Comment("reaching state \'S94\'");
                    goto label15;
                }
                if ((temp18 == 2)) {
                    this.Manager.Comment("reaching state \'S95\'");
                    goto label15;
                }
                if ((temp18 == 3)) {
                    this.Manager.Comment("reaching state \'S96\'");
                    goto label15;
                }
                if ((temp18 == 4)) {
                    this.Manager.Comment("reaching state \'S97\'");
                    goto label15;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker5)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker6)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker7)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker8)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker9)));
            label15:
;
                goto label16;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S89\'.");
        label16:
;
        }
        
        private void PreConstraintChecker7() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS124OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S92");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECONNECT create context, the server MUST process the create context as specified in section 3.3.5.9.7 and skip this section."", ""[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included."", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is NonWindows."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the create request also includes an SMB2_CREATE_DURABLE_HANDLE_RECO" +
                    "NNECT create context, the server MUST process the create context as specified in" +
                    " section 3.3.5.9.7 and skip this section.\"");
            this.Manager.Checkpoint("\"[TestInfo] SMB2_CREATE_DURABLE_HANDLE_RECONNECT is included.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void RequestDurableHandleV1BatchOplockTestCaseS126() {
            this.Manager.BeginTest("RequestDurableHandleV1BatchOplockTestCaseS126");
            this.Manager.Comment("reaching state \'S126\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp21;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp21);
            this.Manager.AddReturn(ReadConfigInfo, null, temp21);
            this.Manager.Comment("reaching state \'S127\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS126ReadConfigChecker)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS126ReadConfigChecker1)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS126ReadConfigChecker2)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS126ReadConfigChecker3)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S128\'");
                int temp22 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker8)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S129\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb21,PersistentBitNotSet,NonCAShare,BatchOplock" +
                            ",DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1Reconn" +
                            "ectContextNotExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S130\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S131\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS126OpenResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S132\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS126OpenResponseChecker)));
                    }
                    goto label18;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S128\'.");
            label18:
;
                goto label19;
            }
            if ((temp23 == 1)) {
                RequestDurableHandleV1BatchOplockTestCaseS29();
                goto label19;
            }
            if ((temp23 == 2)) {
                RequestDurableHandleV1BatchOplockTestCaseS69();
                goto label19;
            }
            if ((temp23 == 3)) {
                RequestDurableHandleV1BatchOplockTestCaseS89();
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS126ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S127");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker8() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS126OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S131");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S131");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S131");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S131");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS126ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S127");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS126ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S127");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS126ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S127");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S133
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void RequestDurableHandleV1BatchOplockTestCaseS133() {
            this.Manager.BeginTest("RequestDurableHandleV1BatchOplockTestCaseS133");
            this.Manager.Comment("reaching state \'S133\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp24;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp24);
            this.Manager.AddReturn(ReadConfigInfo, null, temp24);
            this.Manager.Comment("reaching state \'S134\'");
            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133ReadConfigChecker)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133ReadConfigChecker1)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133ReadConfigChecker2)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133ReadConfigChecker3)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S135\'");
                int temp26 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker9)));
                if ((temp26 == 0)) {
                    this.Manager.Comment("reaching state \'S136\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb21,PersistentBitNotSet,NonCAShare,NoOplockOrL" +
                            "ease,DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1Re" +
                            "connectContextExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S137\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S138\'");
                    int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker4)));
                    if ((temp25 == 0)) {
                        RequestDurableHandleV1BatchOplockTestCaseS46();
                        goto label20;
                    }
                    if ((temp25 == 1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS47();
                        goto label20;
                    }
                    if ((temp25 == 2)) {
                        RequestDurableHandleV1BatchOplockTestCaseS48();
                        goto label20;
                    }
                    if ((temp25 == 3)) {
                        RequestDurableHandleV1BatchOplockTestCaseS49();
                        goto label20;
                    }
                    if ((temp25 == 4)) {
                        RequestDurableHandleV1BatchOplockTestCaseS50();
                        goto label20;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker4)));
                label20:
;
                    goto label21;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S135\'.");
            label21:
;
                goto label22;
            }
            if ((temp27 == 1)) {
                RequestDurableHandleV1BatchOplockTestCaseS29();
                goto label22;
            }
            if ((temp27 == 2)) {
                RequestDurableHandleV1BatchOplockTestCaseS69();
                goto label22;
            }
            if ((temp27 == 3)) {
                RequestDurableHandleV1BatchOplockTestCaseS89();
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS133ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S134");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker9() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is NonWindows."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS133OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S138");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS133ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S134");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS133ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S134");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS133ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S134");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void RequestDurableHandleV1BatchOplockTestCaseS30() {
            this.Manager.BeginTest("RequestDurableHandleV1BatchOplockTestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp28;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp28);
            this.Manager.AddReturn(ReadConfigInfo, null, temp28);
            this.Manager.Comment("reaching state \'S31\'");
            int temp31 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS30ReadConfigChecker)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS30ReadConfigChecker1)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS30ReadConfigChecker2)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS30ReadConfigChecker3)));
            if ((temp31 == 0)) {
                RequestDurableHandleV1BatchOplockTestCaseS29();
                goto label25;
            }
            if ((temp31 == 1)) {
                this.Manager.Comment("reaching state \'S32\'");
                int temp29 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker10)));
                if ((temp29 == 0)) {
                    this.Manager.Comment("reaching state \'S33\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb21,PersistentBitNotSet,NonCAShare,NoOplockOrL" +
                            "ease,DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1Re" +
                            "connectContextNotExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S34\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S35\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS30OpenResponseChecker))) != -1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS36();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS30OpenResponseChecker)));
                    }
                    goto label23;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S32\'.");
            label23:
;
                goto label25;
            }
            if ((temp31 == 2)) {
                this.Manager.Comment("reaching state \'S37\'");
                int temp30 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker11)));
                if ((temp30 == 0)) {
                    this.Manager.Comment("reaching state \'S38\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb302,PersistentBitNotSet,NonCAShare,NoOplockOr" +
                            "Lease,DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1R" +
                            "econnectContextNotExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S39\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S40\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS30OpenResponseChecker1))) != -1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS41();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS30OpenResponseChecker1)));
                    }
                    goto label24;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S37\'.");
            label24:
;
                goto label25;
            }
            if ((temp31 == 3)) {
                RequestDurableHandleV1BatchOplockTestCaseS42();
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS30ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S31");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS30ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S31");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker10() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS30OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S35");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S35");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S35");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S35");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS36() {
            this.Manager.Comment("reaching state \'S36\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS30ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S31");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker11() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS30OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S40");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S40");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S40");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S40");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST look up an existing open in the GlobalOpenTable where Open.FileName matches the file name in the Buffer field of the request. "", ""[TestInfo] Connection.Dialect is Smb302 and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST look up an existing open in the GlobalOpenTable where Open.FileName matches the file name in the Buffer field of the request. """);
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302 and the request does not contain SMB2_CR" +
                    "EATE_DURABLE_HANDLE_RECONNECT or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create " +
                    "Context.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS41() {
            this.Manager.Comment("reaching state \'S41\'");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS30ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S31");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S51
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void RequestDurableHandleV1BatchOplockTestCaseS51() {
            this.Manager.BeginTest("RequestDurableHandleV1BatchOplockTestCaseS51");
            this.Manager.Comment("reaching state \'S51\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp32;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp32);
            this.Manager.AddReturn(ReadConfigInfo, null, temp32);
            this.Manager.Comment("reaching state \'S52\'");
            int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS51ReadConfigChecker)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS51ReadConfigChecker1)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS51ReadConfigChecker2)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS51ReadConfigChecker3)));
            if ((temp35 == 0)) {
                RequestDurableHandleV1BatchOplockTestCaseS29();
                goto label28;
            }
            if ((temp35 == 1)) {
                RequestDurableHandleV1BatchOplockTestCaseS42();
                goto label28;
            }
            if ((temp35 == 2)) {
                this.Manager.Comment("reaching state \'S53\'");
                int temp33 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker12)));
                if ((temp33 == 0)) {
                    this.Manager.Comment("reaching state \'S54\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb21,PersistentBitNotSet,NonCAShare,NoOplockOrL" +
                            "ease,DurableV1RequestContextExist,DurableV2RequestContextNotExist,DurableV1Recon" +
                            "nectContextNotExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S55\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S56\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS51OpenResponseChecker))) != -1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS36();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS51OpenResponseChecker)));
                    }
                    goto label26;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S53\'.");
            label26:
;
                goto label28;
            }
            if ((temp35 == 3)) {
                this.Manager.Comment("reaching state \'S57\'");
                int temp34 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker13)));
                if ((temp34 == 0)) {
                    this.Manager.Comment("reaching state \'S58\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb21,PersistentBitNotSet,NonCAShare,NoOplockOrL" +
                            "ease,DurableV1RequestContextExist,DurableV2RequestContextNotExist,DurableV1Recon" +
                            "nectContextNotExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S59\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S60\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS51OpenResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S61\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS51OpenResponseChecker1)));
                    }
                    goto label27;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S57\'.");
            label27:
;
                goto label28;
            }
            throw new InvalidOperationException("never reached");
        label28:
;
            this.Manager.EndTest();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS51ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S52");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS51ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S52");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS51ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S52");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker12() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS51OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S56");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S56");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S56");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section."", ""[TestInfo] The create response should not contain SMB2_CREATE_DURABLE_HANDLE_RESPONSE."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponseContext.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponseContext == 1)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
            this.Manager.Checkpoint("\"[TestInfo] The create response should not contain SMB2_CREATE_DURABLE_HANDLE_RES" +
                    "PONSE.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS51ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S52");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker13() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS51OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S60");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S60");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S60");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Context"", ""[MS-SMB2] If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section."", ""[TestInfo] The create response should not contain SMB2_CREATE_DURABLE_HANDLE_RESPONSE."", ""[TestTag] UnexpectedContext""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponseContext.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponseContext == 1)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST Create Cont" +
                    "ext\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section.""");
            this.Manager.Checkpoint("\"[TestInfo] The create response should not contain SMB2_CREATE_DURABLE_HANDLE_RES" +
                    "PONSE.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedContext\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void RequestDurableHandleV1BatchOplockTestCaseS62() {
            this.Manager.BeginTest("RequestDurableHandleV1BatchOplockTestCaseS62");
            this.Manager.Comment("reaching state \'S62\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp36;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp36);
            this.Manager.AddReturn(ReadConfigInfo, null, temp36);
            this.Manager.Comment("reaching state \'S63\'");
            int temp38 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS62ReadConfigChecker)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS62ReadConfigChecker1)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS62ReadConfigChecker2)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS62ReadConfigChecker3)));
            if ((temp38 == 0)) {
                RequestDurableHandleV1BatchOplockTestCaseS29();
                goto label30;
            }
            if ((temp38 == 1)) {
                RequestDurableHandleV1BatchOplockTestCaseS42();
                goto label30;
            }
            if ((temp38 == 2)) {
                this.Manager.Comment("reaching state \'S64\'");
                int temp37 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker14)));
                if ((temp37 == 0)) {
                    this.Manager.Comment("reaching state \'S65\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb30,PersistentBitNotSet,NonCAShare,NoOplockOrL" +
                            "ease,DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1Re" +
                            "connectContextNotExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S66\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S67\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS62OpenResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S68\'");
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS62OpenResponseChecker)));
                    }
                    goto label29;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S64\'.");
            label29:
;
                goto label30;
            }
            if ((temp38 == 3)) {
                RequestDurableHandleV1BatchOplockTestCaseS69();
                goto label30;
            }
            throw new InvalidOperationException("never reached");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS62ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S63");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS62ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S63");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS62ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S63");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker14() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS62OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S67");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S67");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S67");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST look up an existing open in the GlobalOpenTable where Open.FileName matches the file name in the Buffer field of the request. "", ""[TestInfo] Connection.Dialect is Smb30 and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST look up an existing open in the GlobalOpenTable where Open.FileName matches the file name in the Buffer field of the request. """);
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30 and the request does not contain SMB2_CRE" +
                    "ATE_DURABLE_HANDLE_RECONNECT or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create C" +
                    "ontext.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS62ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S63");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S73
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void RequestDurableHandleV1BatchOplockTestCaseS73() {
            this.Manager.BeginTest("RequestDurableHandleV1BatchOplockTestCaseS73");
            this.Manager.Comment("reaching state \'S73\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp39;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp39);
            this.Manager.AddReturn(ReadConfigInfo, null, temp39);
            this.Manager.Comment("reaching state \'S74\'");
            int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73ReadConfigChecker)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73ReadConfigChecker1)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73ReadConfigChecker2)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73ReadConfigChecker3)));
            if ((temp43 == 0)) {
                RequestDurableHandleV1BatchOplockTestCaseS29();
                goto label34;
            }
            if ((temp43 == 1)) {
                RequestDurableHandleV1BatchOplockTestCaseS42();
                goto label34;
            }
            if ((temp43 == 2)) {
                this.Manager.Comment("reaching state \'S75\'");
                int temp41 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker15)));
                if ((temp41 == 0)) {
                    this.Manager.Comment("reaching state \'S76\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb21,PersistentBitNotSet,NonCAShare,BatchOplock" +
                            ",DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1Reconn" +
                            "ectContextExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S77\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S78\'");
                    int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker4)));
                    if ((temp40 == 0)) {
                        RequestDurableHandleV1BatchOplockTestCaseS24();
                        goto label31;
                    }
                    if ((temp40 == 1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS25();
                        goto label31;
                    }
                    if ((temp40 == 2)) {
                        RequestDurableHandleV1BatchOplockTestCaseS26();
                        goto label31;
                    }
                    if ((temp40 == 3)) {
                        RequestDurableHandleV1BatchOplockTestCaseS27();
                        goto label31;
                    }
                    if ((temp40 == 4)) {
                        RequestDurableHandleV1BatchOplockTestCaseS28();
                        goto label31;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker4)));
                label31:
;
                    goto label32;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S75\'.");
            label32:
;
                goto label34;
            }
            if ((temp43 == 3)) {
                this.Manager.Comment("reaching state \'S79\'");
                int temp42 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker16)));
                if ((temp42 == 0)) {
                    this.Manager.Comment("reaching state \'S80\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb302,PersistentBitNotSet,NonCAShare,BatchOploc" +
                            "k,DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1Recon" +
                            "nectContextNotExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S81\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S82\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker5))) != -1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS41();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker5)));
                    }
                    goto label33;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S79\'.");
            label33:
;
                goto label34;
            }
            throw new InvalidOperationException("never reached");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS73ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S74");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS73ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S74");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS73ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S74");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker15() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S78");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S78");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S78");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S78");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S78");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S78");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is NonWindows."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS73ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S74");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker16() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS73OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S82");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S82");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S82");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST look up an existing open in the GlobalOpenTable where Open.FileName matches the file name in the Buffer field of the request. "", ""[TestInfo] Connection.Dialect is Smb302 and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST look up an existing open in the GlobalOpenTable where Open.FileName matches the file name in the Buffer field of the request. """);
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302 and the request does not contain SMB2_CR" +
                    "EATE_DURABLE_HANDLE_RECONNECT or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create " +
                    "Context.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S83
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void RequestDurableHandleV1BatchOplockTestCaseS83() {
            this.Manager.BeginTest("RequestDurableHandleV1BatchOplockTestCaseS83");
            this.Manager.Comment("reaching state \'S83\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp44;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp44);
            this.Manager.AddReturn(ReadConfigInfo, null, temp44);
            this.Manager.Comment("reaching state \'S84\'");
            int temp46 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS83ReadConfigChecker)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS83ReadConfigChecker1)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS83ReadConfigChecker2)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS83ReadConfigChecker3)));
            if ((temp46 == 0)) {
                RequestDurableHandleV1BatchOplockTestCaseS29();
                goto label36;
            }
            if ((temp46 == 1)) {
                RequestDurableHandleV1BatchOplockTestCaseS42();
                goto label36;
            }
            if ((temp46 == 2)) {
                this.Manager.Comment("reaching state \'S85\'");
                int temp45 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker17)));
                if ((temp45 == 0)) {
                    this.Manager.Comment("reaching state \'S86\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb21,PersistentBitNotSet,NonCAShare,BatchOplock" +
                            ",DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1Reconn" +
                            "ectContextNotExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType.BatchOplock, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S87\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S88\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS83OpenResponseChecker))) != -1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS36();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS83OpenResponseChecker)));
                    }
                    goto label35;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S85\'.");
            label35:
;
                goto label36;
            }
            if ((temp46 == 3)) {
                RequestDurableHandleV1BatchOplockTestCaseS89();
                goto label36;
            }
            throw new InvalidOperationException("never reached");
        label36:
;
            this.Manager.EndTest();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS83ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S84");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS83ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S84");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS83ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S84");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PreConstraintChecker17() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS83OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S88");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S88");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S88");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S88");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS83ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S84");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        #endregion
        
        #region Test Starting in S98
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.DurableHandleV1BatchOplock)]
        public void RequestDurableHandleV1BatchOplockTestCaseS98() {
            this.Manager.BeginTest("RequestDurableHandleV1BatchOplockTestCaseS98");
            this.Manager.Comment("reaching state \'S98\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp47;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp47);
            this.Manager.AddReturn(ReadConfigInfo, null, temp47);
            this.Manager.Comment("reaching state \'S99\'");
            int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98ReadConfigChecker)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98ReadConfigChecker1)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98ReadConfigChecker2)), new ExpectedReturn(RequestDurableHandleV1BatchOplockTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98ReadConfigChecker3)));
            if ((temp51 == 0)) {
                this.Manager.Comment("reaching state \'S100\'");
                int temp49 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker18)));
                if ((temp49 == 0)) {
                    this.Manager.Comment("reaching state \'S101\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb302,PersistentBitNotSet,NonCAShare,NoOplockOr" +
                            "Lease,DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1R" +
                            "econnectContextExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S102\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S103\'");
                    int temp48 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker4)));
                    if ((temp48 == 0)) {
                        RequestDurableHandleV1BatchOplockTestCaseS15();
                        goto label37;
                    }
                    if ((temp48 == 1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS16();
                        goto label37;
                    }
                    if ((temp48 == 2)) {
                        RequestDurableHandleV1BatchOplockTestCaseS17();
                        goto label37;
                    }
                    if ((temp48 == 3)) {
                        RequestDurableHandleV1BatchOplockTestCaseS18();
                        goto label37;
                    }
                    if ((temp48 == 4)) {
                        RequestDurableHandleV1BatchOplockTestCaseS19();
                        goto label37;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker1)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker2)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker3)), new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker4)));
                label37:
;
                    goto label38;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S100\'.");
            label38:
;
                goto label40;
            }
            if ((temp51 == 1)) {
                this.Manager.Comment("reaching state \'S104\'");
                int temp50 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker19)));
                if ((temp50 == 0)) {
                    this.Manager.Comment("reaching state \'S105\'");
                    this.Manager.Comment("executing step \'call OpenRequest(Smb30,PersistentBitNotSet,NonCAShare,NoOplockOrL" +
                            "ease,DurableV1RequestContextNotExist,DurableV2RequestContextNotExist,DurableV1Re" +
                            "connectContextNotExist,DurableV2ReconnectContextNotExist)\'");
                    this.IHandleAdapterInstance.OpenRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1RequestContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2RequestContext.DurableV2RequestContextNotExist, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext.DurableV2ReconnectContextNotExist);
                    this.Manager.Comment("reaching state \'S106\'");
                    this.Manager.Comment("checking step \'return OpenRequest\'");
                    this.Manager.Comment("reaching state \'S107\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker5))) != -1)) {
                        RequestDurableHandleV1BatchOplockTestCaseS108();
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(RequestDurableHandleV1BatchOplockTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker5)));
                    }
                    goto label39;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S104\'.");
            label39:
;
                goto label40;
            }
            if ((temp51 == 2)) {
                RequestDurableHandleV1BatchOplockTestCaseS29();
                goto label40;
            }
            if ((temp51 == 3)) {
                RequestDurableHandleV1BatchOplockTestCaseS69();
                goto label40;
            }
            throw new InvalidOperationException("never reached");
        label40:
;
            this.Manager.EndTest();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS98ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S99");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker18() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2012R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is WindowsServer2008R2.\"" +
                    "");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S103");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S103");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context. "", ""[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestInfo] The open does not exist and the SUT platform is NonWindows."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.7: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Co" +
                    "ntext\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<268> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestInfo] The open does not exist and the SUT platform is NonWindows.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS98ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S99");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker19() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS98OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S107");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S107");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S107");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST look up an existing open in the GlobalOpenTable where Open.FileName matches the file name in the Buffer field of the request. "", ""[TestInfo] Connection.Dialect is Smb30 and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context.""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family and the request does not contain SMB2_CREATE_DURABLE_HANDLE_RECONNECT Create Context or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST look up an existing open in the GlobalOpenTable where Open.FileName matches the file name in the Buffer field of the request. """);
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30 and the request does not contain SMB2_CRE" +
                    "ATE_DURABLE_HANDLE_RECONNECT or SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create C" +
                    "ontext.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS98ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S99");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void RequestDurableHandleV1BatchOplockTestCaseS98ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S99");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
    }
}
