// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class OplockLeaseTestCase : PtfTestClassBase {
        
        public OplockLeaseTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void RequestLeaseDelegate1();
        
        public delegate void VerificationDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelBreakType breakType, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockType, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType grantedLeaseType);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase RequestLeaseInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.IMixedOplockLeaseAdapter), "RequestLease", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType));
        
        static System.Reflection.EventInfo VerificationInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.IMixedOplockLeaseAdapter), "Verification");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.IMixedOplockLeaseAdapter IMixedOplockLeaseAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<int> grantedOplockType;
        
        private IVariable<int> v;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMixedOplockLeaseAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.IMixedOplockLeaseAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.IMixedOplockLeaseAdapter))));
            this.Manager.Subscribe(VerificationInfo, this.IMixedOplockLeaseAdapterInstance);
            this.grantedOplockType = this.Manager.CreateVariable<int>("grantedOplockType");
            this.v = this.Manager.CreateVariable<int>("v");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS0() {
            this.Manager.BeginTest("OplockLeaseTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_II)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_RW)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType.Lease_RW);
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS5();
            this.Manager.EndTest();
        }
        
        private void OplockLeaseTestCaseS5() {
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockLeaseTestCase.RequestLeaseInfo, null, new RequestLeaseDelegate1(this.OplockLeaseTestCaseS0RequestLeaseChecker)));
            this.Manager.Comment("reaching state \'S6\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockLeaseTestCase.VerificationInfo, null, new VerificationDelegate1(this.OplockLeaseTestCaseS0VerificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S7\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockLeaseTestCase.VerificationInfo, null, new VerificationDelegate1(this.OplockLeaseTestCaseS0VerificationChecker)));
            }
        }
        
        private void OplockLeaseTestCaseS0RequestLeaseChecker() {
            this.Manager.Comment("checking step \'return RequestLease\'");
        }
        
        private void OplockLeaseTestCaseS0VerificationChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelBreakType breakType, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockType, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType grantedLeaseType) {
            this.Manager.Comment("checking step \'event Verification(NoBreak,grantedOplockType,Lease_R)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelBreakType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelBreakType)(0)), breakType, "breakType of Verification, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockType, (System.Int32)grantedOplockType, "grantedOplockType of Verification, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType)(1)), grantedLeaseType, "grantedLeaseType of Verification, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] Compatibility"", ""[TestInfo] The first client requests oplock, and oplock level is OPLOCK_LEVEL_II."", ""[TestInfo] Refer to the below matrix to check if oplock break should exist and what the granted lease state is."", ""[TestInfo] Note: the matrix is made based on Windows behavior"", ""[TestInfo] ================================================================================"", ""[TestInfo] 1st Client(Oplock)		2nd Client(Lease)	OplockBreakExist	GrantedLeaseState"", ""[TestInfo] ================================================================================"", ""[TestInfo] OPLOCK_LEVEL_II		Any Lease	No		Lease_R"", ""[TestInfo] OPLOCK_LEVEL_EXCLUSIVE	Any Lease	Yes		Lease_R"", ""[TestInfo] OPLOCK_LEVEL_BATCH	Any Lease	Yes		Lease_R"", ""[TestInfo] ================================================================================""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v, this.grantedOplockType, "v == grantedOplockType");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The first client requests oplock, and oplock level is OPLOCK_LEVEL_II" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Refer to the below matrix to check if oplock break should exist and w" +
                    "hat the granted lease state is.\"");
            this.Manager.Checkpoint("\"[TestInfo] Note: the matrix is made based on Windows behavior\"");
            this.Manager.Checkpoint("\"[TestInfo] =====================================================================" +
                    "===========\"");
            this.Manager.Checkpoint("\"[TestInfo] 1st Client(Oplock)\t\t2nd Client(Lease)\tOplockBreakExist\tGrantedLeaseSt" +
                    "ate\"");
            this.Manager.Checkpoint("\"[TestInfo] =====================================================================" +
                    "===========\"");
            this.Manager.Checkpoint("\"[TestInfo] OPLOCK_LEVEL_II\t\tAny Lease\tNo\t\tLease_R\"");
            this.Manager.Checkpoint("\"[TestInfo] OPLOCK_LEVEL_EXCLUSIVE\tAny Lease\tYes\t\tLease_R\"");
            this.Manager.Checkpoint("\"[TestInfo] OPLOCK_LEVEL_BATCH\tAny Lease\tYes\t\tLease_R\"");
            this.Manager.Checkpoint("\"[TestInfo] =====================================================================" +
                    "===========\"");
            this.Manager.Comment("Unbinding variable \'grantedOplockType\'");
            this.grantedOplockType.Unbind();
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS16() {
            this.Manager.BeginTest("OplockLeaseTestCaseS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_RWH)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType.Lease_RWH);
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS13();
            this.Manager.EndTest();
        }
        
        private void OplockLeaseTestCaseS13() {
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockLeaseTestCase.RequestLeaseInfo, null, new RequestLeaseDelegate1(this.OplockLeaseTestCaseS16RequestLeaseChecker)));
            this.Manager.Comment("reaching state \'S14\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockLeaseTestCase.VerificationInfo, null, new VerificationDelegate1(this.OplockLeaseTestCaseS16VerificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S15\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockLeaseTestCase.VerificationInfo, null, new VerificationDelegate1(this.OplockLeaseTestCaseS16VerificationChecker)));
            }
        }
        
        private void OplockLeaseTestCaseS16RequestLeaseChecker() {
            this.Manager.Comment("checking step \'return RequestLease\'");
        }
        
        private void OplockLeaseTestCaseS16VerificationChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelBreakType breakType, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockType, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType grantedLeaseType) {
            this.Manager.Comment("checking step \'event Verification(OplockBreak,grantedOplockType,Lease_R)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelBreakType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelBreakType)(1)), breakType, "breakType of Verification, state S14");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockType, (System.Int32)grantedOplockType, "grantedOplockType of Verification, state S14");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType)(1)), grantedLeaseType, "grantedLeaseType of Verification, state S14");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] Compatibility"", ""[TestInfo] The first client requests oplock, and oplock level is OPLOCK_LEVEL_EXCLUSIVE."", ""[TestInfo] Refer to the below matrix to check if oplock break should exist and what the granted lease state is."", ""[TestInfo] Note: the matrix is made based on Windows behavior"", ""[TestInfo] ================================================================================"", ""[TestInfo] 1st Client(Oplock)		2nd Client(Lease)	OplockBreakExist	GrantedLeaseState"", ""[TestInfo] ================================================================================"", ""[TestInfo] OPLOCK_LEVEL_II		Any Lease	No		Lease_R"", ""[TestInfo] OPLOCK_LEVEL_EXCLUSIVE	Any Lease	Yes		Lease_R"", ""[TestInfo] OPLOCK_LEVEL_BATCH	Any Lease	Yes		Lease_R"", ""[TestInfo] ================================================================================""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v, this.grantedOplockType, "v == grantedOplockType");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The first client requests oplock, and oplock level is OPLOCK_LEVEL_EX" +
                    "CLUSIVE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Refer to the below matrix to check if oplock break should exist and w" +
                    "hat the granted lease state is.\"");
            this.Manager.Checkpoint("\"[TestInfo] Note: the matrix is made based on Windows behavior\"");
            this.Manager.Checkpoint("\"[TestInfo] =====================================================================" +
                    "===========\"");
            this.Manager.Checkpoint("\"[TestInfo] 1st Client(Oplock)\t\t2nd Client(Lease)\tOplockBreakExist\tGrantedLeaseSt" +
                    "ate\"");
            this.Manager.Checkpoint("\"[TestInfo] =====================================================================" +
                    "===========\"");
            this.Manager.Checkpoint("\"[TestInfo] OPLOCK_LEVEL_II\t\tAny Lease\tNo\t\tLease_R\"");
            this.Manager.Checkpoint("\"[TestInfo] OPLOCK_LEVEL_EXCLUSIVE\tAny Lease\tYes\t\tLease_R\"");
            this.Manager.Checkpoint("\"[TestInfo] OPLOCK_LEVEL_BATCH\tAny Lease\tYes\t\tLease_R\"");
            this.Manager.Checkpoint("\"[TestInfo] =====================================================================" +
                    "===========\"");
            this.Manager.Comment("Unbinding variable \'grantedOplockType\'");
            this.grantedOplockType.Unbind();
            this.Manager.Comment("Unbinding variable \'v\'");
            this.v.Unbind();
        }
        #endregion
        
        #region Test Starting in S21
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS21() {
            this.Manager.BeginTest("OplockLeaseTestCaseS21");
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_R)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType)(1)));
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS13();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS26() {
            this.Manager.BeginTest("OplockLeaseTestCaseS26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_BATCH)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_RH)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType.Lease_RH);
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS31();
            this.Manager.EndTest();
        }
        
        private void OplockLeaseTestCaseS31() {
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(OplockLeaseTestCase.RequestLeaseInfo, null, new RequestLeaseDelegate1(this.OplockLeaseTestCaseS26RequestLeaseChecker)));
            this.Manager.Comment("reaching state \'S32\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(OplockLeaseTestCase.VerificationInfo, null, new VerificationDelegate1(this.OplockLeaseTestCaseS26VerificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S33\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(OplockLeaseTestCase.VerificationInfo, null, new VerificationDelegate1(this.OplockLeaseTestCaseS26VerificationChecker)));
            }
        }
        
        private void OplockLeaseTestCaseS26RequestLeaseChecker() {
            this.Manager.Comment("checking step \'return RequestLease\'");
        }
        
        private void OplockLeaseTestCaseS26VerificationChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelBreakType breakType, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values grantedOplockType, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType grantedLeaseType) {
            this.Manager.Comment("checking step \'event Verification(OplockBreak,grantedOplockType,Lease_R)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelBreakType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelBreakType)(1)), breakType, "breakType of Verification, state S32");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.grantedOplockType, (System.Int32)grantedOplockType, "grantedOplockType of Verification, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType)(1)), grantedLeaseType, "grantedLeaseType of Verification, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[TestTag] Compatibility"", ""[TestInfo] The first client requests oplock, and oplock level is OPLOCK_LEVEL_BATCH."", ""[TestInfo] Refer to the below matrix to check if oplock break should exist and what the granted lease state is."", ""[TestInfo] Note: the matrix is made based on Windows behavior"", ""[TestInfo] ================================================================================"", ""[TestInfo] 1st Client(Oplock)		2nd Client(Lease)	OplockBreakExist	GrantedLeaseState"", ""[TestInfo] ================================================================================"", ""[TestInfo] OPLOCK_LEVEL_II		Any Lease	No		Lease_R"", ""[TestInfo] OPLOCK_LEVEL_EXCLUSIVE	Any Lease	Yes		Lease_R"", ""[TestInfo] OPLOCK_LEVEL_BATCH	Any Lease	Yes		Lease_R"", ""[TestInfo] ================================================================================""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v, this.grantedOplockType, "v == grantedOplockType");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] The first client requests oplock, and oplock level is OPLOCK_LEVEL_BA" +
                    "TCH.\"");
            this.Manager.Checkpoint("\"[TestInfo] Refer to the below matrix to check if oplock break should exist and w" +
                    "hat the granted lease state is.\"");
            this.Manager.Checkpoint("\"[TestInfo] Note: the matrix is made based on Windows behavior\"");
            this.Manager.Checkpoint("\"[TestInfo] =====================================================================" +
                    "===========\"");
            this.Manager.Checkpoint("\"[TestInfo] 1st Client(Oplock)\t\t2nd Client(Lease)\tOplockBreakExist\tGrantedLeaseSt" +
                    "ate\"");
            this.Manager.Checkpoint("\"[TestInfo] =====================================================================" +
                    "===========\"");
            this.Manager.Checkpoint("\"[TestInfo] OPLOCK_LEVEL_II\t\tAny Lease\tNo\t\tLease_R\"");
            this.Manager.Checkpoint("\"[TestInfo] OPLOCK_LEVEL_EXCLUSIVE\tAny Lease\tYes\t\tLease_R\"");
            this.Manager.Checkpoint("\"[TestInfo] OPLOCK_LEVEL_BATCH\tAny Lease\tYes\t\tLease_R\"");
            this.Manager.Checkpoint("\"[TestInfo] =====================================================================" +
                    "===========\"");
            this.Manager.Comment("Unbinding variable \'grantedOplockType\'");
            this.grantedOplockType.Unbind();
            this.Manager.Comment("Unbinding variable \'v\'");
            this.v.Unbind();
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS34() {
            this.Manager.BeginTest("OplockLeaseTestCaseS34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_BATCH)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_RWH)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType.Lease_RWH);
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS31();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S39
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS39() {
            this.Manager.BeginTest("OplockLeaseTestCaseS39");
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_BATCH)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_R)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType)(1)));
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS31();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS44() {
            this.Manager.BeginTest("OplockLeaseTestCaseS44");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_II)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_RH)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType.Lease_RH);
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS5();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S49
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS49() {
            this.Manager.BeginTest("OplockLeaseTestCaseS49");
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_II)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_RWH)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType.Lease_RWH);
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS5();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS54() {
            this.Manager.BeginTest("OplockLeaseTestCaseS54");
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_II)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values)(1)));
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_R)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType)(1)));
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS5();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S59
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS59() {
            this.Manager.BeginTest("OplockLeaseTestCaseS59");
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_RW)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType.Lease_RW);
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS13();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS64() {
            this.Manager.BeginTest("OplockLeaseTestCaseS64");
            this.Manager.Comment("reaching state \'S64\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_BATCH)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_BATCH);
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S68\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_RW)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType.Lease_RW);
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS31();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.MixedOplockLease)]
        public void OplockLeaseTestCaseS8() {
            this.Manager.BeginTest("OplockLeaseTestCaseS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call Preparation()\'");
            this.IMixedOplockLeaseAdapterInstance.Preparation();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return Preparation\'");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call RequestOplock(OPLOCK_LEVEL_EXCLUSIVE)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestOplock(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.OplockLevel_Values.OPLOCK_LEVEL_EXCLUSIVE);
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return RequestOplock\'");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call RequestLease(Lease_RH)\'");
            this.IMixedOplockLeaseAdapterInstance.RequestLease(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.MixedOplockLease.ModelLeaseStateType.Lease_RH);
            this.Manager.AddReturn(RequestLeaseInfo, null);
            OplockLeaseTestCaseS13();
            this.Manager.EndTest();
        }
        #endregion
    }
}
