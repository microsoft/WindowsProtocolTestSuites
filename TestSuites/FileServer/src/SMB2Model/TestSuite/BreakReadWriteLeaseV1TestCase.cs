// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BreakReadWriteLeaseV1TestCase : PtfTestClassBase {
        
        public BreakReadWriteLeaseV1TestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c);
        
        public delegate void CreateResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c);
        
        public delegate void LeaseBreakResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState);
        
        public delegate void OnLeaseBreakNotificationDelegate1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig).MakeByRefType());
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo OnLeaseBreakNotificationInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "OnLeaseBreakNotification");
        
        static System.Reflection.EventInfo LeaseBreakResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "LeaseBreakResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter ILeasingAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> c1;
        
        private IVariable<int> leaseFlags;
        
        private IVariable<int> leaseState;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<int> v2;
        
        private IVariable<int> v3;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> v4;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ILeasingAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter))));
            this.Manager.Subscribe(CreateResponseInfo, this.ILeasingAdapterInstance);
            this.Manager.Subscribe(LeaseBreakResponseInfo, this.ILeasingAdapterInstance);
            this.Manager.Subscribe(OnLeaseBreakNotificationInfo, this.ILeasingAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("c1");
            this.leaseFlags = this.Manager.CreateVariable<int>("leaseFlags");
            this.leaseState = this.Manager.CreateVariable<int>("leaseState");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<int>("v3");
            this.v4 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("v4");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS0() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS0ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS0ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS0ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS0ReadConfigChecker3)));
            if ((temp12 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S6\'");
                int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker1)));
                if ((temp5 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS31();
                    goto label1;
                }
                if ((temp5 == 1)) {
                    this.Manager.Comment("reaching state \'S7\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp1;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp1);
                    this.Manager.Comment("reaching state \'S8\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp1, "c of FileOperationToBreakLeaseRequest, state S8");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S9\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S10\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S11\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp2;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp2);
                    this.Manager.Comment("reaching state \'S12\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp2, "c of FileOperationToBreakLeaseRequest, state S12");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS13();
                    goto label1;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker1)));
            label1:
;
                goto label5;
            }
            if ((temp12 == 1)) {
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S36\'");
                int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker3)));
                if ((temp10 == 0)) {
                    this.Manager.Comment("reaching state \'S37\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp6;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp6);
                    this.Manager.Comment("reaching state \'S38\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp6, "c of FileOperationToBreakLeaseRequest, state S38");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S39\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S40\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S41\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp7;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp7);
                    this.Manager.Comment("reaching state \'S42\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp7, "c of FileOperationToBreakLeaseRequest, state S42");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS43();
                    goto label3;
                }
                if ((temp10 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS61();
                    goto label3;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker3)));
            label3:
;
                goto label5;
            }
            if ((temp12 == 2)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label5;
            }
            if ((temp12 == 3)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS31() {
            this.Manager.Comment("reaching state \'S31\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS13() {
            this.Manager.Comment("reaching state \'S13\'");
            int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker2)));
            if ((temp4 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S16\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S17\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S18\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S19\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp3;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp3);
                    this.Manager.Comment("reaching state \'S20\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp3, "c of FileOperationToBreakLeaseRequest, state S20");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS21();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker)));
                }
                goto label0;
            }
            if ((temp4 == 1)) {
                BreakReadWriteLeaseV1TestCaseS25();
                goto label0;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker2)));
        label0:
;
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S16");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S16");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS21() {
            this.Manager.Comment("reaching state \'S21\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker1))) != -1)) {
                BreakReadWriteLeaseV1TestCaseS22();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S21");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS22() {
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S24\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S13");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S27\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S30\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S27");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S36");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S36");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S36");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS43() {
            this.Manager.Comment("reaching state \'S43\'");
            int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker5)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S45\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S46\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S47\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S48\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S49\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp8;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp8);
                    this.Manager.Comment("reaching state \'S50\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp8, "c of FileOperationToBreakLeaseRequest, state S50");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS51();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker2)));
                }
                goto label2;
            }
            if ((temp9 == 1)) {
                BreakReadWriteLeaseV1TestCaseS55();
                goto label2;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker5)));
        label2:
;
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S43");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S43");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S46");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS51() {
            this.Manager.Comment("reaching state \'S51\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker4))) != -1)) {
                BreakReadWriteLeaseV1TestCaseS52();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker4)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker4(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S51");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S51");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S51");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S51");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS52() {
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S54\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0OnLeaseBreakNotificationChecker5(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S43");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S43");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S43");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS55() {
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S57\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S60\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker3)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0LeaseBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S57");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S36");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S36");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S36");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS61() {
            this.Manager.Comment("reaching state \'S61\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS62() {
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
            this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S64\'");
            this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                    "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
            this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S66\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker4))) != -1)) {
                this.Manager.Comment("reaching state \'S67\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker4)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S66");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S66");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S66");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of CreateResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v\'");
            this.v.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS68() {
            this.Manager.Comment("reaching state \'S68\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
            this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                    "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
            this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S72\'");
            int temp11 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker5)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker6)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S73\'");
                goto label4;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S74\'");
                goto label4;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker5)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker6)));
        label4:
;
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S72");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S72");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S72");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S72");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S72");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS0CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S72");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S72");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S72");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S72");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S1006
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1006() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1006");
            this.Manager.Comment("reaching state \'S1006\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp13;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp13);
            this.Manager.AddReturn(ReadConfigInfo, null, temp13);
            this.Manager.Comment("reaching state \'S1007\'");
            int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006ReadConfigChecker3)));
            if ((temp18 == 0)) {
                this.Manager.Comment("reaching state \'S1008\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1009\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1010\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1011\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1012\'");
                int temp16 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker1)));
                if ((temp16 == 0)) {
                    this.Manager.Comment("reaching state \'S1013\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp14;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp14);
                    this.Manager.Comment("reaching state \'S1014\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp14, "c of FileOperationToBreakLeaseRequest, state S1014");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1015\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1016\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1017\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp15;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp15);
                    this.Manager.Comment("reaching state \'S1018\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp15, "c of FileOperationToBreakLeaseRequest, state S1018");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS1019();
                    goto label6;
                }
                if ((temp16 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS871();
                    goto label6;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker1)));
            label6:
;
                goto label8;
            }
            if ((temp18 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label8;
            }
            if ((temp18 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label8;
            }
            if ((temp18 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1006ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1007");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1012");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1012");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1012");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1012");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1012");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1019() {
            this.Manager.Comment("reaching state \'S1019\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006OnLeaseBreakNotificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1020\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1021\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S1022\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006LeaseBreakResponseChecker))) != -1)) {
                    BreakReadWriteLeaseV1TestCaseS862();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006LeaseBreakResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006OnLeaseBreakNotificationChecker)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1006OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1019");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1019");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1019");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1019");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1006LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1022");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S1022");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS862() {
            this.Manager.Comment("reaching state \'S862\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S863\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S864\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1012");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1012");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1012");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1012");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1012");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS871() {
            this.Manager.Comment("reaching state \'S871\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1006ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1007");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1006ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1007");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1006ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1007");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS883() {
            this.Manager.Comment("reaching state \'S883\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
            this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
            this.Manager.Comment("reaching state \'S884\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S885\'");
            this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                    "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
            this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S886\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S887\'");
            int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker3)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S888\'");
                goto label7;
            }
            if ((temp17 == 1)) {
                this.Manager.Comment("reaching state \'S889\'");
                goto label7;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker3)));
        label7:
;
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S887");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S887");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S887");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S887");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S887");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1006CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S887");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S887");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S887");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S887");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S887");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S1023
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1023() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1023");
            this.Manager.Comment("reaching state \'S1023\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp19;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp19);
            this.Manager.AddReturn(ReadConfigInfo, null, temp19);
            this.Manager.Comment("reaching state \'S1024\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1023ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1023ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1023ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1023ReadConfigChecker3)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S1025\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1026\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1027\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1028\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1029\'");
                int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1023CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1023CreateResponseChecker1)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S1030\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp20;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp20);
                    this.Manager.Comment("reaching state \'S1031\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp20, "c of FileOperationToBreakLeaseRequest, state S1031");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1032\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1033\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1034\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp21;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp21);
                    this.Manager.Comment("reaching state \'S1035\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp21, "c of FileOperationToBreakLeaseRequest, state S1035");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS1019();
                    goto label9;
                }
                if ((temp22 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS871();
                    goto label9;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1023CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1023CreateResponseChecker1)));
            label9:
;
                goto label10;
            }
            if ((temp23 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label10;
            }
            if ((temp23 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label10;
            }
            if ((temp23 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1023ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1024");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1023CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1029");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1029");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1029");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1029");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1029");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1023CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1029");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1029");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1029");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1029");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1029");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1023ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1024");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1023ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1024");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1023ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1024");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1036
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1036() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1036");
            this.Manager.Comment("reaching state \'S1036\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp24;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp24);
            this.Manager.AddReturn(ReadConfigInfo, null, temp24);
            this.Manager.Comment("reaching state \'S1037\'");
            int temp30 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036ReadConfigChecker3)));
            if ((temp30 == 0)) {
                this.Manager.Comment("reaching state \'S1038\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1039\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1040\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1041\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1042\'");
                int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036CreateResponseChecker1)));
                if ((temp29 == 0)) {
                    this.Manager.Comment("reaching state \'S1043\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp25;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp25);
                    this.Manager.Comment("reaching state \'S1044\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp25, "c of FileOperationToBreakLeaseRequest, state S1044");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1045\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1046\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1047\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp26;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientGuidDifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp26);
                    this.Manager.Comment("reaching state \'S1048\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp26, "c of FileOperationToBreakLeaseRequest, state S1048");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1049\'");
                    int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036OnLeaseBreakNotificationChecker2)));
                    if ((temp28 == 0)) {
                        this.Manager.Comment("reaching state \'S1050\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S1051\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S1052\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1053\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S1054\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S1055\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp27;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                                    ",Smb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp27);
                            this.Manager.Comment("reaching state \'S1056\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp27, "c of FileOperationToBreakLeaseRequest, state S1056");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS861();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036LeaseBreakResponseChecker)));
                        }
                        goto label11;
                    }
                    if ((temp28 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS865();
                        goto label11;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036OnLeaseBreakNotificationChecker2)));
                label11:
;
                    goto label12;
                }
                if ((temp29 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS871();
                    goto label12;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036CreateResponseChecker1)));
            label12:
;
                goto label13;
            }
            if ((temp30 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label13;
            }
            if ((temp30 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label13;
            }
            if ((temp30 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1036ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1037");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1036CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1042");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1042");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1042");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1042");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1042");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1036OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1049");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1049");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1049");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1049");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1036LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1052");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S1052");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS861() {
            this.Manager.Comment("reaching state \'S861\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036OnLeaseBreakNotificationChecker1))) != -1)) {
                BreakReadWriteLeaseV1TestCaseS862();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036OnLeaseBreakNotificationChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1036OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S861");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S861");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S861");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S861");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1036OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1049");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1049");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1049");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1049");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS865() {
            this.Manager.Comment("reaching state \'S865\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S866\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S867\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036LeaseBreakResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S868\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S869\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S870\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1036LeaseBreakResponseChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1036LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S867");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S867");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1036CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1042");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1042");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1042");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1042");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1042");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1036ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1037");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1036ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1037");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1036ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1037");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1057
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1057() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1057");
            this.Manager.Comment("reaching state \'S1057\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp31;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp31);
            this.Manager.AddReturn(ReadConfigInfo, null, temp31);
            this.Manager.Comment("reaching state \'S1058\'");
            int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057ReadConfigChecker3)));
            if ((temp37 == 0)) {
                this.Manager.Comment("reaching state \'S1059\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1060\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1061\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1062\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1063\'");
                int temp36 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057CreateResponseChecker1)));
                if ((temp36 == 0)) {
                    this.Manager.Comment("reaching state \'S1064\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp32;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp32);
                    this.Manager.Comment("reaching state \'S1065\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp32, "c of FileOperationToBreakLeaseRequest, state S1065");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1066\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1067\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1068\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp33;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp33);
                    this.Manager.Comment("reaching state \'S1069\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp33, "c of FileOperationToBreakLeaseRequest, state S1069");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1070\'");
                    int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057OnLeaseBreakNotificationChecker2)));
                    if ((temp35 == 0)) {
                        this.Manager.Comment("reaching state \'S1071\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S1072\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S1073\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1074\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S1075\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S1076\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp34;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                                    ",Smb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp34);
                            this.Manager.Comment("reaching state \'S1077\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp34, "c of FileOperationToBreakLeaseRequest, state S1077");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS1078();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057LeaseBreakResponseChecker)));
                        }
                        goto label14;
                    }
                    if ((temp35 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS1082();
                        goto label14;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057OnLeaseBreakNotificationChecker2)));
                label14:
;
                    goto label15;
                }
                if ((temp36 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS1088();
                    goto label15;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057CreateResponseChecker1)));
            label15:
;
                goto label16;
            }
            if ((temp37 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label16;
            }
            if ((temp37 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label16;
            }
            if ((temp37 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1057ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1058");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1057CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1063");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1063");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1063");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1063");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1063");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1057OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1070");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1070");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1070");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1070");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1057LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1073");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S1073");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1078() {
            this.Manager.Comment("reaching state \'S1078\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057OnLeaseBreakNotificationChecker1))) != -1)) {
                BreakReadWriteLeaseV1TestCaseS1079();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057OnLeaseBreakNotificationChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1057OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1078");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S1078");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1078");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1078");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1079() {
            this.Manager.Comment("reaching state \'S1079\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S1080\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S1081\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1057OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1070");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1070");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1070");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1070");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1082() {
            this.Manager.Comment("reaching state \'S1082\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S1083\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S1084\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057LeaseBreakResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S1085\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S1086\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S1087\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1057LeaseBreakResponseChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1057LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1084");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S1084");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1057CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1063");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1063");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1063");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1063");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1063");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1088() {
            this.Manager.Comment("reaching state \'S1088\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1057ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1058");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1057ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1058");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1057ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1058");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1089
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1089() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1089");
            this.Manager.Comment("reaching state \'S1089\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp38;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp38);
            this.Manager.AddReturn(ReadConfigInfo, null, temp38);
            this.Manager.Comment("reaching state \'S1090\'");
            int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089ReadConfigChecker3)));
            if ((temp44 == 0)) {
                this.Manager.Comment("reaching state \'S1091\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1092\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1093\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1094\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1095\'");
                int temp43 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089CreateResponseChecker1)));
                if ((temp43 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS1088();
                    goto label18;
                }
                if ((temp43 == 1)) {
                    this.Manager.Comment("reaching state \'S1096\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp39;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp39);
                    this.Manager.Comment("reaching state \'S1097\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp39, "c of FileOperationToBreakLeaseRequest, state S1097");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1098\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1099\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1100\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp40;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp40);
                    this.Manager.Comment("reaching state \'S1101\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp40, "c of FileOperationToBreakLeaseRequest, state S1101");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1102\'");
                    int temp42 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089OnLeaseBreakNotificationChecker1)));
                    if ((temp42 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS1082();
                        goto label17;
                    }
                    if ((temp42 == 1)) {
                        this.Manager.Comment("reaching state \'S1103\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S1104\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S1105\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1106\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S1107\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S1108\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp41;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp41);
                            this.Manager.Comment("reaching state \'S1109\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp41, "c of FileOperationToBreakLeaseRequest, state S1109");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS1078();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089LeaseBreakResponseChecker)));
                        }
                        goto label17;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089OnLeaseBreakNotificationChecker1)));
                label17:
;
                    goto label18;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1089CreateResponseChecker1)));
            label18:
;
                goto label19;
            }
            if ((temp44 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label19;
            }
            if ((temp44 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label19;
            }
            if ((temp44 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1089ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1090");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1089CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1095");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1095");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1095");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1095");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1095");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1089CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1095");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1095");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1095");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1095");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1095");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1089OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1102");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1102");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1102");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1102");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1089OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1102");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1102");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1102");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1102");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1089LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1105");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S1105");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1089ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1090");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1089ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1090");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1089ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1090");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1110() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1110");
            this.Manager.Comment("reaching state \'S1110\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp45;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp45);
            this.Manager.AddReturn(ReadConfigInfo, null, temp45);
            this.Manager.Comment("reaching state \'S1111\'");
            int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110ReadConfigChecker3)));
            if ((temp51 == 0)) {
                this.Manager.Comment("reaching state \'S1112\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1113\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1114\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1115\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1116\'");
                int temp50 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110CreateResponseChecker1)));
                if ((temp50 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS1088();
                    goto label21;
                }
                if ((temp50 == 1)) {
                    this.Manager.Comment("reaching state \'S1117\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp46;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp46);
                    this.Manager.Comment("reaching state \'S1118\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp46, "c of FileOperationToBreakLeaseRequest, state S1118");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1119\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1120\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1121\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp47;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp47);
                    this.Manager.Comment("reaching state \'S1122\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp47, "c of FileOperationToBreakLeaseRequest, state S1122");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1123\'");
                    int temp49 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110OnLeaseBreakNotificationChecker1)));
                    if ((temp49 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS1082();
                        goto label20;
                    }
                    if ((temp49 == 1)) {
                        this.Manager.Comment("reaching state \'S1124\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S1125\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S1126\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1127\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S1128\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S1129\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp48;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                                    "mb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp48);
                            this.Manager.Comment("reaching state \'S1130\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp48, "c of FileOperationToBreakLeaseRequest, state S1130");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS1078();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110LeaseBreakResponseChecker)));
                        }
                        goto label20;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110OnLeaseBreakNotificationChecker1)));
                label20:
;
                    goto label21;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1110CreateResponseChecker1)));
            label21:
;
                goto label22;
            }
            if ((temp51 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label22;
            }
            if ((temp51 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label22;
            }
            if ((temp51 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1110ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1111");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1110CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1116");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1116");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1110CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1116");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1116");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1116");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1110OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1123");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1123");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1110OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1123");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1123");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1123");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1110LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1126");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S1126");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1110ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1111");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1110ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1111");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1110ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1111");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1131
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1131() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1131");
            this.Manager.Comment("reaching state \'S1131\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp52;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp52);
            this.Manager.AddReturn(ReadConfigInfo, null, temp52);
            this.Manager.Comment("reaching state \'S1132\'");
            int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131ReadConfigChecker3)));
            if ((temp58 == 0)) {
                this.Manager.Comment("reaching state \'S1133\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1134\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1135\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1136\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1137\'");
                int temp57 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131CreateResponseChecker1)));
                if ((temp57 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS1088();
                    goto label24;
                }
                if ((temp57 == 1)) {
                    this.Manager.Comment("reaching state \'S1138\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp53;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp53);
                    this.Manager.Comment("reaching state \'S1139\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp53, "c of FileOperationToBreakLeaseRequest, state S1139");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1140\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1141\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1142\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp54;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp54);
                    this.Manager.Comment("reaching state \'S1143\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp54, "c of FileOperationToBreakLeaseRequest, state S1143");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1144\'");
                    int temp56 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131OnLeaseBreakNotificationChecker1)));
                    if ((temp56 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS1082();
                        goto label23;
                    }
                    if ((temp56 == 1)) {
                        this.Manager.Comment("reaching state \'S1145\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S1146\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S1147\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1148\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S1149\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S1150\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp55;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp55);
                            this.Manager.Comment("reaching state \'S1151\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp55, "c of FileOperationToBreakLeaseRequest, state S1151");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS1078();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131LeaseBreakResponseChecker)));
                        }
                        goto label23;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131OnLeaseBreakNotificationChecker1)));
                label23:
;
                    goto label24;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1131CreateResponseChecker1)));
            label24:
;
                goto label25;
            }
            if ((temp58 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label25;
            }
            if ((temp58 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label25;
            }
            if ((temp58 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1131ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1132");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1131CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1137");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1137");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1137");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1131CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1137");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1137");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1137");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1131OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1144");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1144");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1131OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1144");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1144");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1131LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1147");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S1147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1131ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1132");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1131ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1132");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1131ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1132");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S115
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS115() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS115");
            this.Manager.Comment("reaching state \'S115\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp59;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp59);
            this.Manager.AddReturn(ReadConfigInfo, null, temp59);
            this.Manager.Comment("reaching state \'S116\'");
            int temp70 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS115ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS115ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS115ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS115ReadConfigChecker3)));
            if ((temp70 == 0)) {
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S120\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S121\'");
                int temp64 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker1)));
                if ((temp64 == 0)) {
                    this.Manager.Comment("reaching state \'S122\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp60;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp60);
                    this.Manager.Comment("reaching state \'S123\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp60, "c of FileOperationToBreakLeaseRequest, state S123");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S124\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S125\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S126\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp61;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp61);
                    this.Manager.Comment("reaching state \'S127\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp61, "c of FileOperationToBreakLeaseRequest, state S127");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S128\'");
                    int temp63 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker1)));
                    if ((temp63 == 0)) {
                        this.Manager.Comment("reaching state \'S129\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S130\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S131\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S132\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S133\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S134\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp62;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp62);
                            this.Manager.Comment("reaching state \'S135\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp62, "c of FileOperationToBreakLeaseRequest, state S135");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS51();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115LeaseBreakResponseChecker)));
                        }
                        goto label26;
                    }
                    if ((temp63 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS55();
                        goto label26;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker1)));
                label26:
;
                    goto label27;
                }
                if ((temp64 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS61();
                    goto label27;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker1)));
            label27:
;
                goto label30;
            }
            if ((temp70 == 1)) {
                this.Manager.Comment("reaching state \'S136\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S140\'");
                int temp69 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker3)));
                if ((temp69 == 0)) {
                    this.Manager.Comment("reaching state \'S141\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp65;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp65);
                    this.Manager.Comment("reaching state \'S142\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp65, "c of FileOperationToBreakLeaseRequest, state S142");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S143\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S144\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S145\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp66;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp66);
                    this.Manager.Comment("reaching state \'S146\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp66, "c of FileOperationToBreakLeaseRequest, state S146");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S147\'");
                    int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker3)));
                    if ((temp68 == 0)) {
                        this.Manager.Comment("reaching state \'S148\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S149\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S150\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S151\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S152\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S153\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp67;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp67);
                            this.Manager.Comment("reaching state \'S154\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp67, "c of FileOperationToBreakLeaseRequest, state S154");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS21();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115LeaseBreakResponseChecker1)));
                        }
                        goto label28;
                    }
                    if ((temp68 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS25();
                        goto label28;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker3)));
                label28:
;
                    goto label29;
                }
                if ((temp69 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS31();
                    goto label29;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker3)));
            label29:
;
                goto label30;
            }
            if ((temp70 == 2)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label30;
            }
            if ((temp70 == 3)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label30;
            }
            throw new InvalidOperationException("never reached");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S116");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S121");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S121");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S121");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S128");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S128");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S128");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S131");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S128");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S128");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S128");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S121");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S121");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S121");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S121");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S121");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S116");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S140");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S140");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S147");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S147");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S150");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S147");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S147");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S140");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S140");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S140");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S116");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS115ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S116");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S1152
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1152() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1152");
            this.Manager.Comment("reaching state \'S1152\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp71;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp71);
            this.Manager.AddReturn(ReadConfigInfo, null, temp71);
            this.Manager.Comment("reaching state \'S1153\'");
            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152ReadConfigChecker3)));
            if ((temp77 == 0)) {
                this.Manager.Comment("reaching state \'S1154\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1155\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1156\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1157\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1158\'");
                int temp76 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152CreateResponseChecker1)));
                if ((temp76 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS1088();
                    goto label32;
                }
                if ((temp76 == 1)) {
                    this.Manager.Comment("reaching state \'S1159\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp72;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp72);
                    this.Manager.Comment("reaching state \'S1160\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp72, "c of FileOperationToBreakLeaseRequest, state S1160");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1161\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1162\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1163\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp73;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp73);
                    this.Manager.Comment("reaching state \'S1164\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp73, "c of FileOperationToBreakLeaseRequest, state S1164");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1165\'");
                    int temp75 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152OnLeaseBreakNotificationChecker1)));
                    if ((temp75 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS1082();
                        goto label31;
                    }
                    if ((temp75 == 1)) {
                        this.Manager.Comment("reaching state \'S1166\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S1167\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S1168\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1169\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S1170\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S1171\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp74;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb30,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp74);
                            this.Manager.Comment("reaching state \'S1172\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp74, "c of FileOperationToBreakLeaseRequest, state S1172");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS1078();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152LeaseBreakResponseChecker)));
                        }
                        goto label31;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152OnLeaseBreakNotificationChecker1)));
                label31:
;
                    goto label32;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1152CreateResponseChecker1)));
            label32:
;
                goto label33;
            }
            if ((temp77 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label33;
            }
            if ((temp77 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label33;
            }
            if ((temp77 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1152ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1153");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1152CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1158");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1158");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1158");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1158");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1152CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1158");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1158");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1158");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1158");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1152OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1165");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1165");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1165");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1165");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1152OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1165");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1165");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1165");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1165");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1152LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1168");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S1168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1152ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1153");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1152ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1153");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1152ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1153");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1173
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1173() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1173");
            this.Manager.Comment("reaching state \'S1173\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp78;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp78);
            this.Manager.AddReturn(ReadConfigInfo, null, temp78);
            this.Manager.Comment("reaching state \'S1174\'");
            int temp84 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173ReadConfigChecker3)));
            if ((temp84 == 0)) {
                this.Manager.Comment("reaching state \'S1175\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1176\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1177\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1178\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1179\'");
                int temp83 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173CreateResponseChecker1)));
                if ((temp83 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS1088();
                    goto label35;
                }
                if ((temp83 == 1)) {
                    this.Manager.Comment("reaching state \'S1180\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp79;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp79);
                    this.Manager.Comment("reaching state \'S1181\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp79, "c of FileOperationToBreakLeaseRequest, state S1181");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1182\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1183\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1184\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp80;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp80);
                    this.Manager.Comment("reaching state \'S1185\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp80, "c of FileOperationToBreakLeaseRequest, state S1185");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1186\'");
                    int temp82 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173OnLeaseBreakNotificationChecker1)));
                    if ((temp82 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS1082();
                        goto label34;
                    }
                    if ((temp82 == 1)) {
                        this.Manager.Comment("reaching state \'S1187\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S1188\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S1189\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1190\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S1191\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S1192\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp81;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb30,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp81);
                            this.Manager.Comment("reaching state \'S1193\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp81, "c of FileOperationToBreakLeaseRequest, state S1193");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS1078();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173LeaseBreakResponseChecker)));
                        }
                        goto label34;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173OnLeaseBreakNotificationChecker1)));
                label34:
;
                    goto label35;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1173CreateResponseChecker1)));
            label35:
;
                goto label36;
            }
            if ((temp84 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label36;
            }
            if ((temp84 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label36;
            }
            if ((temp84 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label36;
            }
            throw new InvalidOperationException("never reached");
        label36:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1173ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1174");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1173CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1179");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1179");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1179");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1179");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1173CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1179");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1179");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1179");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1179");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1173OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1186");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1186");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1186");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1186");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1173OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1186");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1186");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1186");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1186");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1173LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1189");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S1189");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1173ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1174");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1173ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1174");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1173ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1174");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1194
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1194() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1194");
            this.Manager.Comment("reaching state \'S1194\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp85;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp85);
            this.Manager.AddReturn(ReadConfigInfo, null, temp85);
            this.Manager.Comment("reaching state \'S1195\'");
            int temp91 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194ReadConfigChecker3)));
            if ((temp91 == 0)) {
                this.Manager.Comment("reaching state \'S1196\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1197\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1198\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1199\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1200\'");
                int temp90 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194CreateResponseChecker1)));
                if ((temp90 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS1088();
                    goto label38;
                }
                if ((temp90 == 1)) {
                    this.Manager.Comment("reaching state \'S1201\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp86;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp86);
                    this.Manager.Comment("reaching state \'S1202\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp86, "c of FileOperationToBreakLeaseRequest, state S1202");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1203\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1204\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1205\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp87;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp87);
                    this.Manager.Comment("reaching state \'S1206\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp87, "c of FileOperationToBreakLeaseRequest, state S1206");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1207\'");
                    int temp89 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194OnLeaseBreakNotificationChecker1)));
                    if ((temp89 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS1082();
                        goto label37;
                    }
                    if ((temp89 == 1)) {
                        this.Manager.Comment("reaching state \'S1208\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S1209\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S1210\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1211\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S1212\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S1213\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp88;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                                    "idDifferentLeaseKey,Smb30,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp88);
                            this.Manager.Comment("reaching state \'S1214\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp88, "c of FileOperationToBreakLeaseRequest, state S1214");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS1078();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194LeaseBreakResponseChecker)));
                        }
                        goto label37;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194OnLeaseBreakNotificationChecker1)));
                label37:
;
                    goto label38;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1194CreateResponseChecker1)));
            label38:
;
                goto label39;
            }
            if ((temp91 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label39;
            }
            if ((temp91 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label39;
            }
            if ((temp91 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1194ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1195");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1194CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1200");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1194CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1200");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1200");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1200");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1194OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1194OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1207");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1194LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1210");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S1210");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1194ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1195");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1194ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1195");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1194ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1195");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1215
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1215() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1215");
            this.Manager.Comment("reaching state \'S1215\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp92;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp92);
            this.Manager.AddReturn(ReadConfigInfo, null, temp92);
            this.Manager.Comment("reaching state \'S1216\'");
            int temp96 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215ReadConfigChecker3)));
            if ((temp96 == 0)) {
                this.Manager.Comment("reaching state \'S1217\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1218\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1219\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1220\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1221\'");
                int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215CreateResponseChecker1)));
                if ((temp95 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS1088();
                    goto label40;
                }
                if ((temp95 == 1)) {
                    this.Manager.Comment("reaching state \'S1222\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp93;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp93);
                    this.Manager.Comment("reaching state \'S1223\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp93, "c of FileOperationToBreakLeaseRequest, state S1223");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1224\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1225\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1226\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp94;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp94);
                    this.Manager.Comment("reaching state \'S1227\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp94, "c of FileOperationToBreakLeaseRequest, state S1227");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS1228();
                    goto label40;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215CreateResponseChecker1)));
            label40:
;
                goto label41;
            }
            if ((temp96 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label41;
            }
            if ((temp96 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label41;
            }
            if ((temp96 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1215ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1215CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1221");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1221");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1215CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1221");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1221");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1221");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1228() {
            this.Manager.Comment("reaching state \'S1228\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215OnLeaseBreakNotificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S1229\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1230\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S1231\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215LeaseBreakResponseChecker))) != -1)) {
                    BreakReadWriteLeaseV1TestCaseS1079();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215LeaseBreakResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1215OnLeaseBreakNotificationChecker)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1215OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1228");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1228");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1228");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1228");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1215LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1231");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S1231");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1215ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1216");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1215ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1215ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1232
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1232() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1232");
            this.Manager.Comment("reaching state \'S1232\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp97;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp97);
            this.Manager.AddReturn(ReadConfigInfo, null, temp97);
            this.Manager.Comment("reaching state \'S1233\'");
            int temp101 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1232ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1232ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1232ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1232ReadConfigChecker3)));
            if ((temp101 == 0)) {
                this.Manager.Comment("reaching state \'S1234\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1235\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1236\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1237\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1238\'");
                int temp100 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1232CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1232CreateResponseChecker1)));
                if ((temp100 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS1088();
                    goto label42;
                }
                if ((temp100 == 1)) {
                    this.Manager.Comment("reaching state \'S1239\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp98;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp98);
                    this.Manager.Comment("reaching state \'S1240\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp98, "c of FileOperationToBreakLeaseRequest, state S1240");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1241\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1242\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1243\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp99;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp99);
                    this.Manager.Comment("reaching state \'S1244\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp99, "c of FileOperationToBreakLeaseRequest, state S1244");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS1228();
                    goto label42;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1232CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1232CreateResponseChecker1)));
            label42:
;
                goto label43;
            }
            if ((temp101 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label43;
            }
            if ((temp101 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label43;
            }
            if ((temp101 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1232ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1233");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1232CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1238");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1238");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1238");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1232CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1238");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1238");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1238");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1232ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1233");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1232ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1233");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1232ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1233");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1245
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1245() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1245");
            this.Manager.Comment("reaching state \'S1245\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp102;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp102);
            this.Manager.AddReturn(ReadConfigInfo, null, temp102);
            this.Manager.Comment("reaching state \'S1246\'");
            int temp108 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245ReadConfigChecker3)));
            if ((temp108 == 0)) {
                this.Manager.Comment("reaching state \'S1247\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1248\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1249\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1250\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1251\'");
                int temp107 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245CreateResponseChecker1)));
                if ((temp107 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS1088();
                    goto label45;
                }
                if ((temp107 == 1)) {
                    this.Manager.Comment("reaching state \'S1252\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp103;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp103);
                    this.Manager.Comment("reaching state \'S1253\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp103, "c of FileOperationToBreakLeaseRequest, state S1253");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1254\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1255\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1256\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp104;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp104);
                    this.Manager.Comment("reaching state \'S1257\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp104, "c of FileOperationToBreakLeaseRequest, state S1257");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS1258();
                    goto label45;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245CreateResponseChecker1)));
            label45:
;
                goto label46;
            }
            if ((temp108 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label46;
            }
            if ((temp108 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label46;
            }
            if ((temp108 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label46;
            }
            throw new InvalidOperationException("never reached");
        label46:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1245ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1246");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1245CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1251");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1251");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1251");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1245CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1251");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1251");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1251");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1258() {
            this.Manager.Comment("reaching state \'S1258\'");
            int temp106 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245OnLeaseBreakNotificationChecker1)));
            if ((temp106 == 0)) {
                BreakReadWriteLeaseV1TestCaseS1082();
                goto label44;
            }
            if ((temp106 == 1)) {
                this.Manager.Comment("reaching state \'S1259\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1260\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S1261\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1262\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1263\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1264\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp105;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp105);
                    this.Manager.Comment("reaching state \'S1265\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp105, "c of FileOperationToBreakLeaseRequest, state S1265");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS1078();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245LeaseBreakResponseChecker)));
                }
                goto label44;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1245OnLeaseBreakNotificationChecker1)));
        label44:
;
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1245OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1258");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1258");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1258");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1245OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1258");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1258");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1258");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1245LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1261");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S1261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1245ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1246");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1245ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1246");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1245ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1246");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1266
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1266() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1266");
            this.Manager.Comment("reaching state \'S1266\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp109;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp109);
            this.Manager.AddReturn(ReadConfigInfo, null, temp109);
            this.Manager.Comment("reaching state \'S1267\'");
            int temp111 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1266ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1266ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1266ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1266ReadConfigChecker3)));
            if ((temp111 == 0)) {
                BreakReadWriteLeaseV1TestCaseS497();
                goto label48;
            }
            if ((temp111 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label48;
            }
            if ((temp111 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label48;
            }
            if ((temp111 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label48;
            }
            throw new InvalidOperationException("never reached");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1266ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1267");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS497() {
            this.Manager.Comment("reaching state \'S497\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
            this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
            this.Manager.Comment("reaching state \'S498\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S499\'");
            this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                    "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
            this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S500\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S501\'");
            int temp110 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1266CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1266CreateResponseChecker1)));
            if ((temp110 == 0)) {
                this.Manager.Comment("reaching state \'S502\'");
                goto label47;
            }
            if ((temp110 == 1)) {
                this.Manager.Comment("reaching state \'S503\'");
                goto label47;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1266CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1266CreateResponseChecker1)));
        label47:
;
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1266CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S501");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S501");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S501");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S501");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S501");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1266CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S501");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S501");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1266ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1267");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1266ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1267");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1266ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1267");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1268
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1268() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1268");
            this.Manager.Comment("reaching state \'S1268\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp112;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp112);
            this.Manager.AddReturn(ReadConfigInfo, null, temp112);
            this.Manager.Comment("reaching state \'S1269\'");
            int temp118 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268ReadConfigChecker3)));
            if ((temp118 == 0)) {
                this.Manager.Comment("reaching state \'S1270\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1271\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1272\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1273\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1274\'");
                int temp117 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268CreateResponseChecker1)));
                if ((temp117 == 0)) {
                    this.Manager.Comment("reaching state \'S1275\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp113;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp113);
                    this.Manager.Comment("reaching state \'S1276\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp113, "c of FileOperationToBreakLeaseRequest, state S1276");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1277\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1278\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1279\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp114;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp114);
                    this.Manager.Comment("reaching state \'S1280\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp114, "c of FileOperationToBreakLeaseRequest, state S1280");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1281\'");
                    int temp116 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268OnLeaseBreakNotificationChecker1)));
                    if ((temp116 == 0)) {
                        this.Manager.Comment("reaching state \'S1282\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S1283\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S1284\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1285\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S1286\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S1287\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp115;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                                    "DifferentLeaseKey,Smb21,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp115);
                            this.Manager.Comment("reaching state \'S1288\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp115, "c of FileOperationToBreakLeaseRequest, state S1288");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS861();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268LeaseBreakResponseChecker)));
                        }
                        goto label49;
                    }
                    if ((temp116 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS865();
                        goto label49;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268OnLeaseBreakNotificationChecker1)));
                label49:
;
                    goto label50;
                }
                if ((temp117 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS871();
                    goto label50;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1268CreateResponseChecker1)));
            label50:
;
                goto label51;
            }
            if ((temp118 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label51;
            }
            if ((temp118 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label51;
            }
            if ((temp118 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1268ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1269");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1268CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1274");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1274");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1268OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1281");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1281");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1281");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1268LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1284");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S1284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1268OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S1281");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S1281");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S1281");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S1281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1268CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1274");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1274");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1274");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1268ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1269");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1268ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1269");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1268ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1269");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S1289
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS1289() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS1289");
            this.Manager.Comment("reaching state \'S1289\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp119;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp119);
            this.Manager.AddReturn(ReadConfigInfo, null, temp119);
            this.Manager.Comment("reaching state \'S1290\'");
            int temp123 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1289ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1289ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1289ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS1289ReadConfigChecker3)));
            if ((temp123 == 0)) {
                this.Manager.Comment("reaching state \'S1291\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S1292\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S1293\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S1294\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S1295\'");
                int temp122 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1289CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1289CreateResponseChecker1)));
                if ((temp122 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS1088();
                    goto label52;
                }
                if ((temp122 == 1)) {
                    this.Manager.Comment("reaching state \'S1296\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp120;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp120);
                    this.Manager.Comment("reaching state \'S1297\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp120, "c of FileOperationToBreakLeaseRequest, state S1297");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S1298\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S1299\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S1300\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp121;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientGuidDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp121);
                    this.Manager.Comment("reaching state \'S1301\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp121, "c of FileOperationToBreakLeaseRequest, state S1301");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS1258();
                    goto label52;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1289CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS1289CreateResponseChecker1)));
            label52:
;
                goto label53;
            }
            if ((temp123 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label53;
            }
            if ((temp123 == 2)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label53;
            }
            if ((temp123 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1289ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1289CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S1295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1289CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S1295");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S1295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S1295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S1295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1289ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1290");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1289ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS1289ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1290");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S155
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS155() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS155");
            this.Manager.Comment("reaching state \'S155\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp124;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp124);
            this.Manager.AddReturn(ReadConfigInfo, null, temp124);
            this.Manager.Comment("reaching state \'S156\'");
            int temp135 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS155ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS155ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS155ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS155ReadConfigChecker3)));
            if ((temp135 == 0)) {
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S161\'");
                int temp129 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker1)));
                if ((temp129 == 0)) {
                    this.Manager.Comment("reaching state \'S162\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp125;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp125);
                    this.Manager.Comment("reaching state \'S163\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp125, "c of FileOperationToBreakLeaseRequest, state S163");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S164\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S165\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S166\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp126;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp126);
                    this.Manager.Comment("reaching state \'S167\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp126, "c of FileOperationToBreakLeaseRequest, state S167");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S168\'");
                    int temp128 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker1)));
                    if ((temp128 == 0)) {
                        this.Manager.Comment("reaching state \'S169\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S170\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S171\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S172\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S173\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S174\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp127;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                                    "mb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp127);
                            this.Manager.Comment("reaching state \'S175\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp127, "c of FileOperationToBreakLeaseRequest, state S175");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS51();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155LeaseBreakResponseChecker)));
                        }
                        goto label54;
                    }
                    if ((temp128 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS55();
                        goto label54;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker1)));
                label54:
;
                    goto label55;
                }
                if ((temp129 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS61();
                    goto label55;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker1)));
            label55:
;
                goto label58;
            }
            if ((temp135 == 1)) {
                this.Manager.Comment("reaching state \'S176\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S177\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S180\'");
                int temp134 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker3)));
                if ((temp134 == 0)) {
                    this.Manager.Comment("reaching state \'S181\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp130;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp130);
                    this.Manager.Comment("reaching state \'S182\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp130, "c of FileOperationToBreakLeaseRequest, state S182");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S183\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S184\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S185\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp131;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp131);
                    this.Manager.Comment("reaching state \'S186\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp131, "c of FileOperationToBreakLeaseRequest, state S186");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S187\'");
                    int temp133 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker3)));
                    if ((temp133 == 0)) {
                        this.Manager.Comment("reaching state \'S188\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S189\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S190\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S191\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S192\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S193\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp132;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                                    "mb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp132);
                            this.Manager.Comment("reaching state \'S194\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp132, "c of FileOperationToBreakLeaseRequest, state S194");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS21();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155LeaseBreakResponseChecker1)));
                        }
                        goto label56;
                    }
                    if ((temp133 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS25();
                        goto label56;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker3)));
                label56:
;
                    goto label57;
                }
                if ((temp134 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS31();
                    goto label57;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker3)));
            label57:
;
                goto label58;
            }
            if ((temp135 == 2)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label58;
            }
            if ((temp135 == 3)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label58;
            }
            throw new InvalidOperationException("never reached");
        label58:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S156");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S161");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S161");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S161");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S168");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S168");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S171");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S168");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S168");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S161");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S161");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S161");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S161");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S156");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S180");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S180");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S180");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S180");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S187");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S187");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S187");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S187");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S190");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S190");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S187");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S187");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S187");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S187");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S180");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S180");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S180");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S180");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S156");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS155ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S156");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S195
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS195() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS195");
            this.Manager.Comment("reaching state \'S195\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp136;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp136);
            this.Manager.AddReturn(ReadConfigInfo, null, temp136);
            this.Manager.Comment("reaching state \'S196\'");
            int temp147 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS195ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS195ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS195ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS195ReadConfigChecker3)));
            if ((temp147 == 0)) {
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S201\'");
                int temp141 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker1)));
                if ((temp141 == 0)) {
                    this.Manager.Comment("reaching state \'S202\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp137;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp137);
                    this.Manager.Comment("reaching state \'S203\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp137, "c of FileOperationToBreakLeaseRequest, state S203");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S204\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S205\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S206\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp138;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp138);
                    this.Manager.Comment("reaching state \'S207\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp138, "c of FileOperationToBreakLeaseRequest, state S207");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S208\'");
                    int temp140 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker1)));
                    if ((temp140 == 0)) {
                        this.Manager.Comment("reaching state \'S209\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S210\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S211\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S212\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S213\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S214\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp139;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp139);
                            this.Manager.Comment("reaching state \'S215\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp139, "c of FileOperationToBreakLeaseRequest, state S215");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS51();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195LeaseBreakResponseChecker)));
                        }
                        goto label59;
                    }
                    if ((temp140 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS55();
                        goto label59;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker1)));
                label59:
;
                    goto label60;
                }
                if ((temp141 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS61();
                    goto label60;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker1)));
            label60:
;
                goto label63;
            }
            if ((temp147 == 1)) {
                this.Manager.Comment("reaching state \'S216\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S218\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S220\'");
                int temp146 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker3)));
                if ((temp146 == 0)) {
                    this.Manager.Comment("reaching state \'S221\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp142;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp142);
                    this.Manager.Comment("reaching state \'S222\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp142, "c of FileOperationToBreakLeaseRequest, state S222");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S223\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S224\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S225\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp143;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp143);
                    this.Manager.Comment("reaching state \'S226\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp143, "c of FileOperationToBreakLeaseRequest, state S226");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S227\'");
                    int temp145 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker3)));
                    if ((temp145 == 0)) {
                        this.Manager.Comment("reaching state \'S228\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S229\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S230\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S231\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S232\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S233\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp144;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp144);
                            this.Manager.Comment("reaching state \'S234\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp144, "c of FileOperationToBreakLeaseRequest, state S234");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS21();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195LeaseBreakResponseChecker1)));
                        }
                        goto label61;
                    }
                    if ((temp145 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS25();
                        goto label61;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker3)));
                label61:
;
                    goto label62;
                }
                if ((temp146 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS31();
                    goto label62;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker3)));
            label62:
;
                goto label63;
            }
            if ((temp147 == 2)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label63;
            }
            if ((temp147 == 3)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S196");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S201");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S208");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S208");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S211");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S211");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S208");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S208");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S196");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S220");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S227");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S227");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S227");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S227");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S230");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S230");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S227");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S227");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S227");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S227");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S220");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S196");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS195ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S196");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S235
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS235() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS235");
            this.Manager.Comment("reaching state \'S235\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp148;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp148);
            this.Manager.AddReturn(ReadConfigInfo, null, temp148);
            this.Manager.Comment("reaching state \'S236\'");
            int temp159 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS235ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS235ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS235ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS235ReadConfigChecker3)));
            if ((temp159 == 0)) {
                this.Manager.Comment("reaching state \'S237\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S240\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S241\'");
                int temp153 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker1)));
                if ((temp153 == 0)) {
                    this.Manager.Comment("reaching state \'S242\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp149;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp149);
                    this.Manager.Comment("reaching state \'S243\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp149, "c of FileOperationToBreakLeaseRequest, state S243");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S244\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S245\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S246\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp150;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp150);
                    this.Manager.Comment("reaching state \'S247\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp150, "c of FileOperationToBreakLeaseRequest, state S247");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S248\'");
                    int temp152 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker1)));
                    if ((temp152 == 0)) {
                        this.Manager.Comment("reaching state \'S249\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S250\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S251\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S252\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S253\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S254\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp151;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb302,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp151);
                            this.Manager.Comment("reaching state \'S255\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp151, "c of FileOperationToBreakLeaseRequest, state S255");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS51();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235LeaseBreakResponseChecker)));
                        }
                        goto label64;
                    }
                    if ((temp152 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS55();
                        goto label64;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker1)));
                label64:
;
                    goto label65;
                }
                if ((temp153 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS61();
                    goto label65;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker1)));
            label65:
;
                goto label68;
            }
            if ((temp159 == 1)) {
                this.Manager.Comment("reaching state \'S256\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S260\'");
                int temp158 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker3)));
                if ((temp158 == 0)) {
                    this.Manager.Comment("reaching state \'S261\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp154;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp154);
                    this.Manager.Comment("reaching state \'S262\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp154, "c of FileOperationToBreakLeaseRequest, state S262");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S263\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S264\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S265\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp155;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp155);
                    this.Manager.Comment("reaching state \'S266\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp155, "c of FileOperationToBreakLeaseRequest, state S266");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S267\'");
                    int temp157 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker3)));
                    if ((temp157 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS25();
                        goto label66;
                    }
                    if ((temp157 == 1)) {
                        this.Manager.Comment("reaching state \'S268\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S269\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S270\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S271\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S272\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S273\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp156;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb21,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp156);
                            this.Manager.Comment("reaching state \'S274\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp156, "c of FileOperationToBreakLeaseRequest, state S274");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS21();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235LeaseBreakResponseChecker1)));
                        }
                        goto label66;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker3)));
                label66:
;
                    goto label67;
                }
                if ((temp158 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS31();
                    goto label67;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker3)));
            label67:
;
                goto label68;
            }
            if ((temp159 == 2)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label68;
            }
            if ((temp159 == 3)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label68;
            }
            throw new InvalidOperationException("never reached");
        label68:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S236");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S241");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S241");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S241");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S241");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S241");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S248");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S248");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S251");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S248");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S248");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S241");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S241");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S241");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S241");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S241");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S236");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S260");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S260");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S260");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S267");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S267");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S267");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S267");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S267");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S270");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S270");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S260");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S260");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S260");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S236");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS235ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S236");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S275
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS275() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS275");
            this.Manager.Comment("reaching state \'S275\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp160;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp160);
            this.Manager.AddReturn(ReadConfigInfo, null, temp160);
            this.Manager.Comment("reaching state \'S276\'");
            int temp171 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS275ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS275ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS275ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS275ReadConfigChecker3)));
            if ((temp171 == 0)) {
                this.Manager.Comment("reaching state \'S277\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S278\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S279\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S281\'");
                int temp165 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker1)));
                if ((temp165 == 0)) {
                    this.Manager.Comment("reaching state \'S282\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp161;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp161);
                    this.Manager.Comment("reaching state \'S283\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp161, "c of FileOperationToBreakLeaseRequest, state S283");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S284\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S285\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S286\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp162;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp162);
                    this.Manager.Comment("reaching state \'S287\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp162, "c of FileOperationToBreakLeaseRequest, state S287");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S288\'");
                    int temp164 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker1)));
                    if ((temp164 == 0)) {
                        this.Manager.Comment("reaching state \'S289\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S290\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S291\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S292\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S293\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S294\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp163;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb302,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp163);
                            this.Manager.Comment("reaching state \'S295\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp163, "c of FileOperationToBreakLeaseRequest, state S295");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS51();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275LeaseBreakResponseChecker)));
                        }
                        goto label69;
                    }
                    if ((temp164 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS55();
                        goto label69;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker1)));
                label69:
;
                    goto label70;
                }
                if ((temp165 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS61();
                    goto label70;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker1)));
            label70:
;
                goto label73;
            }
            if ((temp171 == 1)) {
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S298\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S299\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S300\'");
                int temp170 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker3)));
                if ((temp170 == 0)) {
                    this.Manager.Comment("reaching state \'S301\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp166;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp166);
                    this.Manager.Comment("reaching state \'S302\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp166, "c of FileOperationToBreakLeaseRequest, state S302");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S303\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S304\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S305\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp167;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp167);
                    this.Manager.Comment("reaching state \'S306\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp167, "c of FileOperationToBreakLeaseRequest, state S306");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S307\'");
                    int temp169 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker3)));
                    if ((temp169 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS25();
                        goto label71;
                    }
                    if ((temp169 == 1)) {
                        this.Manager.Comment("reaching state \'S308\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S309\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S310\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S311\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S312\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S313\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp168;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb21,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp168);
                            this.Manager.Comment("reaching state \'S314\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp168, "c of FileOperationToBreakLeaseRequest, state S314");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS21();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275LeaseBreakResponseChecker1)));
                        }
                        goto label71;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker3)));
                label71:
;
                    goto label72;
                }
                if ((temp170 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS31();
                    goto label72;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker3)));
            label72:
;
                goto label73;
            }
            if ((temp171 == 2)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label73;
            }
            if ((temp171 == 3)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label73;
            }
            throw new InvalidOperationException("never reached");
        label73:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S276");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S281");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S281");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S288");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S288");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S288");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S291");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S291");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S288");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S288");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S288");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S281");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S281");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S281");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S281");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S276");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S300");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S300");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S300");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S300");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S300");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S307");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S307");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S307");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S307");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S307");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S310");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S310");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S300");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S300");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S300");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S300");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S300");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S276");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS275ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S276");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S315
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS315() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS315");
            this.Manager.Comment("reaching state \'S315\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp172;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp172);
            this.Manager.AddReturn(ReadConfigInfo, null, temp172);
            this.Manager.Comment("reaching state \'S316\'");
            int temp183 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS315ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS315ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS315ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS315ReadConfigChecker3)));
            if ((temp183 == 0)) {
                this.Manager.Comment("reaching state \'S317\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S318\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S321\'");
                int temp177 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker1)));
                if ((temp177 == 0)) {
                    this.Manager.Comment("reaching state \'S322\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp173;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp173);
                    this.Manager.Comment("reaching state \'S323\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp173, "c of FileOperationToBreakLeaseRequest, state S323");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S324\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S325\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S326\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp174;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp174);
                    this.Manager.Comment("reaching state \'S327\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp174, "c of FileOperationToBreakLeaseRequest, state S327");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S328\'");
                    int temp176 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker1)));
                    if ((temp176 == 0)) {
                        this.Manager.Comment("reaching state \'S329\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S330\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S331\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S332\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S333\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S334\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp175;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                                    "idDifferentLeaseKey,Smb302,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp175);
                            this.Manager.Comment("reaching state \'S335\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp175, "c of FileOperationToBreakLeaseRequest, state S335");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS51();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315LeaseBreakResponseChecker)));
                        }
                        goto label74;
                    }
                    if ((temp176 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS55();
                        goto label74;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker1)));
                label74:
;
                    goto label75;
                }
                if ((temp177 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS61();
                    goto label75;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker1)));
            label75:
;
                goto label78;
            }
            if ((temp183 == 1)) {
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S337\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S338\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S339\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S340\'");
                int temp182 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker3)));
                if ((temp182 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS31();
                    goto label77;
                }
                if ((temp182 == 1)) {
                    this.Manager.Comment("reaching state \'S341\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp178;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp178);
                    this.Manager.Comment("reaching state \'S342\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp178, "c of FileOperationToBreakLeaseRequest, state S342");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S343\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S344\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S345\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp179;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp179);
                    this.Manager.Comment("reaching state \'S346\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp179, "c of FileOperationToBreakLeaseRequest, state S346");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S347\'");
                    int temp181 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker3)));
                    if ((temp181 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS25();
                        goto label76;
                    }
                    if ((temp181 == 1)) {
                        this.Manager.Comment("reaching state \'S348\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S349\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S350\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S351\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S352\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S353\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp180;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                                    "idDifferentLeaseKey,Smb21,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp180);
                            this.Manager.Comment("reaching state \'S354\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp180, "c of FileOperationToBreakLeaseRequest, state S354");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS21();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315LeaseBreakResponseChecker1)));
                        }
                        goto label76;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker3)));
                label76:
;
                    goto label77;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker3)));
            label77:
;
                goto label78;
            }
            if ((temp183 == 2)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label78;
            }
            if ((temp183 == 3)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label78;
            }
            throw new InvalidOperationException("never reached");
        label78:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S316");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S321");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S321");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S321");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S321");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S321");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S328");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S328");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S328");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S331");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S331");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S328");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S328");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S328");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S321");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S321");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S321");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S321");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S321");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S316");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S340");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S340");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S347");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S347");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S347");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S347");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S347");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S347");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S347");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S347");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S350");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S316");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS315ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S316");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S355
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS355() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS355");
            this.Manager.Comment("reaching state \'S355\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp184;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp184);
            this.Manager.AddReturn(ReadConfigInfo, null, temp184);
            this.Manager.Comment("reaching state \'S356\'");
            int temp191 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS355ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS355ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS355ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS355ReadConfigChecker3)));
            if ((temp191 == 0)) {
                this.Manager.Comment("reaching state \'S357\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S358\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S359\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S360\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S361\'");
                int temp187 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker1)));
                if ((temp187 == 0)) {
                    this.Manager.Comment("reaching state \'S362\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp185;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp185);
                    this.Manager.Comment("reaching state \'S363\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp185, "c of FileOperationToBreakLeaseRequest, state S363");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S364\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S365\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S366\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp186;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp186);
                    this.Manager.Comment("reaching state \'S367\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp186, "c of FileOperationToBreakLeaseRequest, state S367");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS368();
                    goto label79;
                }
                if ((temp187 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS61();
                    goto label79;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker1)));
            label79:
;
                goto label81;
            }
            if ((temp191 == 1)) {
                this.Manager.Comment("reaching state \'S372\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S373\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S374\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S375\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S376\'");
                int temp190 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker3)));
                if ((temp190 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS31();
                    goto label80;
                }
                if ((temp190 == 1)) {
                    this.Manager.Comment("reaching state \'S377\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp188;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp188);
                    this.Manager.Comment("reaching state \'S378\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp188, "c of FileOperationToBreakLeaseRequest, state S378");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S379\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S380\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S381\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp189;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp189);
                    this.Manager.Comment("reaching state \'S382\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp189, "c of FileOperationToBreakLeaseRequest, state S382");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS383();
                    goto label80;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker3)));
            label80:
;
                goto label81;
            }
            if ((temp191 == 2)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label81;
            }
            if ((temp191 == 3)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label81;
            }
            throw new InvalidOperationException("never reached");
        label81:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S356");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S361");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S361");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S361");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S361");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS368() {
            this.Manager.Comment("reaching state \'S368\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS355OnLeaseBreakNotificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S369\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S370\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S371\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355LeaseBreakResponseChecker))) != -1)) {
                    BreakReadWriteLeaseV1TestCaseS52();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355LeaseBreakResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS355OnLeaseBreakNotificationChecker)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S368");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S368");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S368");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S368");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S371");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S361");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S361");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S361");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S361");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S356");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S376");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S376");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S376");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S376");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S376");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S376");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S376");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S376");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S376");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S376");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS383() {
            this.Manager.Comment("reaching state \'S383\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS355OnLeaseBreakNotificationChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S385\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S386\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355LeaseBreakResponseChecker1))) != -1)) {
                    BreakReadWriteLeaseV1TestCaseS22();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS355LeaseBreakResponseChecker1)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS355OnLeaseBreakNotificationChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S383");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S383");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S383");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S383");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S386");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S386");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S356");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS355ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S356");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S387
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS387() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS387");
            this.Manager.Comment("reaching state \'S387\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp192;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp192);
            this.Manager.AddReturn(ReadConfigInfo, null, temp192);
            this.Manager.Comment("reaching state \'S388\'");
            int temp199 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS387ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS387ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS387ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS387ReadConfigChecker3)));
            if ((temp199 == 0)) {
                this.Manager.Comment("reaching state \'S389\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S390\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S391\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S392\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S393\'");
                int temp195 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker1)));
                if ((temp195 == 0)) {
                    this.Manager.Comment("reaching state \'S394\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp193;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp193);
                    this.Manager.Comment("reaching state \'S395\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp193, "c of FileOperationToBreakLeaseRequest, state S395");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S396\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S397\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S398\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp194;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp194);
                    this.Manager.Comment("reaching state \'S399\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp194, "c of FileOperationToBreakLeaseRequest, state S399");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS368();
                    goto label82;
                }
                if ((temp195 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS61();
                    goto label82;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker1)));
            label82:
;
                goto label84;
            }
            if ((temp199 == 1)) {
                this.Manager.Comment("reaching state \'S400\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S402\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S403\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S404\'");
                int temp198 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker3)));
                if ((temp198 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS31();
                    goto label83;
                }
                if ((temp198 == 1)) {
                    this.Manager.Comment("reaching state \'S405\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp196;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp196);
                    this.Manager.Comment("reaching state \'S406\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp196, "c of FileOperationToBreakLeaseRequest, state S406");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S407\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S408\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S409\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp197;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp197);
                    this.Manager.Comment("reaching state \'S410\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp197, "c of FileOperationToBreakLeaseRequest, state S410");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS383();
                    goto label83;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker3)));
            label83:
;
                goto label84;
            }
            if ((temp199 == 2)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label84;
            }
            if ((temp199 == 3)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label84;
            }
            throw new InvalidOperationException("never reached");
        label84:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS387ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S388");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S393");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S393");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S393");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S393");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S393");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S393");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S393");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S393");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS387ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S388");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S404");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S404");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S404");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S404");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S404");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS387CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S404");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S404");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S404");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S404");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S404");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS387ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S388");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS387ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S388");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S411
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS411() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS411");
            this.Manager.Comment("reaching state \'S411\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp200;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp200);
            this.Manager.AddReturn(ReadConfigInfo, null, temp200);
            this.Manager.Comment("reaching state \'S412\'");
            int temp207 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS411ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS411ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS411ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS411ReadConfigChecker3)));
            if ((temp207 == 0)) {
                this.Manager.Comment("reaching state \'S413\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S414\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S415\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S416\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S417\'");
                int temp203 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker1)));
                if ((temp203 == 0)) {
                    this.Manager.Comment("reaching state \'S418\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp201;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp201);
                    this.Manager.Comment("reaching state \'S419\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp201, "c of FileOperationToBreakLeaseRequest, state S419");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S420\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S421\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S422\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp202;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientGuidDifferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp202);
                    this.Manager.Comment("reaching state \'S423\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp202, "c of FileOperationToBreakLeaseRequest, state S423");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS43();
                    goto label85;
                }
                if ((temp203 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS61();
                    goto label85;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker1)));
            label85:
;
                goto label87;
            }
            if ((temp207 == 1)) {
                this.Manager.Comment("reaching state \'S424\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S425\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S426\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S427\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S428\'");
                int temp206 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker3)));
                if ((temp206 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS31();
                    goto label86;
                }
                if ((temp206 == 1)) {
                    this.Manager.Comment("reaching state \'S429\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp204;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp204);
                    this.Manager.Comment("reaching state \'S430\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp204, "c of FileOperationToBreakLeaseRequest, state S430");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S431\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S432\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S433\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp205;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientGuidDifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp205);
                    this.Manager.Comment("reaching state \'S434\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp205, "c of FileOperationToBreakLeaseRequest, state S434");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS13();
                    goto label86;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker3)));
            label86:
;
                goto label87;
            }
            if ((temp207 == 2)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label87;
            }
            if ((temp207 == 3)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label87;
            }
            throw new InvalidOperationException("never reached");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS411ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S412");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S417");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S417");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S417");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S417");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S417");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S417");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS411ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S412");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S428");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S428");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S428");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S428");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S428");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS411CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S428");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S428");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S428");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S428");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S428");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS411ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S412");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS411ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S412");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S435
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS435() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS435");
            this.Manager.Comment("reaching state \'S435\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp208;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp208);
            this.Manager.AddReturn(ReadConfigInfo, null, temp208);
            this.Manager.Comment("reaching state \'S436\'");
            int temp219 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS435ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS435ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS435ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS435ReadConfigChecker3)));
            if ((temp219 == 0)) {
                this.Manager.Comment("reaching state \'S437\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S438\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S439\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S440\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S441\'");
                int temp213 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker1)));
                if ((temp213 == 0)) {
                    this.Manager.Comment("reaching state \'S442\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp209;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp209);
                    this.Manager.Comment("reaching state \'S443\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp209, "c of FileOperationToBreakLeaseRequest, state S443");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S444\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S445\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S446\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp210;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp210);
                    this.Manager.Comment("reaching state \'S447\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp210, "c of FileOperationToBreakLeaseRequest, state S447");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S448\'");
                    int temp212 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker2)));
                    if ((temp212 == 0)) {
                        this.Manager.Comment("reaching state \'S449\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S450\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S451\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S452\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S453\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S454\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp211;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                                    ",Smb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp211);
                            this.Manager.Comment("reaching state \'S455\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp211, "c of FileOperationToBreakLeaseRequest, state S455");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS456();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker)));
                        }
                        goto label88;
                    }
                    if ((temp212 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS460();
                        goto label88;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker2)));
                label88:
;
                    goto label89;
                }
                if ((temp213 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS466();
                    goto label89;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker1)));
            label89:
;
                goto label92;
            }
            if ((temp219 == 1)) {
                this.Manager.Comment("reaching state \'S467\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S468\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S469\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S470\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S471\'");
                int temp218 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker3)));
                if ((temp218 == 0)) {
                    this.Manager.Comment("reaching state \'S472\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp214;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp214);
                    this.Manager.Comment("reaching state \'S473\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp214, "c of FileOperationToBreakLeaseRequest, state S473");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S474\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S475\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S476\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp215;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp215);
                    this.Manager.Comment("reaching state \'S477\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp215, "c of FileOperationToBreakLeaseRequest, state S477");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S478\'");
                    int temp217 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker5)));
                    if ((temp217 == 0)) {
                        this.Manager.Comment("reaching state \'S479\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S480\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S481\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S482\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S483\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S484\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp216;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                                    ",Smb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp216);
                            this.Manager.Comment("reaching state \'S485\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: False \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                                this.c.Value.IsLeasingSupported,
                                                false}), temp216, "c of FileOperationToBreakLeaseRequest, state S485");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS486();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker2)));
                        }
                        goto label90;
                    }
                    if ((temp217 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS490();
                        goto label90;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker3)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker5)));
                label90:
;
                    goto label91;
                }
                if ((temp218 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS496();
                    goto label91;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker3)));
            label91:
;
                goto label92;
            }
            if ((temp219 == 2)) {
                BreakReadWriteLeaseV1TestCaseS497();
                goto label92;
            }
            if ((temp219 == 3)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label92;
            }
            throw new InvalidOperationException("never reached");
        label92:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S436");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S441");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S441");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S441");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S441");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S441");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S448");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S448");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S448");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S448");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S451");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S451");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS456() {
            this.Manager.Comment("reaching state \'S456\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker1))) != -1)) {
                BreakReadWriteLeaseV1TestCaseS457();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S456");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S456");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S456");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S456");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS457() {
            this.Manager.Comment("reaching state \'S457\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S458\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S459\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S448");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S448");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S448");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S448");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS460() {
            this.Manager.Comment("reaching state \'S460\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S461\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S462\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S463\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S464\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S465\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S462");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S462");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S441");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S441");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S441");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S441");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S441");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS466() {
            this.Manager.Comment("reaching state \'S466\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S436");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S471");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S471");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S471");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S471");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S471");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S478");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S478");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S478");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S478");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S481");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S481");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS486() {
            this.Manager.Comment("reaching state \'S486\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker4))) != -1)) {
                BreakReadWriteLeaseV1TestCaseS487();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker4)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker4(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S486");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S486");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S486");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S486");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS487() {
            this.Manager.Comment("reaching state \'S487\'");
            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
            this.Manager.Comment("reaching state \'S488\'");
            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
            this.Manager.Comment("reaching state \'S489\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435OnLeaseBreakNotificationChecker5(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S478");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S478");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S478");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S478");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS490() {
            this.Manager.Comment("reaching state \'S490\'");
            this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
            this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("reaching state \'S491\'");
            this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
            this.Manager.Comment("reaching state \'S492\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker3))) != -1)) {
                this.Manager.Comment("reaching state \'S493\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S494\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S495\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker3)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435LeaseBreakResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S492");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S492");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S471");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S471");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S471");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S471");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S471");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS496() {
            this.Manager.Comment("reaching state \'S496\'");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S436");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS435ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S436");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S504
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS504() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS504");
            this.Manager.Comment("reaching state \'S504\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp220;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp220);
            this.Manager.AddReturn(ReadConfigInfo, null, temp220);
            this.Manager.Comment("reaching state \'S505\'");
            int temp231 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS504ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS504ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS504ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS504ReadConfigChecker3)));
            if ((temp231 == 0)) {
                BreakReadWriteLeaseV1TestCaseS497();
                goto label97;
            }
            if ((temp231 == 1)) {
                this.Manager.Comment("reaching state \'S506\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S507\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S508\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S509\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S510\'");
                int temp225 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker1)));
                if ((temp225 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS466();
                    goto label94;
                }
                if ((temp225 == 1)) {
                    this.Manager.Comment("reaching state \'S511\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp221;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp221);
                    this.Manager.Comment("reaching state \'S512\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp221, "c of FileOperationToBreakLeaseRequest, state S512");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S513\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S514\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S515\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp222;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp222);
                    this.Manager.Comment("reaching state \'S516\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp222, "c of FileOperationToBreakLeaseRequest, state S516");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S517\'");
                    int temp224 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker1)));
                    if ((temp224 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS460();
                        goto label93;
                    }
                    if ((temp224 == 1)) {
                        this.Manager.Comment("reaching state \'S518\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S519\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S520\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S521\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S522\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S523\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp223;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp223);
                            this.Manager.Comment("reaching state \'S524\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp223, "c of FileOperationToBreakLeaseRequest, state S524");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS456();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504LeaseBreakResponseChecker)));
                        }
                        goto label93;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker1)));
                label93:
;
                    goto label94;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker1)));
            label94:
;
                goto label97;
            }
            if ((temp231 == 2)) {
                this.Manager.Comment("reaching state \'S525\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S526\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S527\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S528\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S529\'");
                int temp230 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker3)));
                if ((temp230 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS496();
                    goto label96;
                }
                if ((temp230 == 1)) {
                    this.Manager.Comment("reaching state \'S530\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp226;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp226);
                    this.Manager.Comment("reaching state \'S531\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp226, "c of FileOperationToBreakLeaseRequest, state S531");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S532\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S533\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S534\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp227;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp227);
                    this.Manager.Comment("reaching state \'S535\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp227, "c of FileOperationToBreakLeaseRequest, state S535");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S536\'");
                    int temp229 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker3)));
                    if ((temp229 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS490();
                        goto label95;
                    }
                    if ((temp229 == 1)) {
                        this.Manager.Comment("reaching state \'S537\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S538\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S539\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S540\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S541\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S542\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp228;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp228);
                            this.Manager.Comment("reaching state \'S543\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: False \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                                this.c.Value.IsLeasingSupported,
                                                false}), temp228, "c of FileOperationToBreakLeaseRequest, state S543");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS486();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504LeaseBreakResponseChecker1)));
                        }
                        goto label95;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker3)));
                label95:
;
                    goto label96;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker3)));
            label96:
;
                goto label97;
            }
            if ((temp231 == 3)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label97;
            }
            throw new InvalidOperationException("never reached");
        label97:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S505");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S505");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S510");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S510");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S510");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S510");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S510");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S510");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S510");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S510");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S510");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S510");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S517");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S517");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S517");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S517");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S517");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S517");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S517");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S517");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S520");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S520");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S505");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S529");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S529");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S529");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S529");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S529");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S529");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S529");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S529");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S529");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S529");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S536");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S536");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S536");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S536");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S536");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S536");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S536");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S536");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S539");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S539");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS504ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S505");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S544
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS544() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS544");
            this.Manager.Comment("reaching state \'S544\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp232;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp232);
            this.Manager.AddReturn(ReadConfigInfo, null, temp232);
            this.Manager.Comment("reaching state \'S545\'");
            int temp243 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS544ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS544ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS544ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS544ReadConfigChecker3)));
            if ((temp243 == 0)) {
                BreakReadWriteLeaseV1TestCaseS497();
                goto label102;
            }
            if ((temp243 == 1)) {
                this.Manager.Comment("reaching state \'S546\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S547\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S548\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S549\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S550\'");
                int temp237 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker1)));
                if ((temp237 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS466();
                    goto label99;
                }
                if ((temp237 == 1)) {
                    this.Manager.Comment("reaching state \'S551\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp233;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp233);
                    this.Manager.Comment("reaching state \'S552\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp233, "c of FileOperationToBreakLeaseRequest, state S552");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S553\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S554\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S555\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp234;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp234);
                    this.Manager.Comment("reaching state \'S556\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp234, "c of FileOperationToBreakLeaseRequest, state S556");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S557\'");
                    int temp236 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker1)));
                    if ((temp236 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS460();
                        goto label98;
                    }
                    if ((temp236 == 1)) {
                        this.Manager.Comment("reaching state \'S558\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S559\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S560\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S561\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S562\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S563\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp235;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                                    "mb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp235);
                            this.Manager.Comment("reaching state \'S564\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp235, "c of FileOperationToBreakLeaseRequest, state S564");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS456();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544LeaseBreakResponseChecker)));
                        }
                        goto label98;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker1)));
                label98:
;
                    goto label99;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker1)));
            label99:
;
                goto label102;
            }
            if ((temp243 == 2)) {
                this.Manager.Comment("reaching state \'S565\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S566\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S567\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S568\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S569\'");
                int temp242 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker3)));
                if ((temp242 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS496();
                    goto label101;
                }
                if ((temp242 == 1)) {
                    this.Manager.Comment("reaching state \'S570\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp238;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp238);
                    this.Manager.Comment("reaching state \'S571\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp238, "c of FileOperationToBreakLeaseRequest, state S571");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S572\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S573\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S574\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp239;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp239);
                    this.Manager.Comment("reaching state \'S575\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp239, "c of FileOperationToBreakLeaseRequest, state S575");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S576\'");
                    int temp241 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker3)));
                    if ((temp241 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS490();
                        goto label100;
                    }
                    if ((temp241 == 1)) {
                        this.Manager.Comment("reaching state \'S577\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S578\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S579\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S580\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S581\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S582\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp240;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                                    "mb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp240);
                            this.Manager.Comment("reaching state \'S583\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: False \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                                this.c.Value.IsLeasingSupported,
                                                false}), temp240, "c of FileOperationToBreakLeaseRequest, state S583");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS486();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544LeaseBreakResponseChecker1)));
                        }
                        goto label100;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker3)));
                label100:
;
                    goto label101;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker3)));
            label101:
;
                goto label102;
            }
            if ((temp243 == 3)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label102;
            }
            throw new InvalidOperationException("never reached");
        label102:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S545");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S545");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S550");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S550");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S550");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S550");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S550");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S550");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S550");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S550");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S550");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S550");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S557");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S557");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S557");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S557");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S557");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S557");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S560");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S560");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S545");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S569");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S569");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S569");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S569");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S569");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S569");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S569");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S569");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S569");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S569");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S576");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S576");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S576");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S576");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S576");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S576");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S579");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S579");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS544ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S545");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S584
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS584() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS584");
            this.Manager.Comment("reaching state \'S584\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp244;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp244);
            this.Manager.AddReturn(ReadConfigInfo, null, temp244);
            this.Manager.Comment("reaching state \'S585\'");
            int temp255 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS584ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS584ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS584ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS584ReadConfigChecker3)));
            if ((temp255 == 0)) {
                BreakReadWriteLeaseV1TestCaseS497();
                goto label107;
            }
            if ((temp255 == 1)) {
                this.Manager.Comment("reaching state \'S586\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S587\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S588\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S589\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S590\'");
                int temp249 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker1)));
                if ((temp249 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS466();
                    goto label104;
                }
                if ((temp249 == 1)) {
                    this.Manager.Comment("reaching state \'S591\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp245;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp245);
                    this.Manager.Comment("reaching state \'S592\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp245, "c of FileOperationToBreakLeaseRequest, state S592");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S593\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S594\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S595\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp246;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp246);
                    this.Manager.Comment("reaching state \'S596\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp246, "c of FileOperationToBreakLeaseRequest, state S596");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S597\'");
                    int temp248 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker1)));
                    if ((temp248 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS460();
                        goto label103;
                    }
                    if ((temp248 == 1)) {
                        this.Manager.Comment("reaching state \'S598\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S599\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S600\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S601\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S602\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S603\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp247;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp247);
                            this.Manager.Comment("reaching state \'S604\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp247, "c of FileOperationToBreakLeaseRequest, state S604");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS456();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584LeaseBreakResponseChecker)));
                        }
                        goto label103;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker1)));
                label103:
;
                    goto label104;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker1)));
            label104:
;
                goto label107;
            }
            if ((temp255 == 2)) {
                this.Manager.Comment("reaching state \'S605\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S606\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S607\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S608\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S609\'");
                int temp254 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker3)));
                if ((temp254 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS496();
                    goto label106;
                }
                if ((temp254 == 1)) {
                    this.Manager.Comment("reaching state \'S610\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp250;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp250);
                    this.Manager.Comment("reaching state \'S611\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp250, "c of FileOperationToBreakLeaseRequest, state S611");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S612\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S613\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S614\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp251;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp251);
                    this.Manager.Comment("reaching state \'S615\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp251, "c of FileOperationToBreakLeaseRequest, state S615");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S616\'");
                    int temp253 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker3)));
                    if ((temp253 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS490();
                        goto label105;
                    }
                    if ((temp253 == 1)) {
                        this.Manager.Comment("reaching state \'S617\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S618\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S619\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S620\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S621\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S622\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp252;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp252);
                            this.Manager.Comment("reaching state \'S623\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: False \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                                this.c.Value.IsLeasingSupported,
                                                false}), temp252, "c of FileOperationToBreakLeaseRequest, state S623");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS486();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584LeaseBreakResponseChecker1)));
                        }
                        goto label105;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker3)));
                label105:
;
                    goto label106;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker3)));
            label106:
;
                goto label107;
            }
            if ((temp255 == 3)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label107;
            }
            throw new InvalidOperationException("never reached");
        label107:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S585");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S585");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S590");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S590");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S590");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S590");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S590");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S590");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S590");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S590");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S590");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S590");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S597");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S597");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S597");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S597");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S597");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S597");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S597");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S600");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S600");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S585");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S609");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S609");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S609");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S609");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S609");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S609");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S609");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S609");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S609");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S609");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S616");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S616");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S616");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S616");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S616");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S616");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S616");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S616");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S619");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S619");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS584ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S585");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S624
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS624() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS624");
            this.Manager.Comment("reaching state \'S624\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp256;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp256);
            this.Manager.AddReturn(ReadConfigInfo, null, temp256);
            this.Manager.Comment("reaching state \'S625\'");
            int temp267 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS624ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS624ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS624ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS624ReadConfigChecker3)));
            if ((temp267 == 0)) {
                BreakReadWriteLeaseV1TestCaseS497();
                goto label112;
            }
            if ((temp267 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label112;
            }
            if ((temp267 == 2)) {
                this.Manager.Comment("reaching state \'S626\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S627\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S628\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S629\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S630\'");
                int temp261 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker1)));
                if ((temp261 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS466();
                    goto label109;
                }
                if ((temp261 == 1)) {
                    this.Manager.Comment("reaching state \'S631\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp257;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp257);
                    this.Manager.Comment("reaching state \'S632\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp257, "c of FileOperationToBreakLeaseRequest, state S632");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S633\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S634\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S635\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp258;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp258);
                    this.Manager.Comment("reaching state \'S636\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp258, "c of FileOperationToBreakLeaseRequest, state S636");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S637\'");
                    int temp260 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker1)));
                    if ((temp260 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS460();
                        goto label108;
                    }
                    if ((temp260 == 1)) {
                        this.Manager.Comment("reaching state \'S638\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S639\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S640\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S641\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S642\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S643\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp259;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb30,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp259);
                            this.Manager.Comment("reaching state \'S644\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp259, "c of FileOperationToBreakLeaseRequest, state S644");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS456();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624LeaseBreakResponseChecker)));
                        }
                        goto label108;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker1)));
                label108:
;
                    goto label109;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker1)));
            label109:
;
                goto label112;
            }
            if ((temp267 == 3)) {
                this.Manager.Comment("reaching state \'S645\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S646\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S647\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S648\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S649\'");
                int temp266 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker3)));
                if ((temp266 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS496();
                    goto label111;
                }
                if ((temp266 == 1)) {
                    this.Manager.Comment("reaching state \'S650\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp262;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp262);
                    this.Manager.Comment("reaching state \'S651\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp262, "c of FileOperationToBreakLeaseRequest, state S651");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S652\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S653\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S654\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp263;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp263);
                    this.Manager.Comment("reaching state \'S655\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp263, "c of FileOperationToBreakLeaseRequest, state S655");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S656\'");
                    int temp265 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker3)));
                    if ((temp265 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS490();
                        goto label110;
                    }
                    if ((temp265 == 1)) {
                        this.Manager.Comment("reaching state \'S657\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S658\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S659\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S660\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S661\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S662\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp264;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb21,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp264);
                            this.Manager.Comment("reaching state \'S663\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: False \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                                this.c.Value.IsLeasingSupported,
                                                false}), temp264, "c of FileOperationToBreakLeaseRequest, state S663");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS486();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624LeaseBreakResponseChecker1)));
                        }
                        goto label110;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker3)));
                label110:
;
                    goto label111;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker3)));
            label111:
;
                goto label112;
            }
            throw new InvalidOperationException("never reached");
        label112:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S625");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S625");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S625");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S630");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S630");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S630");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S630");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S630");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S630");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S630");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S630");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S630");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S630");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S637");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S637");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S637");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S637");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S637");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S637");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S637");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S637");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S640");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S640");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S625");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S649");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S649");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S649");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S649");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S649");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S656");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S656");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S656");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S656");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S656");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S656");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S656");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S656");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS624LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S659");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S659");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S664
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS664() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS664");
            this.Manager.Comment("reaching state \'S664\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp268;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp268);
            this.Manager.AddReturn(ReadConfigInfo, null, temp268);
            this.Manager.Comment("reaching state \'S665\'");
            int temp279 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS664ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS664ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS664ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS664ReadConfigChecker3)));
            if ((temp279 == 0)) {
                BreakReadWriteLeaseV1TestCaseS497();
                goto label117;
            }
            if ((temp279 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label117;
            }
            if ((temp279 == 2)) {
                this.Manager.Comment("reaching state \'S666\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S667\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S668\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S669\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S670\'");
                int temp273 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker1)));
                if ((temp273 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS466();
                    goto label114;
                }
                if ((temp273 == 1)) {
                    this.Manager.Comment("reaching state \'S671\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp269;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp269);
                    this.Manager.Comment("reaching state \'S672\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp269, "c of FileOperationToBreakLeaseRequest, state S672");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S673\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S674\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S675\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp270;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp270);
                    this.Manager.Comment("reaching state \'S676\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp270, "c of FileOperationToBreakLeaseRequest, state S676");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S677\'");
                    int temp272 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker1)));
                    if ((temp272 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS460();
                        goto label113;
                    }
                    if ((temp272 == 1)) {
                        this.Manager.Comment("reaching state \'S678\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S679\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S680\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S681\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S682\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S683\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp271;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb30,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp271);
                            this.Manager.Comment("reaching state \'S684\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp271, "c of FileOperationToBreakLeaseRequest, state S684");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS456();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664LeaseBreakResponseChecker)));
                        }
                        goto label113;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker1)));
                label113:
;
                    goto label114;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker1)));
            label114:
;
                goto label117;
            }
            if ((temp279 == 3)) {
                this.Manager.Comment("reaching state \'S685\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S686\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S687\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S688\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S689\'");
                int temp278 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker3)));
                if ((temp278 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS496();
                    goto label116;
                }
                if ((temp278 == 1)) {
                    this.Manager.Comment("reaching state \'S690\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp274;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp274);
                    this.Manager.Comment("reaching state \'S691\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp274, "c of FileOperationToBreakLeaseRequest, state S691");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S692\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S693\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S694\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp275;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp275);
                    this.Manager.Comment("reaching state \'S695\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp275, "c of FileOperationToBreakLeaseRequest, state S695");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S696\'");
                    int temp277 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker3)));
                    if ((temp277 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS490();
                        goto label115;
                    }
                    if ((temp277 == 1)) {
                        this.Manager.Comment("reaching state \'S697\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S698\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S699\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S700\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S701\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S702\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp276;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb21,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp276);
                            this.Manager.Comment("reaching state \'S703\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: False \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                                this.c.Value.IsLeasingSupported,
                                                false}), temp276, "c of FileOperationToBreakLeaseRequest, state S703");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS486();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664LeaseBreakResponseChecker1)));
                        }
                        goto label115;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker3)));
                label115:
;
                    goto label116;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker3)));
            label116:
;
                goto label117;
            }
            throw new InvalidOperationException("never reached");
        label117:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S665");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S665");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S665");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S670");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S670");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S670");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S670");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S670");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S670");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S670");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S670");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S670");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S670");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S677");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S677");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S677");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S677");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S677");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S677");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S677");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S677");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S680");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S680");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S665");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S689");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S689");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S689");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S689");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S689");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S689");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S689");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S689");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S689");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S689");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S696");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S696");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S696");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S696");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S696");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S696");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS664LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S699");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S699");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S704
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS704() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS704");
            this.Manager.Comment("reaching state \'S704\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp280;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp280);
            this.Manager.AddReturn(ReadConfigInfo, null, temp280);
            this.Manager.Comment("reaching state \'S705\'");
            int temp291 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS704ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS704ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS704ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS704ReadConfigChecker3)));
            if ((temp291 == 0)) {
                BreakReadWriteLeaseV1TestCaseS497();
                goto label122;
            }
            if ((temp291 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label122;
            }
            if ((temp291 == 2)) {
                this.Manager.Comment("reaching state \'S706\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S707\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S708\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S709\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S710\'");
                int temp285 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker1)));
                if ((temp285 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS466();
                    goto label119;
                }
                if ((temp285 == 1)) {
                    this.Manager.Comment("reaching state \'S711\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp281;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp281);
                    this.Manager.Comment("reaching state \'S712\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp281, "c of FileOperationToBreakLeaseRequest, state S712");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S713\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S714\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S715\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp282;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp282);
                    this.Manager.Comment("reaching state \'S716\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp282, "c of FileOperationToBreakLeaseRequest, state S716");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S717\'");
                    int temp284 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker1)));
                    if ((temp284 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS460();
                        goto label118;
                    }
                    if ((temp284 == 1)) {
                        this.Manager.Comment("reaching state \'S718\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S719\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S720\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S721\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S722\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S723\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp283;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                                    "idDifferentLeaseKey,Smb30,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp283);
                            this.Manager.Comment("reaching state \'S724\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp283, "c of FileOperationToBreakLeaseRequest, state S724");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS456();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704LeaseBreakResponseChecker)));
                        }
                        goto label118;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker1)));
                label118:
;
                    goto label119;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker1)));
            label119:
;
                goto label122;
            }
            if ((temp291 == 3)) {
                this.Manager.Comment("reaching state \'S725\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S726\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S727\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S728\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S729\'");
                int temp290 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker3)));
                if ((temp290 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS496();
                    goto label121;
                }
                if ((temp290 == 1)) {
                    this.Manager.Comment("reaching state \'S730\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp286;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp286);
                    this.Manager.Comment("reaching state \'S731\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp286, "c of FileOperationToBreakLeaseRequest, state S731");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S732\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S733\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S734\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp287;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp287);
                    this.Manager.Comment("reaching state \'S735\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp287, "c of FileOperationToBreakLeaseRequest, state S735");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S736\'");
                    int temp289 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker3)));
                    if ((temp289 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS490();
                        goto label120;
                    }
                    if ((temp289 == 1)) {
                        this.Manager.Comment("reaching state \'S737\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S738\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S739\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S740\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S741\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S742\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp288;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                                    "idDifferentLeaseKey,Smb21,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp288);
                            this.Manager.Comment("reaching state \'S743\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: False \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                                this.c.Value.IsLeasingSupported,
                                                false}), temp288, "c of FileOperationToBreakLeaseRequest, state S743");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                            this.c.Value.IsLeasingSupported,
                                            false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS486();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704LeaseBreakResponseChecker1)));
                        }
                        goto label120;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker3)));
                label120:
;
                    goto label121;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker3)));
            label121:
;
                goto label122;
            }
            throw new InvalidOperationException("never reached");
        label122:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S705");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S705");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S705");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S710");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S710");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S710");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S710");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S710");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S710");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S710");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S710");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S717");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S717");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S717");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S717");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S717");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S717");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S720");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S720");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S705");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S729");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S729");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S729");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S729");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S729");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S729");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S729");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S729");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S729");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S729");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S736");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S736");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S736");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S736");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S736");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S736");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S736");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S736");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS704LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S739");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S739");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S744
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS744() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS744");
            this.Manager.Comment("reaching state \'S744\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp292;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp292);
            this.Manager.AddReturn(ReadConfigInfo, null, temp292);
            this.Manager.Comment("reaching state \'S745\'");
            int temp299 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS744ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS744ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS744ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS744ReadConfigChecker3)));
            if ((temp299 == 0)) {
                BreakReadWriteLeaseV1TestCaseS497();
                goto label125;
            }
            if ((temp299 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label125;
            }
            if ((temp299 == 2)) {
                this.Manager.Comment("reaching state \'S746\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S747\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S748\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S749\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S750\'");
                int temp295 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker1)));
                if ((temp295 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS466();
                    goto label123;
                }
                if ((temp295 == 1)) {
                    this.Manager.Comment("reaching state \'S751\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp293;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp293);
                    this.Manager.Comment("reaching state \'S752\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp293, "c of FileOperationToBreakLeaseRequest, state S752");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S753\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S754\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S755\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp294;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp294);
                    this.Manager.Comment("reaching state \'S756\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp294, "c of FileOperationToBreakLeaseRequest, state S756");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS757();
                    goto label123;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker1)));
            label123:
;
                goto label125;
            }
            if ((temp299 == 3)) {
                this.Manager.Comment("reaching state \'S761\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S762\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S763\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S764\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S765\'");
                int temp298 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker3)));
                if ((temp298 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS496();
                    goto label124;
                }
                if ((temp298 == 1)) {
                    this.Manager.Comment("reaching state \'S766\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp296;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp296);
                    this.Manager.Comment("reaching state \'S767\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp296, "c of FileOperationToBreakLeaseRequest, state S767");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S768\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S769\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S770\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp297;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp297);
                    this.Manager.Comment("reaching state \'S771\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp297, "c of FileOperationToBreakLeaseRequest, state S771");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS772();
                    goto label124;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker3)));
            label124:
;
                goto label125;
            }
            throw new InvalidOperationException("never reached");
        label125:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S745");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S745");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S745");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S750");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S750");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S750");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S750");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S750");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S750");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S750");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S750");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S750");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S750");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS757() {
            this.Manager.Comment("reaching state \'S757\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS744OnLeaseBreakNotificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S758\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S759\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S760\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744LeaseBreakResponseChecker))) != -1)) {
                    BreakReadWriteLeaseV1TestCaseS457();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744LeaseBreakResponseChecker)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS744OnLeaseBreakNotificationChecker)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S757");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S757");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S757");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S757");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S760");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S760");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S745");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S765");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S765");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S765");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S765");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S765");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S765");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S765");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S765");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S765");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S765");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS772() {
            this.Manager.Comment("reaching state \'S772\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS744OnLeaseBreakNotificationChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S773\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,0)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 0u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S774\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S775\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744LeaseBreakResponseChecker1))) != -1)) {
                    BreakReadWriteLeaseV1TestCaseS487();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS744LeaseBreakResponseChecker1)));
                }
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS744OnLeaseBreakNotificationChecker1)));
            }
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S772");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S772");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S772");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S772");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS744LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S775");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of LeaseBreakResponse, state S775");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S75
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS75() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS75");
            this.Manager.Comment("reaching state \'S75\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp300;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp300);
            this.Manager.AddReturn(ReadConfigInfo, null, temp300);
            this.Manager.Comment("reaching state \'S76\'");
            int temp311 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS75ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS75ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS75ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS75ReadConfigChecker3)));
            if ((temp311 == 0)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label130;
            }
            if ((temp311 == 1)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label130;
            }
            if ((temp311 == 2)) {
                this.Manager.Comment("reaching state \'S77\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S78\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S79\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S81\'");
                int temp305 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker1)));
                if ((temp305 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS61();
                    goto label127;
                }
                if ((temp305 == 1)) {
                    this.Manager.Comment("reaching state \'S82\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp301;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp301);
                    this.Manager.Comment("reaching state \'S83\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp301, "c of FileOperationToBreakLeaseRequest, state S83");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S84\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S85\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S86\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp302;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp302);
                    this.Manager.Comment("reaching state \'S87\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp302, "c of FileOperationToBreakLeaseRequest, state S87");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S88\'");
                    int temp304 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker1)));
                    if ((temp304 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS55();
                        goto label126;
                    }
                    if ((temp304 == 1)) {
                        this.Manager.Comment("reaching state \'S89\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S90\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S91\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S92\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S93\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S94\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp303;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                                    ",Smb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp303);
                            this.Manager.Comment("reaching state \'S95\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp303, "c of FileOperationToBreakLeaseRequest, state S95");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS51();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75LeaseBreakResponseChecker)));
                        }
                        goto label126;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker1)));
                label126:
;
                    goto label127;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker1)));
            label127:
;
                goto label130;
            }
            if ((temp311 == 3)) {
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S97\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S99\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S100\'");
                int temp310 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker3)));
                if ((temp310 == 0)) {
                    this.Manager.Comment("reaching state \'S101\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp306;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp306);
                    this.Manager.Comment("reaching state \'S102\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp306, "c of FileOperationToBreakLeaseRequest, state S102");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S103\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S104\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S105\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp307;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp307);
                    this.Manager.Comment("reaching state \'S106\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp307, "c of FileOperationToBreakLeaseRequest, state S106");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S107\'");
                    int temp309 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker3)));
                    if ((temp309 == 0)) {
                        this.Manager.Comment("reaching state \'S108\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S109\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S110\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75LeaseBreakResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S111\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S112\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S113\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp308;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                                    ",Smb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp308);
                            this.Manager.Comment("reaching state \'S114\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                                    "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp308, "c of FileOperationToBreakLeaseRequest, state S114");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                                    "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                                    "d \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS21();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75LeaseBreakResponseChecker1)));
                        }
                        goto label128;
                    }
                    if ((temp309 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS25();
                        goto label128;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker3)));
                label128:
;
                    goto label129;
                }
                if ((temp310 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS31();
                    goto label129;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker3)));
            label129:
;
                goto label130;
            }
            throw new InvalidOperationException("never reached");
        label130:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S76");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S76");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S76");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S81");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S81");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S81");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S81");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S81");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S81");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S81");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S81");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S81");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S81");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S88");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S88");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S88");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S88");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S91");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S76");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S100");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S100");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S100");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S100");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S100");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S107");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S107");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S110");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S110");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S107");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S107");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S107");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS75CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S100");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S100");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S100");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S100");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S100");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S776
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS776() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS776");
            this.Manager.Comment("reaching state \'S776\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp312;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp312);
            this.Manager.AddReturn(ReadConfigInfo, null, temp312);
            this.Manager.Comment("reaching state \'S777\'");
            int temp319 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS776ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS776ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS776ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS776ReadConfigChecker3)));
            if ((temp319 == 0)) {
                BreakReadWriteLeaseV1TestCaseS497();
                goto label133;
            }
            if ((temp319 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label133;
            }
            if ((temp319 == 2)) {
                this.Manager.Comment("reaching state \'S778\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S779\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S780\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S781\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S782\'");
                int temp315 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker1)));
                if ((temp315 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS466();
                    goto label131;
                }
                if ((temp315 == 1)) {
                    this.Manager.Comment("reaching state \'S783\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp313;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp313);
                    this.Manager.Comment("reaching state \'S784\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp313, "c of FileOperationToBreakLeaseRequest, state S784");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S785\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S786\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S787\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp314;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp314);
                    this.Manager.Comment("reaching state \'S788\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp314, "c of FileOperationToBreakLeaseRequest, state S788");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS757();
                    goto label131;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker1)));
            label131:
;
                goto label133;
            }
            if ((temp319 == 3)) {
                this.Manager.Comment("reaching state \'S789\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S790\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S791\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S792\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S793\'");
                int temp318 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker3)));
                if ((temp318 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS496();
                    goto label132;
                }
                if ((temp318 == 1)) {
                    this.Manager.Comment("reaching state \'S794\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp316;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp316);
                    this.Manager.Comment("reaching state \'S795\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp316, "c of FileOperationToBreakLeaseRequest, state S795");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S796\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S797\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S798\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp317;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp317);
                    this.Manager.Comment("reaching state \'S799\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp317, "c of FileOperationToBreakLeaseRequest, state S799");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 cl" +
                                "ient to cache data read from the object. Before processing one of the following " +
                                "operations from a client with a different ClientId, the object store MUST reques" +
                                "t that the server revoke READ caching. The object store is not required to wait " +
                                "for acknowledgment:\", \"[MS-SMB2] READ caching on a file:\", \"[MS-SMB2] \tThe file " +
                                "is opened in a manner that overwrites the existing file.\", \"[MS-SMB2] \tData is w" +
                                "ritten to the file.\", \"[MS-SMB2] \tThe file size is changed.\", \"[MS-SMB2] \tA byte" +
                                " range lock is requested for the file.\", \"[TestInfo] READ caching lease state is" +
                                " broken.\", \"[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and " +
                                "byte-range locks on an object. Before processing one of the following operations" +
                                ", the underlying object store MUST request that the server revoke WRITE caching," +
                                " and the object store MUST wait for acknowledgment from the server before procee" +
                                "ding with the operation:\", \"[MS-SMB2] The file is opened by a local application " +
                                "or via another protocol, or opened via SMB2 without providing the same ClientId," +
                                " and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_W" +
                                "RITE_ATTRIBUTES, and SYNCHRONIZE.\", \"[TestInfo] WRITE caching lease state is bro" +
                                "ken.\", \"[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closi" +
                                "ng handles it holds open, or to defer sending opens. Before processing one of th" +
                                "e following operations, the underlying object store MUST request that the server" +
                                " revoke HANDLE caching, and the object store MUST wait for acknowledgment before" +
                                " proceeding with the operation:\", \"[TestInfo] Lease.Breaking is set to TRUE.\", \"" +
                                "[TestInfo] Lease state is set to No caching.\"");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS772();
                    goto label132;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker3)));
            label132:
;
                goto label133;
            }
            throw new InvalidOperationException("never reached");
        label133:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS776ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S777");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS776ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S777");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS776ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S777");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S782");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S782");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S782");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S782");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S782");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S782");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S782");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S782");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S782");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S782");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS776ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S777");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S793");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S793");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S793");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S793");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S793");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS776CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S793");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S793");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S793");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S793");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S793");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S800
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS800() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS800");
            this.Manager.Comment("reaching state \'S800\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp320;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp320);
            this.Manager.AddReturn(ReadConfigInfo, null, temp320);
            this.Manager.Comment("reaching state \'S801\'");
            int temp331 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS800ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS800ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS800ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS800ReadConfigChecker3)));
            if ((temp331 == 0)) {
                BreakReadWriteLeaseV1TestCaseS497();
                goto label138;
            }
            if ((temp331 == 1)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label138;
            }
            if ((temp331 == 2)) {
                this.Manager.Comment("reaching state \'S802\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S803\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S804\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S805\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S806\'");
                int temp325 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker1)));
                if ((temp325 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS466();
                    goto label135;
                }
                if ((temp325 == 1)) {
                    this.Manager.Comment("reaching state \'S807\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp321;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp321);
                    this.Manager.Comment("reaching state \'S808\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp321, "c of FileOperationToBreakLeaseRequest, state S808");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S809\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S810\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S811\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp322;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp322);
                    this.Manager.Comment("reaching state \'S812\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp322, "c of FileOperationToBreakLeaseRequest, state S812");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS813();
                    goto label135;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker1)));
            label135:
;
                goto label138;
            }
            if ((temp331 == 3)) {
                this.Manager.Comment("reaching state \'S821\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S822\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S823\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S824\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S825\'");
                int temp330 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker3)));
                if ((temp330 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS496();
                    goto label137;
                }
                if ((temp330 == 1)) {
                    this.Manager.Comment("reaching state \'S826\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp326;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp326);
                    this.Manager.Comment("reaching state \'S827\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp326, "c of FileOperationToBreakLeaseRequest, state S827");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S828\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S829\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S830\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp327;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientGuidDifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp327);
                    this.Manager.Comment("reaching state \'S831\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp327, "c of FileOperationToBreakLeaseRequest, state S831");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS832();
                    goto label137;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker3)));
            label137:
;
                goto label138;
            }
            throw new InvalidOperationException("never reached");
        label138:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S801");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S801");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S801");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S806");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S806");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S806");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S806");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S806");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S806");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S806");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S806");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S806");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S806");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS813() {
            this.Manager.Comment("reaching state \'S813\'");
            int temp324 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker1)));
            if ((temp324 == 0)) {
                BreakReadWriteLeaseV1TestCaseS460();
                goto label134;
            }
            if ((temp324 == 1)) {
                this.Manager.Comment("reaching state \'S814\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S815\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S816\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800LeaseBreakResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S817\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S818\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S819\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp323;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp323);
                    this.Manager.Comment("reaching state \'S820\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp323, "c of FileOperationToBreakLeaseRequest, state S820");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS456();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800LeaseBreakResponseChecker)));
                }
                goto label134;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker1)));
        label134:
;
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S813");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S813");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S813");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S813");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S813");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S813");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S813");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S813");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S816");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S816");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S801");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S825");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S825");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S825");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S825");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S825");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S825");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S825");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S825");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S825");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S825");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS832() {
            this.Manager.Comment("reaching state \'S832\'");
            int temp329 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker3)));
            if ((temp329 == 0)) {
                BreakReadWriteLeaseV1TestCaseS490();
                goto label136;
            }
            if ((temp329 == 1)) {
                this.Manager.Comment("reaching state \'S833\'");
                this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S834\'");
                this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                this.Manager.Comment("reaching state \'S835\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800LeaseBreakResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S836\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S837\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S838\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp328;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp328);
                    this.Manager.Comment("reaching state \'S839\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp328, "c of FileOperationToBreakLeaseRequest, state S839");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS486();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS800LeaseBreakResponseChecker1)));
                }
                goto label136;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker3)));
        label136:
;
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S832");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S832");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S832");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S832");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800OnLeaseBreakNotificationChecker3(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S832");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S832");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S832");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S832");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS800LeaseBreakResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S835");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S835");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S840
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS840() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS840");
            this.Manager.Comment("reaching state \'S840\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp332;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp332);
            this.Manager.AddReturn(ReadConfigInfo, null, temp332);
            this.Manager.Comment("reaching state \'S841\'");
            int temp341 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS840ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS840ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS840ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS840ReadConfigChecker3)));
            if ((temp341 == 0)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label142;
            }
            if ((temp341 == 1)) {
                this.Manager.Comment("reaching state \'S842\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S843\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S844\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S845\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S846\'");
                int temp337 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker1)));
                if ((temp337 == 0)) {
                    this.Manager.Comment("reaching state \'S847\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp333;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp333);
                    this.Manager.Comment("reaching state \'S848\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp333, "c of FileOperationToBreakLeaseRequest, state S848");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S849\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S850\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S851\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp334;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp334);
                    this.Manager.Comment("reaching state \'S852\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp334, "c of FileOperationToBreakLeaseRequest, state S852");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S853\'");
                    int temp336 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS840OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS840OnLeaseBreakNotificationChecker1)));
                    if ((temp336 == 0)) {
                        this.Manager.Comment("reaching state \'S854\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S855\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S856\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS840LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S857\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S858\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S859\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp335;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp335);
                            this.Manager.Comment("reaching state \'S860\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp335, "c of FileOperationToBreakLeaseRequest, state S860");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS861();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS840LeaseBreakResponseChecker)));
                        }
                        goto label139;
                    }
                    if ((temp336 == 1)) {
                        BreakReadWriteLeaseV1TestCaseS865();
                        goto label139;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS840OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS840OnLeaseBreakNotificationChecker1)));
                label139:
;
                    goto label140;
                }
                if ((temp337 == 1)) {
                    BreakReadWriteLeaseV1TestCaseS871();
                    goto label140;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker1)));
            label140:
;
                goto label142;
            }
            if ((temp341 == 2)) {
                this.Manager.Comment("reaching state \'S872\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S873\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S874\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S875\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S876\'");
                int temp340 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker3)));
                if ((temp340 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS496();
                    goto label141;
                }
                if ((temp340 == 1)) {
                    this.Manager.Comment("reaching state \'S877\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp338;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp338);
                    this.Manager.Comment("reaching state \'S878\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp338, "c of FileOperationToBreakLeaseRequest, state S878");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S879\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S880\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S881\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp339;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp339);
                    this.Manager.Comment("reaching state \'S882\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp339, "c of FileOperationToBreakLeaseRequest, state S882");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS832();
                    goto label141;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker3)));
            label141:
;
                goto label142;
            }
            if ((temp341 == 3)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label142;
            }
            throw new InvalidOperationException("never reached");
        label142:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS840ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S841");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS840ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S841");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S846");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S846");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S846");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S846");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S846");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS840OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S853");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S853");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S853");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S853");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS840LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S856");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S856");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS840OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S853");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S853");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S853");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S853");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S846");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S846");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S846");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S846");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S846");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS840ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S841");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S876");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S876");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S876");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S876");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S876");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS840CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S876");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S876");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S876");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S876");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S876");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS840ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S841");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        #endregion
        
        #region Test Starting in S890
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS890() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS890");
            this.Manager.Comment("reaching state \'S890\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp342;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp342);
            this.Manager.AddReturn(ReadConfigInfo, null, temp342);
            this.Manager.Comment("reaching state \'S891\'");
            int temp348 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS890ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS890ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS890ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS890ReadConfigChecker3)));
            if ((temp348 == 0)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label145;
            }
            if ((temp348 == 1)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label145;
            }
            if ((temp348 == 2)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label145;
            }
            if ((temp348 == 3)) {
                this.Manager.Comment("reaching state \'S892\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S893\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S894\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S895\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S896\'");
                int temp347 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS890CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS890CreateResponseChecker1)));
                if ((temp347 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS871();
                    goto label144;
                }
                if ((temp347 == 1)) {
                    this.Manager.Comment("reaching state \'S897\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp343;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp343);
                    this.Manager.Comment("reaching state \'S898\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp343, "c of FileOperationToBreakLeaseRequest, state S898");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S899\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S900\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S901\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp344;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp344);
                    this.Manager.Comment("reaching state \'S902\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp344, "c of FileOperationToBreakLeaseRequest, state S902");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S903\'");
                    int temp346 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS890OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS890OnLeaseBreakNotificationChecker1)));
                    if ((temp346 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS865();
                        goto label143;
                    }
                    if ((temp346 == 1)) {
                        this.Manager.Comment("reaching state \'S904\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S905\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S906\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS890LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S907\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S908\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S909\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp345;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                                    "mb2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp345);
                            this.Manager.Comment("reaching state \'S910\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp345, "c of FileOperationToBreakLeaseRequest, state S910");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS861();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS890LeaseBreakResponseChecker)));
                        }
                        goto label143;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS890OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS890OnLeaseBreakNotificationChecker1)));
                label143:
;
                    goto label144;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS890CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS890CreateResponseChecker1)));
            label144:
;
                goto label145;
            }
            throw new InvalidOperationException("never reached");
        label145:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS890ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S891");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS890ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S891");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS890ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S891");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS890ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S891");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS890CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S896");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S896");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S896");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S896");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S896");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS890CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S896");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S896");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S896");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S896");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S896");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS890OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S903");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S903");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS890OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S903");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S903");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S903");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S903");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS890LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S906");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S906");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S911
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS911() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS911");
            this.Manager.Comment("reaching state \'S911\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp349;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp349);
            this.Manager.AddReturn(ReadConfigInfo, null, temp349);
            this.Manager.Comment("reaching state \'S912\'");
            int temp358 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS911ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS911ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS911ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS911ReadConfigChecker3)));
            if ((temp358 == 0)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label149;
            }
            if ((temp358 == 1)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label149;
            }
            if ((temp358 == 2)) {
                this.Manager.Comment("reaching state \'S913\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S914\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S915\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S916\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S917\'");
                int temp354 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker1)));
                if ((temp354 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS871();
                    goto label147;
                }
                if ((temp354 == 1)) {
                    this.Manager.Comment("reaching state \'S918\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp350;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp350);
                    this.Manager.Comment("reaching state \'S919\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp350, "c of FileOperationToBreakLeaseRequest, state S919");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S920\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S921\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S922\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp351;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp351);
                    this.Manager.Comment("reaching state \'S923\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp351, "c of FileOperationToBreakLeaseRequest, state S923");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S924\'");
                    int temp353 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS911OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS911OnLeaseBreakNotificationChecker1)));
                    if ((temp353 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS865();
                        goto label146;
                    }
                    if ((temp353 == 1)) {
                        this.Manager.Comment("reaching state \'S925\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S926\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S927\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS911LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S928\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S929\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S930\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp352;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                                    "2002,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp352);
                            this.Manager.Comment("reaching state \'S931\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp352, "c of FileOperationToBreakLeaseRequest, state S931");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS861();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS911LeaseBreakResponseChecker)));
                        }
                        goto label146;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS911OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS911OnLeaseBreakNotificationChecker1)));
                label146:
;
                    goto label147;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker1)));
            label147:
;
                goto label149;
            }
            if ((temp358 == 3)) {
                this.Manager.Comment("reaching state \'S932\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S933\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S934\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S935\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S936\'");
                int temp357 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker3)));
                if ((temp357 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS466();
                    goto label148;
                }
                if ((temp357 == 1)) {
                    this.Manager.Comment("reaching state \'S937\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp355;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp355);
                    this.Manager.Comment("reaching state \'S938\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp355, "c of FileOperationToBreakLeaseRequest, state S938");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S939\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S940\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S941\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp356;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientGuidDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp356);
                    this.Manager.Comment("reaching state \'S942\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp356, "c of FileOperationToBreakLeaseRequest, state S942");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadWriteLeaseV1TestCaseS813();
                    goto label148;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker2)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker3)));
            label148:
;
                goto label149;
            }
            throw new InvalidOperationException("never reached");
        label149:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS911ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S912");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS911ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S912");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS911ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S912");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S917");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S917");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S917");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S917");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S917");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S917");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S917");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S917");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S917");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S917");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS911OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S924");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S924");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S924");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S924");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS911OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S924");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S924");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S924");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S924");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS911LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S927");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S927");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS911ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S912");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S936");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S936");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S936");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S936");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS911CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S936");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S936");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S936");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S936");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S936");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S943
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS943() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS943");
            this.Manager.Comment("reaching state \'S943\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp359;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp359);
            this.Manager.AddReturn(ReadConfigInfo, null, temp359);
            this.Manager.Comment("reaching state \'S944\'");
            int temp365 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS943ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS943ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS943ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS943ReadConfigChecker3)));
            if ((temp365 == 0)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label152;
            }
            if ((temp365 == 1)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label152;
            }
            if ((temp365 == 2)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label152;
            }
            if ((temp365 == 3)) {
                this.Manager.Comment("reaching state \'S945\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S946\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S947\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S948\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S949\'");
                int temp364 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS943CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS943CreateResponseChecker1)));
                if ((temp364 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS871();
                    goto label151;
                }
                if ((temp364 == 1)) {
                    this.Manager.Comment("reaching state \'S950\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp360;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp360);
                    this.Manager.Comment("reaching state \'S951\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp360, "c of FileOperationToBreakLeaseRequest, state S951");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S952\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S953\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S954\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp361;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp361);
                    this.Manager.Comment("reaching state \'S955\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp361, "c of FileOperationToBreakLeaseRequest, state S955");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S956\'");
                    int temp363 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS943OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS943OnLeaseBreakNotificationChecker1)));
                    if ((temp363 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS865();
                        goto label150;
                    }
                    if ((temp363 == 1)) {
                        this.Manager.Comment("reaching state \'S957\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S958\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S959\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS943LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S960\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S961\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S962\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp362;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb21,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp362);
                            this.Manager.Comment("reaching state \'S963\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp362, "c of FileOperationToBreakLeaseRequest, state S963");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS861();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS943LeaseBreakResponseChecker)));
                        }
                        goto label150;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS943OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS943OnLeaseBreakNotificationChecker1)));
                label150:
;
                    goto label151;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS943CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS943CreateResponseChecker1)));
            label151:
;
                goto label152;
            }
            throw new InvalidOperationException("never reached");
        label152:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS943ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S944");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS943ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S944");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS943ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S944");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS943ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S944");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS943CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S949");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S949");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S949");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S949");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S949");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS943CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S949");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S949");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S949");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S949");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S949");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS943OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S956");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S956");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S956");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S956");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS943OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S956");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S956");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S956");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S956");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS943LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S959");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S959");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S964
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS964() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS964");
            this.Manager.Comment("reaching state \'S964\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp366;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp366);
            this.Manager.AddReturn(ReadConfigInfo, null, temp366);
            this.Manager.Comment("reaching state \'S965\'");
            int temp372 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS964ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS964ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS964ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS964ReadConfigChecker3)));
            if ((temp372 == 0)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label155;
            }
            if ((temp372 == 1)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label155;
            }
            if ((temp372 == 2)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label155;
            }
            if ((temp372 == 3)) {
                this.Manager.Comment("reaching state \'S966\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S967\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S968\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S969\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S970\'");
                int temp371 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS964CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS964CreateResponseChecker1)));
                if ((temp371 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS871();
                    goto label154;
                }
                if ((temp371 == 1)) {
                    this.Manager.Comment("reaching state \'S971\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp367;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp367);
                    this.Manager.Comment("reaching state \'S972\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp367, "c of FileOperationToBreakLeaseRequest, state S972");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S973\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S974\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S975\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp368;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp368);
                    this.Manager.Comment("reaching state \'S976\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp368, "c of FileOperationToBreakLeaseRequest, state S976");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S977\'");
                    int temp370 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS964OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS964OnLeaseBreakNotificationChecker1)));
                    if ((temp370 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS865();
                        goto label153;
                    }
                    if ((temp370 == 1)) {
                        this.Manager.Comment("reaching state \'S978\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S979\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S980\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS964LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S981\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S982\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S983\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp369;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                                    "fferentLeaseKey,Smb21,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp369);
                            this.Manager.Comment("reaching state \'S984\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp369, "c of FileOperationToBreakLeaseRequest, state S984");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS861();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS964LeaseBreakResponseChecker)));
                        }
                        goto label153;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS964OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS964OnLeaseBreakNotificationChecker1)));
                label153:
;
                    goto label154;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS964CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS964CreateResponseChecker1)));
            label154:
;
                goto label155;
            }
            throw new InvalidOperationException("never reached");
        label155:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS964ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S965");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS964ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S965");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS964ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S965");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS964ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S965");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS964CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S970");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S970");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S970");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S970");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S970");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS964CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S970");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S970");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S970");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S970");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S970");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS964OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S977");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S977");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S977");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S977");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS964OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S977");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S977");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S977");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S977");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS964LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S980");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S980");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
        
        #region Test Starting in S985
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadWriteLeaseV1TestCaseS985() {
            this.Manager.BeginTest("BreakReadWriteLeaseV1TestCaseS985");
            this.Manager.Comment("reaching state \'S985\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp373;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp373);
            this.Manager.AddReturn(ReadConfigInfo, null, temp373);
            this.Manager.Comment("reaching state \'S986\'");
            int temp379 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS985ReadConfigChecker)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS985ReadConfigChecker1)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS985ReadConfigChecker2)), new ExpectedReturn(BreakReadWriteLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadWriteLeaseV1TestCaseS985ReadConfigChecker3)));
            if ((temp379 == 0)) {
                BreakReadWriteLeaseV1TestCaseS62();
                goto label158;
            }
            if ((temp379 == 1)) {
                BreakReadWriteLeaseV1TestCaseS68();
                goto label158;
            }
            if ((temp379 == 2)) {
                BreakReadWriteLeaseV1TestCaseS883();
                goto label158;
            }
            if ((temp379 == 3)) {
                this.Manager.Comment("reaching state \'S987\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S988\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S989\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,5," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 5u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S990\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S991\'");
                int temp378 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS985CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS985CreateResponseChecker1)));
                if ((temp378 == 0)) {
                    BreakReadWriteLeaseV1TestCaseS871();
                    goto label157;
                }
                if ((temp378 == 1)) {
                    this.Manager.Comment("reaching state \'S992\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp374;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Same" +
                            "ClientId,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp374);
                    this.Manager.Comment("reaching state \'S993\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp374, "c of FileOperationToBreakLeaseRequest, state S993");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S994\'");
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                    this.Manager.Comment("reaching state \'S995\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                    this.Manager.Comment("reaching state \'S996\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp375;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_WITHOUT_OVERWRITE,Seco" +
                            "ndClient,Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.OPEN_WITHOUT_OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp375);
                    this.Manager.Comment("reaching state \'S997\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp375, "c of FileOperationToBreakLeaseRequest, state S997");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] The file is opened by a local application or via another protocol, or opened via SMB2 without providing the same ClientId, and requested access includes any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRONIZE."", ""[TestInfo] WRITE caching lease state is broken."", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease.Breaking is set to TRUE.""");
                        throw;
                    }
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] The file is opened by a local application or via another protocol, or " +
                            "opened via SMB2 without providing the same ClientId, and requested access includ" +
                            "es any flags other than FILE_READ_ATTRIBUTES, FILE_WRITE_ATTRIBUTES, and SYNCHRO" +
                            "NIZE.\"");
                    this.Manager.Checkpoint("\"[TestInfo] WRITE caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease.Breaking is set to TRUE.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    this.Manager.Comment("reaching state \'S998\'");
                    int temp377 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS985OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS985OnLeaseBreakNotificationChecker1)));
                    if ((temp377 == 0)) {
                        BreakReadWriteLeaseV1TestCaseS865();
                        goto label156;
                    }
                    if ((temp377 == 1)) {
                        this.Manager.Comment("reaching state \'S999\'");
                        this.Manager.Comment("executing step \'call LeaseBreakAcknowledgmentRequest(ValidLeaseKey,1)\'");
                        this.ILeasingAdapterInstance.LeaseBreakAcknowledgmentRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ModelLeaseKeyType)(0)), 1u);
                        this.Manager.Comment("Unbinding variable \'leaseState\'");
                        this.leaseState.Unbind();
                        this.Manager.Comment("reaching state \'S1000\'");
                        this.Manager.Comment("checking step \'return LeaseBreakAcknowledgmentRequest\'");
                        this.Manager.Comment("reaching state \'S1001\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS985LeaseBreakResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S1002\'");
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                            this.Manager.Comment("reaching state \'S1003\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                            this.Manager.Comment("reaching state \'S1004\'");
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp376;
                            this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                                    "idDifferentLeaseKey,Smb21,out _)\'");
                            this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp376);
                            this.Manager.Comment("reaching state \'S1005\'");
                            this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                                    "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                                    "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                            try {
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                                "MaxSmbVersionSupported",
                                                "IsLeasingSupported",
                                                "IsDirectoryLeasingSupported"}, new object[] {
                                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                                this.c.Value.IsLeasingSupported,
                                                this.c.Value.IsDirectoryLeasingSupported}), temp376, "c of FileOperationToBreakLeaseRequest, state S1005");
                            }
                            catch (TransactionFailedException ) {
                                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                                throw;
                            }
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                            "MaxSmbVersionSupported",
                                            "IsLeasingSupported",
                                            "IsDirectoryLeasingSupported"}, new object[] {
                                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                            this.c.Value.IsLeasingSupported,
                                            this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                                    " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                                    "ed \r\n");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                                    "singSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                            this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                            this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                            this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                            this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                            this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                            this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                            this.Manager.Comment("Unbinding variable \'c1\'");
                            this.c1.Unbind();
                            this.Manager.Comment("Unbinding variable \'v4\'");
                            this.v4.Unbind();
                            BreakReadWriteLeaseV1TestCaseS861();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.LeaseBreakResponseInfo, null, new LeaseBreakResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS985LeaseBreakResponseChecker)));
                        }
                        goto label156;
                    }
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS985OnLeaseBreakNotificationChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadWriteLeaseV1TestCaseS985OnLeaseBreakNotificationChecker1)));
                label156:
;
                    goto label157;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS985CreateResponseChecker)), new ExpectedEvent(BreakReadWriteLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadWriteLeaseV1TestCaseS985CreateResponseChecker1)));
            label157:
;
                goto label158;
            }
            throw new InvalidOperationException("never reached");
        label158:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS985ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S986");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS985ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S986");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS985ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S986");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS985ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S986");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS985CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S991");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S991");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S991");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S991");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S991");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS985CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,5,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S991");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S991");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, leaseState, "leaseState of CreateResponse, state S991");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S991");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S991");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadWriteLeaseV1TestCaseS985OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S998");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S998");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S998");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS985OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_" +
                    "REQUIRED,5,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S998");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(1)), flags, "flags of OnLeaseBreakNotification, state S998");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 5u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S998");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S998");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that lease acknowledgment is required."", ""[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING."", ""[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Lease.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new lease state indicated by the object store""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.7: Otherwise the server MUST set the Flags field of the message " +
                    "to SMB2_NOTIFY_BREAK_LEASE_FLAG_ACK_REQUIRED, indicating to the client that leas" +
                    "e acknowledgment is required.\"");
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is not SMB2_LEASE_READ_CACHING.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set the CurrentLeaseState field of the message to Leas" +
                    "e.LeaseState, set Lease.Breaking to TRUE, set Lease.BreakToLeaseState to the new" +
                    " lease state indicated by the object store\"");
        }
        
        private void BreakReadWriteLeaseV1TestCaseS985LeaseBreakResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, uint leaseState) {
            this.Manager.Comment("checking step \'event LeaseBreakResponse(STATUS_SUCCESS,1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of LeaseBreakResponse, state S1001");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of LeaseBreakResponse, state S1001");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] The server MUST locate the lease on which the client is acknowledging a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey of the request as the lookup key."", ""[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the request, and MUST set Lease.Breaking to FALSE."", ""[MS-SMB2] The server then MUST construct a lease break response using the syntax specified in section 2.2.25 with the following values:"", ""[MS-SMB2] 	LeaseState MUST be set to Lease.LeaseState.""");
                throw;
            }
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST locate the lease on which the client is acknowledging " +
                    "a lease break by performing a lookup in LeaseTable.LeaseList using the LeaseKey " +
                    "of the request as the lookup key.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST set Lease.LeaseState to LeaseState received in the req" +
                    "uest, and MUST set Lease.Breaking to FALSE.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server then MUST construct a lease break response using the syntax" +
                    " specified in section 2.2.25 with the following values:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tLeaseState MUST be set to Lease.LeaseState.\"");
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        #endregion
    }
}
