// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReplayCreateWithoutHandleTestCase : PtfTestClassBase {
        
        public ReplayCreateWithoutHandleTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void PreConstraintDelegate1();
        
        public delegate void CreateResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c);
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter), "CreateResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter IReplayAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> c1;
        
        private IVariable<int> durableHandleResponse;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<int> v2;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> v3;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IReplayAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter))));
            this.Manager.Subscribe(CreateResponseInfo, this.IReplayAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("c1");
            this.durableHandleResponse = this.Manager.CreateVariable<int>("durableHandleResponse");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("v3");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS0() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp0);
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp0, "c of ReadConfig, state S1");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S2\'");
            int temp3 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker1)));
            if ((temp3 == 0)) {
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S11\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S12\'");
                int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker3)));
                if ((temp1 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS13();
                    goto label0;
                }
                if ((temp1 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS13();
                    goto label0;
                }
                if ((temp1 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS14();
                    goto label0;
                }
                if ((temp1 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS14();
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker3)));
            label0:
;
                goto label2;
            }
            if ((temp3 == 1)) {
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,CAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S5\'");
                int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker5)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker6)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker7)));
                if ((temp2 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS6();
                    goto label1;
                }
                if ((temp2 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS7();
                    goto label1;
                }
                if ((temp2 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS8();
                    goto label1;
                }
                if ((temp2 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS9();
                    goto label1;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker5)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker6)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker7)));
            label1:
;
                goto label2;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S2\'.");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S12");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S12");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S12");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS13() {
            this.Manager.Comment("reaching state \'S13\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S12");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S12");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S12");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S12");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S12");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S12");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS14() {
            this.Manager.Comment("reaching state \'S14\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S12");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S12");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S12");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateNotIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker1() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS6() {
            this.Manager.Comment("reaching state \'S6\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS7() {
            this.Manager.Comment("reaching state \'S7\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS8() {
            this.Manager.Comment("reaching state \'S8\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS0CreateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S5");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS9() {
            this.Manager.Comment("reaching state \'S9\'");
        }
        #endregion
        
        #region Test Starting in S102
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS102() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS102");
            this.Manager.Comment("reaching state \'S102\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp4;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp4);
            this.Manager.Comment("reaching state \'S103\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp4, "c of ReadConfig, state S103");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S104\'");
            int temp7 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker2)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker3)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S105\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,NormalHandle,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S107\'");
                int temp5 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker3)));
                if ((temp5 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS108();
                    goto label3;
                }
                if ((temp5 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS109();
                    goto label3;
                }
                if ((temp5 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS110();
                    goto label3;
                }
                if ((temp5 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS111();
                    goto label3;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker3)));
            label3:
;
                goto label5;
            }
            if ((temp7 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label5;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S104\'.");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker2() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS108() {
            this.Manager.Comment("reaching state \'S108\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS109() {
            this.Manager.Comment("reaching state \'S109\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS110() {
            this.Manager.Comment("reaching state \'S110\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S107");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S107");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS111() {
            this.Manager.Comment("reaching state \'S111\'");
        }
        
        private void PreConstraintChecker3() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,CAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
            this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("checking step \'return CreateRequest\'");
            this.Manager.Comment("reaching state \'S27\'");
            int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker5)));
            if ((temp6 == 0)) {
                this.Manager.Comment("reaching state \'S28\'");
                goto label4;
            }
            if ((temp6 == 1)) {
                this.Manager.Comment("reaching state \'S29\'");
                goto label4;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker5)));
        label4:
;
        }
        
        private void ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S27");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S27");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If an Open is n" +
                        "ot found, the server MUST continue the create process specified in the \"Open Exe" +
                        "cution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9." +
                        "10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE" +
                        "_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, " +
                        "the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durabl" +
                        "eOwner to a security descriptor accessible only by the user represented by Open." +
                        "Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInf" +
                        "o] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateInc" +
                        "ludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fro" +
                        "m Open, as specified in the \"Response Construction\" phase, with the following ad" +
                        "ditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent " +
                        "is FALSE\", \"[TestInfo] If the command request does not include FileId, this sect" +
                        "ion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command i" +
                        "s Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS102CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S27");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S27");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S27");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If an Open is n" +
                        "ot found, the server MUST continue the create process specified in the \"Open Exe" +
                        "cution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9." +
                        "10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE" +
                        "_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, " +
                        "the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durabl" +
                        "eOwner to a security descriptor accessible only by the user represented by Open." +
                        "Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInf" +
                        "o] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateInc" +
                        "ludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fro" +
                        "m Open, as specified in the \"Response Construction\" phase, with the following ad" +
                        "ditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent " +
                        "is FALSE\", \"[TestInfo] If the command request does not include FileId, this sect" +
                        "ion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command i" +
                        "s Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S112
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS112() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS112");
            this.Manager.Comment("reaching state \'S112\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp8;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp8);
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp8, "c of ReadConfig, state S113");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S114\'");
            int temp10 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker4)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker5)));
            if ((temp10 == 0)) {
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S117\'");
                int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker3)));
                if ((temp9 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS36();
                    goto label6;
                }
                if ((temp9 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS37();
                    goto label6;
                }
                if ((temp9 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS38();
                    goto label6;
                }
                if ((temp9 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS39();
                    goto label6;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker3)));
            label6:
;
                goto label7;
            }
            if ((temp10 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label7;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S114\'.");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker4() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S117");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S117");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS36() {
            this.Manager.Comment("reaching state \'S36\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S117");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S117");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS37() {
            this.Manager.Comment("reaching state \'S37\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S117");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S117");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS38() {
            this.Manager.Comment("reaching state \'S38\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS112CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S117");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S117");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S117");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS39() {
            this.Manager.Comment("reaching state \'S39\'");
        }
        
        private void PreConstraintChecker5() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S118
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS118() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS118");
            this.Manager.Comment("reaching state \'S118\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp11;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp11);
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp11, "c of ReadConfig, state S119");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S120\'");
            int temp13 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker6)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker7)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,InvalidChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S123\'");
                int temp12 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker3)));
                if ((temp12 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS36();
                    goto label8;
                }
                if ((temp12 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS37();
                    goto label8;
                }
                if ((temp12 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS38();
                    goto label8;
                }
                if ((temp12 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS39();
                    goto label8;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker3)));
            label8:
;
                goto label9;
            }
            if ((temp13 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label9;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S120\'.");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker6() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS118CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S123");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S123");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker7() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS124() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS124");
            this.Manager.Comment("reaching state \'S124\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp14;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp14);
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp14, "c of ReadConfig, state S125");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S126\'");
            int temp16 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker8)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker9)));
            if ((temp16 == 0)) {
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S129\'");
                int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker3)));
                if ((temp15 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS36();
                    goto label10;
                }
                if ((temp15 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS37();
                    goto label10;
                }
                if ((temp15 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS38();
                    goto label10;
                }
                if ((temp15 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS39();
                    goto label10;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker3)));
            label10:
;
                goto label11;
            }
            if ((temp16 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label11;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S126\'.");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker8() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S129");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S129");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S129");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S129");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S129");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S129");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS124CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S129");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S129");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker9() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS130() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS130");
            this.Manager.Comment("reaching state \'S130\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp17;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp17);
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp17, "c of ReadConfig, state S131");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S132\'");
            int temp19 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker10)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker11)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S133\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,ChannelSequenceBoundaryValid,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S135\'");
                int temp18 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker3)));
                if ((temp18 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS36();
                    goto label12;
                }
                if ((temp18 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS37();
                    goto label12;
                }
                if ((temp18 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS38();
                    goto label12;
                }
                if ((temp18 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS39();
                    goto label12;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker3)));
            label12:
;
                goto label13;
            }
            if ((temp19 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label13;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S132\'.");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker10() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S135");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S135");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S135");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S135");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S135");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S135");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS130CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S135");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S135");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker11() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S136
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS136() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS136");
            this.Manager.Comment("reaching state \'S136\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp20;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp20);
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp20, "c of ReadConfig, state S137");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S138\'");
            int temp22 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker12)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker13)));
            if ((temp22 == 0)) {
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV2,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S141\'");
                int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker3)));
                if ((temp21 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS36();
                    goto label14;
                }
                if ((temp21 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS37();
                    goto label14;
                }
                if ((temp21 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS38();
                    goto label14;
                }
                if ((temp21 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS39();
                    goto label14;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker3)));
            label14:
;
                goto label15;
            }
            if ((temp22 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label15;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S138\'.");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker12() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS136CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S141");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV2, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker13() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S142
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS142() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS142");
            this.Manager.Comment("reaching state \'S142\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp23;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp23);
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp23, "c of ReadConfig, state S143");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S144\'");
            int temp25 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker14)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker15)));
            if ((temp25 == 0)) {
                this.Manager.Comment("reaching state \'S145\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S146\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S147\'");
                int temp24 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker3)));
                if ((temp24 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS148();
                    goto label16;
                }
                if ((temp24 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS37();
                    goto label16;
                }
                if ((temp24 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS38();
                    goto label16;
                }
                if ((temp24 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS39();
                    goto label16;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker3)));
            label16:
;
                goto label17;
            }
            if ((temp25 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label17;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S144\'.");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker14() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S147");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S147");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS148() {
            this.Manager.Comment("reaching state \'S148\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S147");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S147");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S147");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S147");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelII, LeaseState is LeaseStateIsNone" +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS142CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S147");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S147");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker15() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S149
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS149() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS149");
            this.Manager.Comment("reaching state \'S149\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp26;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp26);
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp26, "c of ReadConfig, state S150");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S151\'");
            int temp28 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker16)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker17)));
            if ((temp28 == 0)) {
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,CAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV2,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelLeaseV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S153\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S154\'");
                int temp27 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS149CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS149CreateResponseChecker1)));
                if ((temp27 == 0)) {
                    this.Manager.Comment("reaching state \'S155\'");
                    goto label18;
                }
                if ((temp27 == 1)) {
                    this.Manager.Comment("reaching state \'S156\'");
                    goto label18;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS149CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS149CreateResponseChecker1)));
            label18:
;
                goto label19;
            }
            if ((temp28 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label19;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S151\'.");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker16() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS149CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S154");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S154");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If an Open is n" +
                        "ot found, the server MUST continue the create process specified in the \"Open Exe" +
                        "cution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9." +
                        "10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE" +
                        "_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, " +
                        "the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durabl" +
                        "eOwner to a security descriptor accessible only by the user represented by Open." +
                        "Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInf" +
                        "o] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateInc" +
                        "ludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fro" +
                        "m Open, as specified in the \"Response Construction\" phase, with the following ad" +
                        "ditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent " +
                        "is FALSE\", \"[TestInfo] If the command request does not include FileId, this sect" +
                        "ion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command i" +
                        "s Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS149CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S154");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S154");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S154");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.req" +
                        "uestedOplockLevel is OplockLevelLeaseV2\", \"[MS-SMB2] 3.3.5.9.10: If an Open is n" +
                        "ot found, the server MUST continue the create process specified in the \"Open Exe" +
                        "cution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9." +
                        "10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE" +
                        "_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, " +
                        "the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durabl" +
                        "eOwner to a security descriptor accessible only by the user represented by Open." +
                        "Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInf" +
                        "o] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is LeaseStateInc" +
                        "ludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fro" +
                        "m Open, as specified in the \"Response Construction\" phase, with the following ad" +
                        "ditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent " +
                        "is FALSE\", \"[TestInfo] If the command request does not include FileId, this sect" +
                        "ion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30, request command i" +
                        "s Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV2\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV2, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker17() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S15
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS15() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS15");
            this.Manager.Comment("reaching state \'S15\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp29;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp29);
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp29, "c of ReadConfig, state S16");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S17\'");
            int temp31 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker18)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker19)));
            if ((temp31 == 0)) {
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,CAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S20\'");
                int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker3)));
                if ((temp30 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS21();
                    goto label20;
                }
                if ((temp30 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS22();
                    goto label20;
                }
                if ((temp30 == 2)) {
                    this.Manager.Comment("reaching state \'S23\'");
                    goto label20;
                }
                if ((temp30 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS24();
                    goto label20;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker3)));
            label20:
;
                goto label21;
            }
            if ((temp31 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label21;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S17\'.");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker18() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S20");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S20");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S20");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS21() {
            this.Manager.Comment("reaching state \'S21\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S20");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S20");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S20");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS22() {
            this.Manager.Comment("reaching state \'S22\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S20");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S20");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S20");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS15CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S20");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S20");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S20");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS24() {
            this.Manager.Comment("reaching state \'S24\'");
        }
        
        private void PreConstraintChecker19() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S157
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS157() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS157");
            this.Manager.Comment("reaching state \'S157\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp32;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp32);
            this.Manager.Comment("reaching state \'S158\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp32, "c of ReadConfig, state S158");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S159\'");
            int temp34 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker20)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker21)));
            if ((temp34 == 0)) {
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S161\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S162\'");
                int temp33 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker3)));
                if ((temp33 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS36();
                    goto label22;
                }
                if ((temp33 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS37();
                    goto label22;
                }
                if ((temp33 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS38();
                    goto label22;
                }
                if ((temp33 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS39();
                    goto label22;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker3)));
            label22:
;
                goto label23;
            }
            if ((temp34 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label23;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S159\'.");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker20() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S162");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S162");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S162");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S162");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S162");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S162");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS157CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S162");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S162");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S162");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker21() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S163
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS163() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS163");
            this.Manager.Comment("reaching state \'S163\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp35;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp35);
            this.Manager.Comment("reaching state \'S164\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp35, "c of ReadConfig, state S164");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S165\'");
            int temp37 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker22)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker23)));
            if ((temp37 == 0)) {
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S168\'");
                int temp36 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS163CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS163CreateResponseChecker1)));
                if ((temp36 == 0)) {
                    this.Manager.Comment("reaching state \'S169\'");
                    goto label24;
                }
                if ((temp36 == 1)) {
                    this.Manager.Comment("reaching state \'S170\'");
                    goto label24;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS163CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS163CreateResponseChecker1)));
            label24:
;
                goto label25;
            }
            if ((temp37 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label25;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S165\'.");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker22() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS163CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S168");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S168");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command" +
                        " is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS163CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S168");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S168");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: If an Open is " +
                        "not found, the server MUST continue the create process specified in the \"Open Ex" +
                        "ecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9" +
                        ".10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABL" +
                        "E_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase," +
                        " the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durab" +
                        "leOwner to a security descriptor accessible only by the user represented by Open" +
                        ".Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestIn" +
                        "fo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateIn" +
                        "cludeH\", \"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response fr" +
                        "om Open, as specified in the \"Response Construction\" phase, with the following a" +
                        "dditional steps, and send the response to client\", \"[TestInfo] Open.IsPersistent" +
                        " is FALSE\", \"[TestInfo] If the command request does not include FileId, this sec" +
                        "tion MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command" +
                        " is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker23() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S171
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS171() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS171");
            this.Manager.Comment("reaching state \'S171\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp38;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp38);
            this.Manager.Comment("reaching state \'S172\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp38, "c of ReadConfig, state S172");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S173\'");
            int temp40 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker24)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker25)));
            if ((temp40 == 0)) {
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S176\'");
                int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker3)));
                if ((temp39 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS36();
                    goto label26;
                }
                if ((temp39 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS37();
                    goto label26;
                }
                if ((temp39 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS38();
                    goto label26;
                }
                if ((temp39 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS39();
                    goto label26;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker3)));
            label26:
;
                goto label27;
            }
            if ((temp40 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label27;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S173\'.");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker24() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS171CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker25() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S177
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS177() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS177");
            this.Manager.Comment("reaching state \'S177\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp41;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp41);
            this.Manager.Comment("reaching state \'S178\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp41, "c of ReadConfig, state S178");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S179\'");
            int temp43 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker26)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker27)));
            if ((temp43 == 0)) {
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S182\'");
                int temp42 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker3)));
                if ((temp42 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS36();
                    goto label28;
                }
                if ((temp42 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS37();
                    goto label28;
                }
                if ((temp42 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS38();
                    goto label28;
                }
                if ((temp42 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS39();
                    goto label28;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker3)));
            label28:
;
                goto label29;
            }
            if ((temp43 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label29;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S179\'.");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker26() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S182");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S182");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S182");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S182");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S182");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S182");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS177CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S182");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S182");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNone"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelNone, LeaseState is LeaseStateIsNo" +
                    "ne\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker27() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S183
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS183() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS183");
            this.Manager.Comment("reaching state \'S183\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp44;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp44);
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp44, "c of ReadConfig, state S184");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S185\'");
            int temp46 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker28)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker29)));
            if ((temp46 == 0)) {
                this.Manager.Comment("reaching state \'S186\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2Persistent,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S188\'");
                int temp45 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker3)));
                if ((temp45 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS148();
                    goto label30;
                }
                if ((temp45 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS148();
                    goto label30;
                }
                if ((temp45 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS189();
                    goto label30;
                }
                if ((temp45 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS189();
                    goto label30;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker3)));
            label30:
;
                goto label31;
            }
            if ((temp46 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label31;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S185\'.");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker28() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S188");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S188");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S188");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S188");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S188");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S188");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS189() {
            this.Manager.Comment("reaching state \'S189\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS183CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S188");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S188");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S188");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelNone\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker29() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S190
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS190() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS190");
            this.Manager.Comment("reaching state \'S190\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp47;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp47);
            this.Manager.Comment("reaching state \'S191\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp47, "c of ReadConfig, state S191");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S192\'");
            int temp49 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker30)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker31)));
            if ((temp49 == 0)) {
                this.Manager.Comment("reaching state \'S193\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2Persistent,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S195\'");
                int temp48 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS190CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS190CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS190CreateResponseChecker2)));
                if ((temp48 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS148();
                    goto label32;
                }
                if ((temp48 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS189();
                    goto label32;
                }
                if ((temp48 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS189();
                    goto label32;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS190CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS190CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS190CreateResponseChecker2)));
            label32:
;
                goto label33;
            }
            if ((temp49 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label33;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S192\'.");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker30() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS190CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S195");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequest.re" +
                        "questedOplockLevel is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: If an Open is no" +
                        "t found, the server MUST continue the create process specified in the \"Open Exec" +
                        "ution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.1" +
                        "0: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_" +
                        "HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, t" +
                        "he server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Durable" +
                        "Owner to a security descriptor accessible only by the user represented by Open.S" +
                        "ession.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[MS-SMB2]" +
                        " 3.3.5.9.10: The server MUST construct the create response from Open, as specifi" +
                        "ed in the \"Response Construction\" phase, with the following additional steps, an" +
                        "d send the response to client\", \"[TestInfo] Open.IsPersistent is FALSE\", \"[TestI" +
                        "nfo] If the command request does not include FileId, this section MUST be skippe" +
                        "d\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS190CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S195");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.D" +
                        "ialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STY" +
                        "PE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the ser" +
                        "ver MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the" +
                        " RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handli" +
                        "ng the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] create" +
                        "Request.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequ" +
                        "est.requestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] If the command request does not include FileId, this section MUST be skippe" +
                        "d\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS190CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S195");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.D" +
                        "ialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STY" +
                        "PE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the ser" +
                        "ver MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connecti" +
                        "on.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the" +
                        " RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handli" +
                        "ng the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] create" +
                        "Request.modelDurableHandle is DurableHandleV2Persistent\", \"[TestInfo] createRequ" +
                        "est.requestedOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If an Open is" +
                        " not found, the server MUST continue the create process specified in the \"Open E" +
                        "xecution\" Phase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5." +
                        "9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURAB" +
                        "LE_HANDLE_REQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase" +
                        ", the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.Dura" +
                        "bleOwner to a security descriptor accessible only by the user represented by Ope" +
                        "n.Session.SecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestI" +
                        "nfo] If the command request does not include FileId, this section MUST be skippe" +
                        "d\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker31() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S196
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS196() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS196");
            this.Manager.Comment("reaching state \'S196\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp50;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp50);
            this.Manager.Comment("reaching state \'S197\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp50, "c of ReadConfig, state S197");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S198\'");
            int temp52 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker32)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker33)));
            if ((temp52 == 0)) {
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,NormalHandle,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S201\'");
                int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker3)));
                if ((temp51 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS108();
                    goto label34;
                }
                if ((temp51 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS109();
                    goto label34;
                }
                if ((temp51 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS110();
                    goto label34;
                }
                if ((temp51 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS111();
                    goto label34;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker3)));
            label34:
;
                goto label35;
            }
            if ((temp52 == 1)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label35;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S198\'.");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker32() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II"", ""[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, TreeConnect.Share.Type includes STYPE_C" +
                    "LUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS196CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S201");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker33() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS30() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp53;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp53);
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp53, "c of ReadConfig, state S31");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S32\'");
            int temp56 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker34)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker35)));
            if ((temp56 == 0)) {
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S35\'");
                int temp54 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker3)));
                if ((temp54 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS36();
                    goto label36;
                }
                if ((temp54 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS37();
                    goto label36;
                }
                if ((temp54 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS38();
                    goto label36;
                }
                if ((temp54 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS39();
                    goto label36;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker3)));
            label36:
;
                goto label38;
            }
            if ((temp56 == 1)) {
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,CAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S42\'");
                int temp55 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker5)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker6)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker7)));
                if ((temp55 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS43();
                    goto label37;
                }
                if ((temp55 == 1)) {
                    this.Manager.Comment("reaching state \'S44\'");
                    goto label37;
                }
                if ((temp55 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS6();
                    goto label37;
                }
                if ((temp55 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS8();
                    goto label37;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker5)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker6)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker7)));
            label37:
;
                goto label38;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S32\'.");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker34() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S35");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S35");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S35");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S35");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S35");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S35");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S35");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S35");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S35");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S35");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S35");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S35");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker35() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS43() {
            this.Manager.Comment("reaching state \'S43\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6 In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.6 In the \"Successful Open Initialization\" phase, the server MU" +
                    "ST set Open.IsDurable to TRUE.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS30CreateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S45
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS45() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS45");
            this.Manager.Comment("reaching state \'S45\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp57;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp57);
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp57, "c of ReadConfig, state S46");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S47\'");
            int temp60 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker36)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker37)));
            if ((temp60 == 0)) {
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,CAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S50\'");
                int temp58 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker3)));
                if ((temp58 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS22();
                    goto label39;
                }
                if ((temp58 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS22();
                    goto label39;
                }
                if ((temp58 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS24();
                    goto label39;
                }
                if ((temp58 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS51();
                    goto label39;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker3)));
            label39:
;
                goto label41;
            }
            if ((temp60 == 1)) {
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,CAShare,ClientNotSupportPersistent,MainChannel,DefaultChannelSequence,WithReplayFlag,DurableHandleV2,OplockLevelBatch,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelBatch, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S54\'");
                int temp59 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker5)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker6)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker7)));
                if ((temp59 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS43();
                    goto label40;
                }
                if ((temp59 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS43();
                    goto label40;
                }
                if ((temp59 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS8();
                    goto label40;
                }
                if ((temp59 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS9();
                    goto label40;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker5)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker6)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker7)));
            label40:
;
                goto label41;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S47\'.");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker36() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, th" +
                        "e server MUST continue the create process specified in the \"Open Execution\" Phas" +
                        "e, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The serv" +
                        "er MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQU" +
                        "EST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a " +
                        "security descriptor accessible only by the user represented by Open.Session.Secu" +
                        "rityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5.9.10" +
                        ": The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPON" +
                        "SE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the F" +
                        "lags field of the request and if neither of the following conditions are met:\", " +
                        "\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] Ope" +
                        "n.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\", \"[TestInfo] If the co" +
                        "mmand request does not include FileId, this section MUST be skipped\", \"[TestInfo" +
                        "] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, th" +
                        "e server MUST continue the create process specified in the \"Open Execution\" Phas" +
                        "e, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The serv" +
                        "er MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQU" +
                        "EST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a " +
                        "security descriptor accessible only by the user represented by Open.Session.Secu" +
                        "rityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5.9.10" +
                        ": The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPON" +
                        "SE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the F" +
                        "lags field of the request and if neither of the following conditions are met:\", " +
                        "\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] Ope" +
                        "n.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\", \"[TestInfo] If the co" +
                        "mmand request does not include FileId, this section MUST be skipped\", \"[TestInfo" +
                        "] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Di" +
                        "alect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYP" +
                        "E_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the serv" +
                        "er MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connectio" +
                        "n.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the R" +
                        "equestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRe" +
                        "quest.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requeste" +
                        "dOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_" +
                        "PERSISTENT bit is not set in the Flags field of this create context, if Requeste" +
                        "dOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if" +
                        " the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_" +
                        "REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE" +
                        "_HANDLE_CACHING, the server MUST ignore this create context and skip this sectio" +
                        "n\", \"[TestTag] Compatibility\", \"[TestInfo] If the command request does not inclu" +
                        "de FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb3" +
                        "0, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Di" +
                        "alect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYP" +
                        "E_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the serv" +
                        "er MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connectio" +
                        "n.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the R" +
                        "equestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRe" +
                        "quest.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requeste" +
                        "dOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_" +
                        "PERSISTENT bit is not set in the Flags field of this create context, if Requeste" +
                        "dOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if" +
                        " the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_" +
                        "REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE" +
                        "_HANDLE_CACHING, the server MUST ignore this create context and skip this sectio" +
                        "n\", \"[TestTag] Compatibility\", \"[TestInfo] If the command request does not inclu" +
                        "de FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb3" +
                        "0, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS51() {
            this.Manager.Comment("reaching state \'S51\'");
        }
        
        private void PreConstraintChecker37() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S54");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S54");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S54");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, th" +
                        "e server MUST continue the create process specified in the \"Open Execution\" Phas" +
                        "e, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The serv" +
                        "er MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQU" +
                        "EST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a " +
                        "security descriptor accessible only by the user represented by Open.Session.Secu" +
                        "rityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5.9.10" +
                        ": The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPON" +
                        "SE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the F" +
                        "lags field of the request and if neither of the following conditions are met:\", " +
                        "\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] Ope" +
                        "n.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\", \"[TestInfo] If the co" +
                        "mmand request does not include FileId, this section MUST be skipped\", \"[TestInfo" +
                        "] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S54");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S54");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S54");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the " +
                        "SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRequest" +
                        ".modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOplo" +
                        "ckLevel is OplockLevelBatch\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found, th" +
                        "e server MUST continue the create process specified in the \"Open Execution\" Phas" +
                        "e, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The serv" +
                        "er MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQU" +
                        "EST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server M" +
                        "UST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a " +
                        "security descriptor accessible only by the user represented by Open.Session.Secu" +
                        "rityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[MS-SMB2] 3.3.5.9.10" +
                        ": The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPON" +
                        "SE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the F" +
                        "lags field of the request and if neither of the following conditions are met:\", " +
                        "\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] Ope" +
                        "n.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\", \"[TestInfo] If the co" +
                        "mmand request does not include FileId, this section MUST be skipped\", \"[TestInfo" +
                        "] Connection.Dialect is Smb30, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelBatch\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: The server MUST skip the construction of the SMB2_CREATE_DURABLE_HANDLE_RESPONSE_V2 create context if the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the request and if neither of the following conditions are met:""");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.OplockLevel is equal to SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Open.Lease.LeaseState has SMB2_LEASE_HANDLE_CACHING bit set\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S54");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S54");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S54");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Di" +
                        "alect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYP" +
                        "E_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the serv" +
                        "er MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connectio" +
                        "n.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the R" +
                        "equestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRe" +
                        "quest.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requeste" +
                        "dOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_" +
                        "PERSISTENT bit is not set in the Flags field of this create context, if Requeste" +
                        "dOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if" +
                        " the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_" +
                        "REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE" +
                        "_HANDLE_CACHING, the server MUST ignore this create context and skip this sectio" +
                        "n\", \"[TestTag] Compatibility\", \"[TestInfo] If the command request does not inclu" +
                        "de FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb3" +
                        "0, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS45CreateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S54");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S54");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S54");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb30. The request com" +
                        "mand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9: If Connection.Di" +
                        "alect belongs to the SMB 3.x dialect family TreeConnect.Share.Type includes STYP" +
                        "E_CLUSTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH, the serv" +
                        "er MUST set RequestedOplockLevel to SMB2_OPLOCK_LEVEL_II\", \"[TestInfo] Connectio" +
                        "n.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the R" +
                        "equestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\", \"[MS-SMB2] 3.3.5.9.10: Handling" +
                        " the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createRe" +
                        "quest.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requeste" +
                        "dOplockLevel is OplockLevelII\", \"[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_" +
                        "PERSISTENT bit is not set in the Flags field of this create context, if Requeste" +
                        "dOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if" +
                        " the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_" +
                        "REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE" +
                        "_HANDLE_CACHING, the server MUST ignore this create context and skip this sectio" +
                        "n\", \"[TestTag] Compatibility\", \"[TestInfo] If the command request does not inclu" +
                        "de FileId, this section MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb3" +
                        "0, request command is Create\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If Connection.Dialect belongs to the SMB 3.x dialect family T" +
                    "reeConnect.Share.Type includes STYPE_CLUSTER_SOFS and the RequestedOplockLevel i" +
                    "s SMB2_OPLOCK_LEVEL_BATCH, the server MUST set RequestedOplockLevel to SMB2_OPLO" +
                    "CK_LEVEL_II\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, TreeConnect.Share.Type includes STYPE_CL" +
                    "USTER_SOFS and the RequestedOplockLevel is SMB2_OPLOCK_LEVEL_BATCH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S55
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS55() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS55");
            this.Manager.Comment("reaching state \'S55\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp61;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp61);
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp61, "c of ReadConfig, state S56");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S57\'");
            int temp64 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker38)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker39)));
            if ((temp64 == 0)) {
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,CAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S60\'");
                int temp62 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker3)));
                if ((temp62 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS21();
                    goto label42;
                }
                if ((temp62 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS24();
                    goto label42;
                }
                if ((temp62 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS51();
                    goto label42;
                }
                if ((temp62 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS61();
                    goto label42;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker3)));
            label42:
;
                goto label44;
            }
            if ((temp64 == 1)) {
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,CAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,NormalHandle,OplockLevelNone,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S64\'");
                int temp63 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker5)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker6)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker7)));
                if ((temp63 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS6();
                    goto label43;
                }
                if ((temp63 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS7();
                    goto label43;
                }
                if ((temp63 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS8();
                    goto label43;
                }
                if ((temp63 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS9();
                    goto label43;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker5)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker6)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker7)));
            label43:
;
                goto label44;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S57\'.");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker38() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S60");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S60");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S60");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S60");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S60");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S60");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S60");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S60");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS61() {
            this.Manager.Comment("reaching state \'S61\'");
        }
        
        private void PreConstraintChecker39() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS55CreateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S64");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S65
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS65() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS65");
            this.Manager.Comment("reaching state \'S65\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp65;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp65);
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp65, "c of ReadConfig, state S66");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S67\'");
            int temp68 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker40)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker41)));
            if ((temp68 == 0)) {
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S69\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S70\'");
                int temp66 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker3)));
                if ((temp66 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS71();
                    goto label45;
                }
                if ((temp66 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS71();
                    goto label45;
                }
                if ((temp66 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS72();
                    goto label45;
                }
                if ((temp66 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS72();
                    goto label45;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker3)));
            label45:
;
                goto label47;
            }
            if ((temp68 == 1)) {
                this.Manager.Comment("reaching state \'S73\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,NonCAShare,ClientSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithReplayFlag,DurableHandleV2Persistent,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2Persistent, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S75\'");
                int temp67 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker5)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker6)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker7)));
                if ((temp67 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS76();
                    goto label46;
                }
                if ((temp67 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS76();
                    goto label46;
                }
                if ((temp67 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS77();
                    goto label46;
                }
                if ((temp67 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS77();
                    goto label46;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker4)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker5)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker6)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker7)));
            label46:
;
                goto label47;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S67\'.");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker40() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S70");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S70");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS71() {
            this.Manager.Comment("reaching state \'S71\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S70");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S70");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S70");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S70");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS72() {
            this.Manager.Comment("reaching state \'S72\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S70");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S70");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker41() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S75");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S75");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S75");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS76() {
            this.Manager.Comment("reaching state \'S76\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S75");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S75");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S75");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S75");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S75");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S75");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS77() {
            this.Manager.Comment("reaching state \'S77\'");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS65CreateResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S75");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S75");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S75");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the create process specified in the ""Open Execution"" Phase, and perform the following additional steps:"", ""[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2."", ""[MS-SMB2] In the ""Successful Open Initialization"" phase, the server MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security descriptor accessible only by the user represented by Open.Session.SecurityContext."", ""[TestInfo] Open.IsDurable is set to TRUE"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2Persistent\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS78() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS78");
            this.Manager.Comment("reaching state \'S78\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp69;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp69);
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp69, "c of ReadConfig, state S79");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S80\'");
            int temp71 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker42)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker43)));
            if ((temp71 == 0)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label49;
            }
            if ((temp71 == 1)) {
                this.Manager.Comment("reaching state \'S81\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,CAShare,ClientSupportPersistent,MainChannel,DefaultChannelSequence,WithoutReplayFlag,DurableHandleV2,OplockLevelII,LeaseStateIsNone,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel.OplockLevelII, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S82\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S83\'");
                int temp70 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker3)));
                if ((temp70 == 0)) {
                    this.Manager.Comment("reaching state \'S84\'");
                    goto label48;
                }
                if ((temp70 == 1)) {
                    this.Manager.Comment("reaching state \'S85\'");
                    goto label48;
                }
                if ((temp70 == 2)) {
                    this.Manager.Comment("reaching state \'S86\'");
                    goto label48;
                }
                if ((temp70 == 3)) {
                    this.Manager.Comment("reaching state \'S87\'");
                    goto label48;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker3)));
            label48:
;
                goto label49;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S80\'.");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker42() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker43() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS78CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S83");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context"", ""[TestInfo] createRequest.modelDurableHandle is DurableHandleV2"", ""[TestInfo] createRequest.requestedOplockLevel is OplockLevelII"", ""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section"", ""[TestTag] Compatibility"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb302, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelII\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of this create context, if RequestedOplockLevel in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH, and if the create request does not include a SMB2_CREATE_REQUEST_LEASE or SMB2_CREATE_REQUEST_LEASE_V2 create context with a LeaseState field that includes SMB2_LEASE_HANDLE_CACHING, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S88
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS88() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS88");
            this.Manager.Comment("reaching state \'S88\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp72;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp72);
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp72, "c of ReadConfig, state S89");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S90\'");
            int temp74 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker44)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker45)));
            if ((temp74 == 0)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label51;
            }
            if ((temp74 == 1)) {
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb30,CAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV1,OplockLevelLeaseV1,LeaseStateNotIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S93\'");
                int temp73 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker3)));
                if ((temp73 == 0)) {
                    ReplayCreateWithoutHandleTestCaseS21();
                    goto label50;
                }
                if ((temp73 == 1)) {
                    ReplayCreateWithoutHandleTestCaseS24();
                    goto label50;
                }
                if ((temp73 == 2)) {
                    ReplayCreateWithoutHandleTestCaseS51();
                    goto label50;
                }
                if ((temp73 == 3)) {
                    ReplayCreateWithoutHandleTestCaseS61();
                    goto label50;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker1)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker2)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker3)));
            label50:
;
                goto label51;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S90\'.");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker44() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker45() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((0 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((0 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS88CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S93");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30. The request command is Create"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section"", ""[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateNotIncludeH"", ""[TestInfo] If the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb30, request command is Create""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(1)))) 
                            == false), "Fail to check the assumption : !(durableHandleResponse == 1)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.6: If the RequestedOplockLevel field in the create request is not set to SMB2_OPLOCK_LEVEL_BATCH and the create request does not include an SMB2_CREATE_REQUEST_LEASE create context with a LeaseState field that includes the SMB2_LEASE_HANDLE_CACHING bit value, the server MUST ignore this create context and skip this section""");
            this.Manager.Checkpoint("\"[TestInfo] RequestedOplockLevel is OplockLevelLeaseV1, LeaseState is LeaseStateN" +
                    "otIncludeH\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb30, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S94
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayCreateWithoutHandleTestCaseS94() {
            this.Manager.BeginTest("ReplayCreateWithoutHandleTestCaseS94");
            this.Manager.Comment("reaching state \'S94\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp75;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp75);
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp75, "c of ReadConfig, state S95");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S96\'");
            int temp77 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker46)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker47)));
            if ((temp77 == 0)) {
                ReplayCreateWithoutHandleTestCaseS25();
                goto label53;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S97\'");
                this.Manager.Comment(@"executing step 'call CreateRequest(Smb302,NonCAShare,ClientNotSupportPersistent,MainChannel,ChannelSequenceIncrementOne,WithoutReplayFlag,DurableHandleV2,OplockLevelLeaseV1,LeaseStateIncludeH,DefaultFileName,DefaultCreateGuid,DefaultFileAttributes,DefaultCreateDisposition,DefaultLeaseKey)'");
                this.IReplayAdapterInstance.CreateRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelShareType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelClientSupportPersistent)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle.DurableHandleV2, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestedOplockLevel)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseState.LeaseStateIncludeH, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateGuid)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelFileAttributes)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelCreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelLeaseKey)(0)));
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S99\'");
                int temp76 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS94CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS94CreateResponseChecker1)));
                if ((temp76 == 0)) {
                    this.Manager.Comment("reaching state \'S100\'");
                    goto label52;
                }
                if ((temp76 == 1)) {
                    this.Manager.Comment("reaching state \'S101\'");
                    goto label52;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS94CreateResponseChecker)), new ExpectedEvent(ReplayCreateWithoutHandleTestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.ReplayCreateWithoutHandleTestCaseS94CreateResponseChecker1)));
            label52:
;
                goto label53;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S96\'.");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker46() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker47() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayCreateWithoutHandleTestCaseS94CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S99");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S99");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S99");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found," +
                        " the server MUST continue the create process specified in the \"Open Execution\" P" +
                        "hase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The s" +
                        "erver MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_R" +
                        "EQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, the serve" +
                        "r MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to" +
                        " a security descriptor accessible only by the user represented by Open.Session.S" +
                        "ecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] Reques" +
                        "ted OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateIncludeH\", \"" +
                        "[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                        "s specified in the \"Response Construction\" phase, with the following additional " +
                        "steps, and send the response to client\", \"[TestInfo] Open.IsPersistent is FALSE\"" +
                        ", \"[TestInfo] If the command request does not include FileId, this section MUST " +
                        "be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create" +
                        "\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0))), "Fail to check the assumption : c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOF" +
                    "S == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void ReplayCreateWithoutHandleTestCaseS94CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelDurableHandle durableHandleResponse, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,durableHandleResponse,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S99");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponse, (System.Int32)durableHandleResponse, "durableHandleResponse of CreateResponse, state S99");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of CreateResponse, state S99");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered \"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equa" +
                        "l to \"2.002\" or \"2.100\", or the command request does not include FileId, this se" +
                        "ction MUST be skipped\", \"[TestInfo] Connection.Dialect is Smb302. The request co" +
                        "mmand is Create\", \"[TestTag] Compatibility\", \"[MS-SMB2] 3.3.5.9.10: Handling the" +
                        " SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create Context\", \"[TestInfo] createReques" +
                        "t.modelDurableHandle is DurableHandleV2\", \"[TestInfo] createRequest.requestedOpl" +
                        "ockLevel is OplockLevelLeaseV1\", \"[MS-SMB2] 3.3.5.9.10: If an Open is not found," +
                        " the server MUST continue the create process specified in the \"Open Execution\" P" +
                        "hase, and perform the following additional steps:\", \"[MS-SMB2] 3.3.5.9.10: The s" +
                        "erver MUST set Open.CreateGuid to the CreateGuid in SMB2_CREATE_DURABLE_HANDLE_R" +
                        "EQUEST_V2.\", \"[MS-SMB2] In the \"Successful Open Initialization\" phase, the serve" +
                        "r MUST set Open.IsDurable to TRUE. The server MUST also set Open.DurableOwner to" +
                        " a security descriptor accessible only by the user represented by Open.Session.S" +
                        "ecurityContext.\", \"[TestInfo] Open.IsDurable is set to TRUE\", \"[TestInfo] Reques" +
                        "ted OplockLevel is OplockLevelLeaseV1, Open.leaseState is LeaseStateIncludeH\", \"" +
                        "[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                        "s specified in the \"Response Construction\" phase, with the following additional " +
                        "steps, and send the response to client\", \"[TestInfo] Open.IsPersistent is FALSE\"" +
                        ", \"[TestInfo] If the command request does not include FileId, this section MUST " +
                        "be skipped\", \"[TestInfo] Connection.Dialect is Smb302, request command is Create" +
                        "\"");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((1 | System.Convert.ToInt32((((System.Convert.ToInt32(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.durableHandleResponse.Value)), ((object)(0)))) == 0) 
            == false)) ? (true) : (true))))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !((1 | ((durableHandleResponse == 0) ? 1 : 0)) == " +
                    "0)");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.TreeConnect_Share_Type_Include_STYPE_CLUSTER_SOFS))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.TreeConnect_Share_Type_Include_STYPE_CLUSTER_S" +
                    "OFS == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.durableHandleResponse, "v2 == durableHandleResponse");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v3, this.c, "v3 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302. The request command is Create\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: Handling the SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2 Create " +
                    "Context\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.modelDurableHandle is DurableHandleV2\"");
            this.Manager.Checkpoint("\"[TestInfo] createRequest.requestedOplockLevel is OplockLevelLeaseV1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: If an Open is not found, the server MUST continue the crea" +
                    "te process specified in the \"Open Execution\" Phase, and perform the following ad" +
                    "ditional steps:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST set Open.CreateGuid to the CreateGuid in S" +
                    "MB2_CREATE_DURABLE_HANDLE_REQUEST_V2.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. The server MUST also set Open.DurableOwner to a security de" +
                    "scriptor accessible only by the user represented by Open.Session.SecurityContext" +
                    ".\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE\"");
            this.Manager.Checkpoint("\"[TestInfo] Requested OplockLevel is OplockLevelLeaseV1, Open.leaseState is Lease" +
                    "StateIncludeH\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: The server MUST construct the create response from Open, a" +
                    "s specified in the \"Response Construction\" phase, with the following additional " +
                    "steps, and send the response to client\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsPersistent is FALSE\"");
            this.Manager.Checkpoint("\"[TestInfo] If the command request does not include FileId, this section MUST be " +
                    "skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb302, request command is Create\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponse\'");
            this.durableHandleResponse.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
    }
}
